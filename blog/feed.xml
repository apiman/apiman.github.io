<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="https://www.w3.org/2005/Atom" xmlns:dc="https://purl.org/dc/elements/1.1/">
	<channel>
		<title></title>
		<description>The Apiman project brings an open source development methodology to API Management, coupling a rich API design &amp; configuration layer with a blazingly fast runtime.  This is the official Apiman blog, where we discuss....whatever we&amp;#39;re thinking about!
</description>
                <link>https://apiman.io/blog</link>
		<atom:link href="https://apiman.io/feed.xml" rel="self" type="application/rss+xml" /><item>
				<title>Apiman 2.1.5.Final has been released - please update if you're on an old version</title><dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author><description>&lt;p&gt;Hi, Apiman fans!&lt;/p&gt;

&lt;p&gt;I hope you‚Äôre all well, and Season‚Äôs Greetings to those of you who celebrate Christmas üéÑ.&lt;/p&gt;

&lt;p&gt;I‚Äôd like to remind Apiman users to consider updating to Apiman 2.1.5 promptly, as it contains fixes for the now well-known log4j2 bugs. 
You can download Apiman from all the usual official places: &lt;a href=&quot;https://www.apiman.io/latest/download.html&quot;&gt;Apiman Downloads&lt;/a&gt; or the &lt;a href=&quot;https://github.com/apiman/apiman/releases/tag/2.1.5.Final&quot;&gt;GitHub release&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apiman/apiman/discussions/1722&quot;&gt;If you have questions about this release, please join us on GitHub Discussions&lt;/a&gt;&lt;/p&gt;

</description><category term="apiman" /><category term="release" /><pubDate>Mon, 20 Dec 2021 09:00:00 -0500</pubDate>
				<link>https://apiman.io/blog/apiman/release/2021/12/20/apiman-2.1.5.Final-release.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/apiman/release/2021/12/20/apiman-2.1.5.Final-release.html</guid>
			</item><item>
				<title>Apiman 2.1.0.Final has been released üöÄ</title><dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author><description>&lt;p&gt;I‚Äôm very pleased to say that we‚Äôve released Apiman 2.1.0.Final üëè. We‚Äôve splatted a huge number of bugs and made a lot of improvements to stability, performance, and security.&lt;/p&gt;

&lt;p&gt;Please &lt;a href=&quot;https://www.apiman.io/apiman-docs/core/2.1.0.Final/migration/migrations.html&quot;&gt;consult the migration guide here&lt;/a&gt; if you are planning to upgrade from an earlier version if Apiman (especially if you‚Äôre using Elasticsearch).&lt;/p&gt;

&lt;p&gt;Apiman now can run on any currently released version of Java (assuming the underlying platform can, of course).&lt;/p&gt;

&lt;p&gt;You can see all of the things we‚Äôve fixed in Apiman 2.1.0.Final, &lt;a href=&quot;https://github.com/apiman/apiman/releases/tag/2.1.0.Final&quot;&gt;and you can download the latest overlays, etc, over on our GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you prefer the Apiman website, &lt;a href=&quot;https://www.apiman.io/latest/download.html&quot;&gt;it‚Äôs available right away on the downloads page.&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As usual, there are some simple Docker quickstart images available: &lt;code class=&quot;highlighter-rouge&quot;&gt;docker run -it -p 8080:8080 -p 8443:8443 apiman/on-wildfly:2.1.0.Final&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;A lot of work has gone into this release and we‚Äôre just getting started üèÉ‚Äç‚ôÇÔ∏è.&lt;/p&gt;

&lt;p&gt;Let us know how you find Apiman 2.1.0!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;

&lt;h3 id=&quot;improvements-to-logging&quot;&gt;Improvements to logging&lt;/h3&gt;

&lt;p&gt;If you are a developer writing any kind of code for Apiman (including Apiman plugins or components), you can now instantiate a logger in a more pain-free way than before.&lt;/p&gt;

&lt;p&gt;Simply do:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IApimanLogger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LOGGER&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApimanLoggerFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;klazz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For all distros we ship, we set an appropriate system property to ensure that logging is available and set up as early as possible. But if you implement your own platform or want to override the default logger for a given platform, you can do so by altering the following system property:&lt;/p&gt;

&lt;div class=&quot;language-properties highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;apiman.logger-delegate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;lt;name of logging delegate&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Currently the valid values are: &lt;code class=&quot;highlighter-rouge&quot;&gt;log4j2&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;jboss-logging&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;slf4j&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;sout&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;noop&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;You can create your own logger factory if you want, but I‚Äôll save the details of how to do this for a future blog (and update the docs üñä).&lt;/p&gt;

&lt;p&gt;Check out the log4j2 config that ships with the Apiman Vert.x Gateway for an example logger config that uses async logging to improve log performance considerably.&lt;/p&gt;

&lt;h3 id=&quot;elasticsearch-changes-again&quot;&gt;Elasticsearch changes (again).&lt;/h3&gt;

&lt;p&gt;Apiman 2.0.0.Final had errors in its Manager Elasticsearch schema definition (metrics + gateway was fine). This has been fixed, but there‚Äôs no compatible way to auto-migrate, so you‚Äôll need to export and import.&lt;/p&gt;

&lt;p&gt;If you‚Äôre moving from older versions of Apiman (1.x), the Elasticsearch version used has been upgraded ‚Äì and that in turn causes incompatibilities (this time it‚Äôs not our fault!). Some effort from an administrator is required to upgrade the cluster. Unfortunately upgrading ES clusters has become non-trivial over the years and care is required.&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://www.apiman.io/apiman-docs/core/2.1.0.Final/migration/migrations.html#_migrating_to_2_1_0_final&quot;&gt;migration guide for all the details&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;antora-based-docs&quot;&gt;Antora-based docs&lt;/h3&gt;

&lt;p&gt;We‚Äôve worked hard to &lt;a href=&quot;https://github.com/apiman/apiman-docs&quot;&gt;migrate from GitBook to Antora&lt;/a&gt;. GitBook no longer supports Asciidoc. We appreciate their support over the years.&lt;/p&gt;

&lt;h3 id=&quot;support-java-11&quot;&gt;Support Java 11+&lt;/h3&gt;

&lt;p&gt;Apiman‚Äôs codebase now works on all currently released versions of Java. Naturally, depending which platform you‚Äôre running on, you may be limited to a particular version (e.g. Wildfly, Tomcat, etc).&lt;/p&gt;

&lt;h3 id=&quot;apiman-parent--bom&quot;&gt;Apiman Parent / BOM&lt;/h3&gt;

&lt;p&gt;We now have a new &lt;code class=&quot;highlighter-rouge&quot;&gt;apiman-parent&lt;/code&gt; which allows synchronisation of dependency versions between Apiman projects. This is of particular benefit to &lt;code class=&quot;highlighter-rouge&quot;&gt;apiman-plugins&lt;/code&gt;. Plugin authors can use this to harmonise versions and reduce the risk of any incompatibilities.&lt;/p&gt;

&lt;h3 id=&quot;maven-wrapper&quot;&gt;Maven Wrapper&lt;/h3&gt;

&lt;p&gt;We‚Äôve added Maven Wrapper. You can use this to ensure you build using the same version of Maven that the Apiman team uses. Simply run your build with &lt;code class=&quot;highlighter-rouge&quot;&gt;./mvnw&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;mvn&lt;/code&gt; in Apiman‚Äôs top-level directory.&lt;/p&gt;

&lt;h3 id=&quot;tomcat-is-back&quot;&gt;Tomcat is back&lt;/h3&gt;

&lt;p&gt;In the 2.0.0.Final release, Tomcat was cut as a main distro. By popular demand, it‚Äôs back and has been updated with all of the latest-and-greatest Apiman features (e.g. logging with log4j2 by default now).&lt;/p&gt;

&lt;h3 id=&quot;swaggerwsdl-definitions-now-show-in-apiman-exports&quot;&gt;Swagger/WSDL definitions now show in Apiman exports&lt;/h3&gt;

&lt;p&gt;In older Apiman releases we mistakenly did not include API definitions in Apiman export files. This meant that when you exported and imported they would vanish.&lt;/p&gt;

&lt;p&gt;We‚Äôve fixed this in Apiman 2.1.0.Final, but also provided a migration tool to ‚Äòenrich‚Äô the JSON exported by older versions with the missing data.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.apiman.io/apiman-docs/core/2.1.0.Final/migration/migrations.html#_migrating_to_2_1_0_final&quot;&gt;Refer to the migration guide to see how to do this.&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;removed-some-unused-bits&quot;&gt;Removed some unused bits&lt;/h3&gt;

&lt;p&gt;We‚Äôve removed Hawkular and some other unused components. Nobody was using them, as far as we were able to ascertain.&lt;/p&gt;

&lt;h3 id=&quot;ui-fixes&quot;&gt;UI fixes&lt;/h3&gt;

&lt;p&gt;A bunch of UI bugs have been fixed that were causing strange glitches in 2.0.0.Final. Some nice shortcut navigation sidebars have been added.&lt;/p&gt;

&lt;h3 id=&quot;regressions&quot;&gt;Regressions&lt;/h3&gt;

&lt;p&gt;Some contributions in 2.0.0.Final caused some issues that have now been fixed.&lt;/p&gt;

&lt;p&gt;The most significant one was the Elasticsearch schema causing problems. Unfortunately to fix this you will need to re-import your data. Please refer to the migration guide.&lt;/p&gt;

&lt;p&gt;Various issues in the UI that have been fixed (see above).&lt;/p&gt;

&lt;p&gt;It was not possible to use ES Metrics and a non-ES API Manager datastore at the same time. This is no longer the case and now works as expected again (e.g. RDBMS + ES works).&lt;/p&gt;

&lt;h3 id=&quot;bringing-dependencies-up-to-date&quot;&gt;Bringing dependencies up to date&lt;/h3&gt;

&lt;p&gt;Most dependencies have been brought right up to date (with the exception of the UI where this isn‚Äôt currently essential). This is important for security, performance, and stability - and enabling Apiman to run on newer versions of Java.&lt;/p&gt;

&lt;h3 id=&quot;lots-more&quot;&gt;Lots more&lt;/h3&gt;

&lt;p&gt;A large amount of work went into this release. Check out the GitHub release notes and commit log if you‚Äôre curious.&lt;/p&gt;
</description><category term="apiman" /><category term="release" /><pubDate>Tue, 27 Jul 2021 15:00:00 -0400</pubDate>
				<link>https://apiman.io/blog/apiman/release/2021/07/27/apiman-2.1.0.Final-released.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/apiman/release/2021/07/27/apiman-2.1.0.Final-released.html</guid>
			</item><item>
				<title>Version 1.5 of Apiman is released!</title><dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author><description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m happy to announce that Apiman 1.5.1.Final is out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It contains an important new policy feature: the ability to modify policy failures before they are returned to users (even if they are thrown by another policy).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This means that policies such as CORS can add their headers, irrespective of whether the request was successful or not (e.g. due to rate limiting).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;failure-processing&quot;&gt;Failure Processing&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When a policy throws a failure (e.g. rate limit reached), previously this caused an immediate termination that bypassed all other policies. &lt;strong&gt;Failure processing&lt;/strong&gt; was requested in the community to allow policies to modify failures emitted by other policies, such that headers can be set.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To implement this, you simply need to override the default method &lt;code&gt;processFailure&lt;/code&gt; in &lt;code&gt;IPolicy&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; processFailure(PolicyFailure failure, IPolicyContext context, &lt;span class=&quot;predefined-type&quot;&gt;Object&lt;/span&gt; config,  IPolicyFailureChain chain) { ... }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Or, if you&amp;#8217;re using &lt;code&gt;AbstractMappedPolicy&lt;/code&gt;, then you should override &lt;code&gt;doProcessFailure&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; doProcessFailure(PolicyFailure failure, IPolicyContext context, C config, IPolicyFailureChain chain) { ... }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, in the &lt;a href=&quot;https://github.com/msavy/apiman-plugins/blob/fd2aa46c62a60c7450a3777527f37723908e0865/cors-policy/src/main/java/io/apiman/plugins/cors_policy/CorsPolicy.java#L114-L125&quot;&gt;CORS plugin&lt;/a&gt; it simply adds the headers:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
 &lt;span class=&quot;directive&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; doProcessFailure(PolicyFailure failure, IPolicyContext context, CorsConfigBean config,
         IPolicyFailureChain chain) {

     CaseInsensitiveStringMultiMap corsHeaders = getResponseHeaders(context);

     &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(corsHeaders != EMPTY_MAP) {
         failure.getHeaders().putAll(corsHeaders.toMap());
     }

     chain.doFailure(failure);
 }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Meaning that even if a rate limit is hit, then the headers will still be added.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any issues, please report them to us via &lt;a href=&quot;https://issues.jboss.org/browse/APIMAN/&quot;&gt;JIRA&lt;/a&gt;, &lt;a href=&quot;https://github.com/apiman/apiman&quot;&gt;GitHub&lt;/a&gt;, or &lt;a href=&quot;https://lists.jboss.org/mailman/listinfo/apiman-user&quot;&gt;the mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;download-1-5-1-final&quot;&gt;Download 1.5.1.Final&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.jboss.org/apiman/1.5.1.Final/apiman-distro-vertx-1.5.1.Final.zip&quot;&gt;Vert.x (Gateway Only)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.jboss.org/apiman/1.5.1.Final/apiman-distro-wildfly10-1.5.1.Final-overlay.zip&quot;&gt;WildFly 10 or EAP 7.1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.jboss.org/apiman/1.5.1.Final/apiman-distro-wildfly11-1.5.1.Final-overlay.zip&quot;&gt;WildFly 11&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.jboss.org/apiman/1.5.1.Final/apiman-distro-eap7-1.5.1.Final-overlay.zip&quot;&gt;EAP 7&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.jboss.org/apiman/1.5.1.Final/apiman-distro-tomcat8-1.5.1.Final-overlay.zip&quot;&gt;Tomcat 8+&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category term="apiman" /><category term="release" /><pubDate>Mon, 13 Aug 2018 23:00:00 -0400</pubDate>
				<link>https://apiman.io/blog/apiman/release/2018/08/13/release-1.5.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/apiman/release/2018/08/13/release-1.5.html</guid>
			</item><item>
				<title>Customising path patterns for your Apiman Gateway</title><dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author><description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One common request we hear is how to create custom URL patterns for the Apiman Gateway.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example, this means allowing changing the (Public API) default:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;http://gatewayhost:port/{organizationId}/{apiId}/{version}/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To a custom alternative. As a simple example we&amp;#8217;re going to hard-code an organisation in. We&amp;#8217;ll assume that we&amp;#8217;ve established a convention to always publish our APIs to a particular org. That will change the pattern to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;http://gatewayhost:port/{apiId}/{version}/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you&amp;#8217;re using the Vert.x Gateway you should use Apiman 1.4.3.Final or later as a bug prevented plugins from loading from static config.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;create-a-plugin-skeleton&quot;&gt;Create a plugin skeleton&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Check &lt;a href=&quot;https://www.apiman.io/latest/developer-guide.html#_creating_a_plugin&quot;&gt;out our documentation for creating Apiman Plugins&lt;/a&gt; for more in-depth information.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of Apiman&amp;#8217;s handiest features is its plugin subsystem. This allows you to fully modularise custom code and distribute it through familiar channels like Maven repositories. It&amp;#8217;s much more convenient than trying to play around with customising the class-path and messing around to make sure files are in the right place.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, check out this plugin skeleton:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;$ git clone https://github.com/apiman/apiman-plugins.git
$ cd custom-path-parser-demo/&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Have a look at &lt;code&gt;CustomPathParserImpl.java&lt;/code&gt;. It implements &lt;code&gt;IApiRequestPathParser&lt;/code&gt; and takes the incoming path and headers; it returns an &lt;code&gt;ApiRequestPathInfo&lt;/code&gt; that instructs Apiman what the &lt;code&gt;orgId&lt;/code&gt;, &lt;code&gt;apiId&lt;/code&gt;, &lt;code&gt;apiVersion&lt;/code&gt;, and &lt;code&gt;resource&lt;/code&gt; are, allowing Apiman to map the incoming request correctly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;CustomPathParserImpl&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;implements&lt;/span&gt; IApiRequestPathParser {
    &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; ApiRequestPathInfo parseEndpoint(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; path, HeaderMap headers) {
        &lt;span class=&quot;comment&quot;&gt;// Your custom path logic&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For reference the default implementation is &lt;a href=&quot;https://github.com/apiman/apiman/blob/master/gateway/engine/core/src/main/java/io/apiman/gateway/engine/impl/DefaultRequestPathParser.java&quot;&gt;io.apiman.gateway.engine.impl.DefaultRequestPathParser&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;creating-our-custom-version&quot;&gt;Creating our custom version&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In our demonstration &lt;code&gt;CustomPathParserImpl&lt;/code&gt; we will use a very simple parser that doesn&amp;#8217;t inspect any headers. I recommend you check the default implementation to find &lt;a href=&quot;https://github.com/apiman/apiman/blob/master/common/util/src/main/java/io/apiman/common/util/ApimanPathUtils.java&quot;&gt;utilities&lt;/a&gt; that handles alternative ways of capturing versioning info, such as accept headers, version headers, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First we&amp;#8217;ll add a constructor with a string map. This will allow us to pass in configuration information from our static config file (&lt;code&gt;apiman.properties&lt;/code&gt; or &lt;code&gt;conf.json&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; defaultOrgName;

&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; CustomPathParserImpl(&lt;span class=&quot;predefined-type&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; config) {
   &lt;span class=&quot;comment&quot;&gt;// Pass in the defaultOrgName from static config or just use &amp;quot;DefaultOrg&amp;quot;.&lt;/span&gt;
   &lt;span class=&quot;local-variable&quot;&gt;this&lt;/span&gt;.defaultOrgName = config.getOrDefault(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;defaultOrgName&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;DefaultOrg&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
}

&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; ApiRequestPathInfo parseEndpoint(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; path, HeaderMap headers) {
   &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;type&quot;&gt;[]&lt;/span&gt; split = StringUtils.split(path, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span class=&quot;integer&quot;&gt;3&lt;/span&gt;);

   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (split == &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt; || split.length &amp;lt; &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;) {
      &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;IllegalArgumentException&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Invalid path format, expected /apiId/apiVersion/&amp;lt;resource path&amp;gt;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
   }

   ApiRequestPathInfo parsed = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ApiRequestPathInfo();
   &lt;span class=&quot;comment&quot;&gt;// Let's set the org name manually as our configured `defaultOrgName`&lt;/span&gt;
   parsed.orgId = defaultOrgName;
   parsed.apiId = split[&lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;];
   parsed.apiVersion = split[&lt;span class=&quot;integer&quot;&gt;1&lt;/span&gt;];
   &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (split.length &amp;gt; &lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;) {
      parsed.resource = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; + split[&lt;span class=&quot;integer&quot;&gt;2&lt;/span&gt;];
   } &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; {
      parsed.resource = &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;;
   }
   &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; parsed;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So now, if we have a path like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;/FooApi/1.0/some/resource&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will become:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;orgId&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;DefaultOrg&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;apiId&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;FooApi&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;apiVersion&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;1.0&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;resource&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;/some/resource&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Which would be the equivalent of the default style of:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;/DefaultOrg/FooApi/1.0/some/resource&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;wiring-it-up&quot;&gt;Wiring it up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Change the versions as applicable.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Run &lt;code&gt;mvn clean install&lt;/code&gt; at the demo project&amp;#8217;s root. Then open your Apiman configuration file (either apiman.properties or conf.json).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the Vert.x Gateway:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;&lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;request-parser&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;plugin:io.apiman.plugins:custom-path-parser-plugin-demo:1.4.3.Final:war/io.apiman.plugins.demo.custompathparser.CustomPathParserImpl&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
        &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;defaultOrgName&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Apiman&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;W&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;u&lt;/span&gt; &lt;span class=&quot;error&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;error&quot;&gt;e&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the Servlet Gateway:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;properties&quot;&gt;apiman-gateway.request-parser=plugin:io.apiman.plugins:custom-path-parser-plugin-demo:1.4.3.Final:war/io.apiman.plugins.demo.custompathparser.CustomPathParserImpl
apiman-gateway.request-parser.defaultOrgName=Apiman // Whatever you like&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;$ curl 'http://localhost:8082/TheApi/2'
{
  &quot;method&quot; : &quot;GET&quot;,
  &quot;resource&quot; : &quot;/services/echo/foobar/&quot;,
  &quot;uri&quot; : &quot;/services/echo/foobar/&quot;,
  &quot;headers&quot; : {
    &quot;Accept&quot; : &quot;*/*&quot;,
    &quot;Host&quot; : &quot;localhost:8080&quot;,
    &quot;transfer-encoding&quot; : &quot;chunked&quot;,
    &quot;User-Agent&quot; : &quot;curl/7.54.0&quot;
  },
  &quot;bodyLength&quot; : null,
  &quot;bodySha1&quot; : null,
  &quot;counter&quot; : 2
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Double check that your plugin is structured correctly and you have all of the names right in your plugin URL. Otherwise you will get errors complaining that your classes are not found.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We created a simple plugin to provide custom URL mappings to the Apiman Gateway and configured our gateways to use our code.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A future improvement extending IApiRequestPathParser will allow for the Apiman Gateway to report URLs back to the Apiman Manager (or whomever publishes) in a more granular fashion (rather than just using &lt;code&gt;parseEndpoint&lt;/code&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category term="apiman" /><category term="gateway" /><category term="manager" /><category term="plugin" /><category term="extensibility" /><pubDate>Tue, 03 Jul 2018 16:00:00 -0400</pubDate>
				<link>https://apiman.io/blog/apiman/gateway/manager/plugin/extensibility/2018/07/03/custom-url-parser.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/apiman/gateway/manager/plugin/extensibility/2018/07/03/custom-url-parser.html</guid>
			</item><item>
				<title>Version 1.4.3 of Apiman is released!</title><dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author><description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Apiman 1.4.3.Final is out. It contains a couple of bug-fixes. Most notably, a bug in the Vert.x Gateway that prevented plugins specified in static config (&lt;code&gt;conf.json&lt;/code&gt;) from being loaded properly.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any issues, please report them to us via &lt;a href=&quot;https://issues.jboss.org/browse/APIMAN/&quot;&gt;JIRA&lt;/a&gt;, &lt;a href=&quot;https://github.com/apiman/apiman&quot;&gt;GitHub&lt;/a&gt;, or &lt;a href=&quot;https://lists.jboss.org/mailman/listinfo/apiman-user&quot;&gt;the mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;download-1-4-3-final&quot;&gt;Download 1.4.3.Final&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.jboss.org/apiman/1.4.3.Final/apiman-distro-vertx-1.4.3.Final.zip&quot;&gt;Vert.x (Gateway Only)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.jboss.org/apiman/1.4.3.Final/apiman-distro-wildfly10-1.4.3.Final-overlay.zip&quot;&gt;WildFly 10 or EAP 7.1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.jboss.org/apiman/1.4.3.Final/apiman-distro-wildfly11-1.4.3.Final-overlay.zip&quot;&gt;WildFly 11&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.jboss.org/apiman/1.4.3.Final/apiman-distro-eap7-1.4.3.Final-overlay.zip&quot;&gt;EAP 7&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.jboss.org/apiman/1.4.3.Final/apiman-distro-tomcat8-1.4.3.Final-overlay.zip&quot;&gt;Tomcat 8+&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;release-notes&quot;&gt;Release Notes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12314121&amp;amp;version=12338183&quot;&gt;1.4.3.Final&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Bugs&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/APIMAN-1338&quot;&gt;APIMAN-1338&lt;/a&gt; - Non-policy plugins not being loaded properly from Vert.x static config&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/APIMAN-1340&quot;&gt;APIMAN-1340&lt;/a&gt; - NPE when starting&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category term="apiman" /><category term="release" /><pubDate>Tue, 03 Jul 2018 15:20:00 -0400</pubDate>
				<link>https://apiman.io/blog/apiman/release/2018/07/03/release-1.4.3.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/apiman/release/2018/07/03/release-1.4.3.html</guid>
			</item><item>
				<title>Version 1.4 of Apiman is released!</title><dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author><description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m delighted to announce that Apiman 1.4 has been released (actually, 1.4.1.Final as of this blog post &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The most important change in this release is that we&amp;#8217;ve upgraded support for Elasticsearch from 1.x to 5.x. It may also support Elasticsearch 2.x, but this isn&amp;#8217;t officially supported (let us know your experiences).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A significant number of changes across the ES platform were needed to bring this improvement; including in Apiman Gateway, Apiman Manager, Apiman Metrics, test harnesses, and the ES distribution.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you experience any issues, please report them to us via &lt;a href=&quot;https://issues.jboss.org/browse/APIMAN/&quot;&gt;JIRA&lt;/a&gt;, &lt;a href=&quot;https://github.com/apiman/apiman&quot;&gt;GitHub&lt;/a&gt;, or &lt;a href=&quot;https://lists.jboss.org/mailman/listinfo/apiman-user&quot;&gt;the mailing list&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;upgrading&quot;&gt;Upgrading&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Depending on your approach, to upgrade you can simply use Apiman&amp;#8217;s &lt;a href=&quot;https://www.apiman.io/blog/apiman/introduction/overview/backup/export/import/2016/01/27/export-import.html&quot;&gt;export-import feature&lt;/a&gt;, or upgrade the indices by following Elasticsearch&amp;#8217;s upgrade guides (likely trickier; I recommend export-import).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We also now launch and manage ES in a significantly different way than previously (as an external process), as the &lt;a href=&quot;https://www.elastic.co/blog/elasticsearch-the-server&quot;&gt;old method is no longer supported&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;policies-can-suppressallow-headers-in-connectors&quot;&gt;Policies can suppress/allow headers in connectors.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A new function has been added to &lt;code&gt;IPolicyContext&lt;/code&gt; which enables policy authors to explicitly suppress or allow headers that may otherwise have different treatment by default.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;IConnectorConfig getConnectorConfiguration();&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using &lt;code&gt;IConnectorConfig&lt;/code&gt; a policy author may explicitly override the connector&amp;#8217;s default filtering of headers. These may vary slightly by platform, but generally would by default filter out headers such as &lt;code&gt;X-Api-Key&lt;/code&gt;. This is applied at the &lt;strong&gt;end of the policy chain&lt;/strong&gt; right before the connection is established.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This feature is useful to unblock certain headers that may otherwise be disallowed, or block headers in such a way that it would even apply to subsequent policies.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s an example, using the &lt;code&gt;suppressRequestHeader&lt;/code&gt; method:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; doApply(ApiRequest request, IPolicyContext context, ...) {
    &lt;span class=&quot;comment&quot;&gt;// Get connector config&lt;/span&gt;
    IConnectorConfig connectorConfig = context.getConnectorConfiguration();

    &lt;span class=&quot;comment&quot;&gt;// Ban header. Connector will filter this out.&lt;/span&gt;
    connectorConfig.suppressRequestHeader(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;X-SECRET&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
    &lt;span class=&quot;local-variable&quot;&gt;super&lt;/span&gt;.doApply(request, context, config, chain);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even if another policy in the chain added an &lt;code&gt;X-SECRET&lt;/code&gt; header, it would still be filtered out &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We hope to expand the functionality of &lt;code&gt;IConnectorConfig&lt;/code&gt; in future to allow more control of the connector by policies than is possible presently.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;download-1-4-1-final&quot;&gt;Download 1.4.1.Final&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.jboss.org/apiman/1.4.1.Final/apiman-distro-vertx-1.4.1.Final.zip&quot;&gt;Vert.x (Gateway Only)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.jboss.org/apiman/1.4.1.Final/apiman-distro-wildfly10-1.4.1.Final-overlay.zip&quot;&gt;WildFly 10 or EAP 7.1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.jboss.org/apiman/1.4.1.Final/apiman-distro-wildfly11-1.4.1.Final-overlay.zip&quot;&gt;WildFly 11&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.jboss.org/apiman/1.4.1.Final/apiman-distro-eap7-1.4.1.Final-overlay.zip&quot;&gt;EAP 7&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.jboss.org/apiman/1.4.1.Final/apiman-distro-tomcat8-1.4.1.Final-overlay.zip&quot;&gt;Tomcat 8+&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;release-notes&quot;&gt;Release Notes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12314121&amp;amp;version=12337953&quot;&gt;1.4.0.Final&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12314121&amp;amp;version=12338072&quot;&gt;1.4.1.Final&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Enhancements&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/APIMAN-1334&quot;&gt;APIMAN-1334&lt;/a&gt; - Allow policies to suppress/allow headers in connector.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Bugs&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/APIMAN-1266&quot;&gt;APIMAN-1266&lt;/a&gt; - Error when adding plugin that has previously been deleted (Oracle 12C database)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/APIMAN-1296&quot;&gt;APIMAN-1296&lt;/a&gt; - The API Key policy plugin (apikey-policy) expects the requestHeader property to be all lowercase as of 1.3.1&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/APIMAN-1318&quot;&gt;APIMAN-1318&lt;/a&gt; - Export/Import of a plugin with policies does not work because of its ID&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/APIMAN-1320&quot;&gt;APIMAN-1320&lt;/a&gt; - Gateway API: Clients still inserted even when invalid&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/APIMAN-1321&quot;&gt;APIMAN-1321&lt;/a&gt; - Elasticsearch data is deleted at tomcat shutdown&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/APIMAN-1324&quot;&gt;APIMAN-1324&lt;/a&gt; - index_already_exists_exception when starting WF quickstart&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/APIMAN-1335&quot;&gt;APIMAN-1335&lt;/a&gt; - ApiKeyPolicy from apikey-policy is throwing an NPE on null connectorConfig using the Vert.x gateway&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/APIMAN-1337&quot;&gt;APIMAN-1337&lt;/a&gt; - SoapAuthorizationPolicy missing i18n messages&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Tasks&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/APIMAN-892&quot;&gt;APIMAN-892&lt;/a&gt; - Upgrade to Elasticsearch 5.x&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Sub-tasks&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/APIMAN-1323&quot;&gt;APIMAN-1323&lt;/a&gt; - Rework test harness to cope better with out of order JSON&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/APIMAN-1325&quot;&gt;APIMAN-1325&lt;/a&gt; - Upgrade Jest HTTP Client for ES&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/APIMAN-1326&quot;&gt;APIMAN-1326&lt;/a&gt; - Upgrade Gateway to ES 5.x&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/APIMAN-1327&quot;&gt;APIMAN-1327&lt;/a&gt; - Upgrade Manager to ES 5.x&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/APIMAN-1328&quot;&gt;APIMAN-1328&lt;/a&gt; - Upgrade metrics to ES 5.x&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/APIMAN-1329&quot;&gt;APIMAN-1329&lt;/a&gt; - Update test harness and tests to ES 5.x&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/APIMAN-1330&quot;&gt;APIMAN-1330&lt;/a&gt; - Update QueryBuilders to ES 5.x&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/APIMAN-1331&quot;&gt;APIMAN-1331&lt;/a&gt; - Switch to EmbeddedElastic instead of (actually) embedded&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/APIMAN-1332&quot;&gt;APIMAN-1332&lt;/a&gt; - Update ES distro to include Elasticsearch distro zip&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/browse/APIMAN-1333&quot;&gt;APIMAN-1333&lt;/a&gt; - Handle EmbeddedElastic hanging process when JVM killed ungracefully.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. We fixed a couple of bugs spotted in 1.4.0.Final by the community before the blog was written
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt;. Unless it explicitly overrode your suppression!
&lt;/div&gt;
&lt;/div&gt;</description><category term="apiman" /><category term="release" /><pubDate>Fri, 22 Jun 2018 14:40:00 -0400</pubDate>
				<link>https://apiman.io/blog/apiman/release/2018/06/22/release-1.4.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/apiman/release/2018/06/22/release-1.4.html</guid>
			</item><item>
				<title>Version 1.3.5.Final of Apiman is released</title><dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author><description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Apiman 1.3.5.Final is out and ready for you all to try.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This just contains some UI reversions, as we still have some tough-to-fix gremlins. We&amp;#8217;ll bring the updates back once we&amp;#8217;re able to fix the issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It contains all of the same fixes and features as 1.3.4.Final.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;download-1-3-5-final&quot;&gt;Download 1.3.5.Final&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.jboss.org/apiman/1.3.5.Final/apiman-distro-vertx-1.3.5.Final.zip&quot;&gt;Vert.x (Gateway Only)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.jboss.org/apiman/1.3.5.Final/apiman-distro-wildfly10-1.3.5.Final-overlay.zip&quot;&gt;WildFly 10 or EAP 7.1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.jboss.org/apiman/1.3.5.Final/apiman-distro-wildfly11-1.3.5.Final-overlay.zip&quot;&gt;WildFly 11&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.jboss.org/apiman/1.3.5.Final/apiman-distro-eap7-1.3.5.Final-overlay.zip&quot;&gt;EAP 7&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.jboss.org/apiman/1.3.5.Final/apiman-distro-tomcat8-1.3.5.Final-overlay.zip&quot;&gt;Tomcat 8+&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Or directly from &lt;a href=&quot;https://github.com/apiman/apiman/releases/tag/apiman-1.3.5.Final&quot;&gt;GitHub&lt;/a&gt; or &lt;a href=&quot;https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.apiman%22%20AND%20v%3A%221.3.5.Final%22&quot;&gt;Maven Central&lt;/a&gt; if you prefer (faster in some regions).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category term="apiman" /><category term="release" /><pubDate>Sat, 28 Apr 2018 00:01:00 -0400</pubDate>
				<link>https://apiman.io/blog/apiman/release/2018/04/28/release-1.3.5.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/apiman/release/2018/04/28/release-1.3.5.html</guid>
			</item><item>
				<title>Version 1.3.4.Final of Apiman is released!</title><dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author><description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Apiman 1.3.4.Final is out and ready for you all to try.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You may be wondering where 1.3.2.Final and 1.3.3.Final are; early community testing found some regressions, so we skipped formally announcing those.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;download-1-3-4-final&quot;&gt;Download 1.3.4.Final&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.jboss.org/apiman/1.3.4.Final/apiman-distro-vertx-1.3.4.Final.zip&quot;&gt;Vert.x (Gateway Only)&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.jboss.org/apiman/1.3.4.Final/apiman-distro-wildfly10-1.3.4.Final-overlay.zip&quot;&gt;WildFly 10 or EAP 7.1&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.jboss.org/apiman/1.3.4.Final/apiman-distro-wildfly11-1.3.4.Final-overlay.zip&quot;&gt;WildFly 11&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.jboss.org/apiman/1.3.4.Final/apiman-distro-eap7-1.3.4.Final-overlay.zip&quot;&gt;EAP 7&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://downloads.jboss.org/apiman/1.3.4.Final/apiman-distro-tomcat8-1.3.4.Final-overlay.zip&quot;&gt;Tomcat 8+&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Or directly from &lt;a href=&quot;https://github.com/apiman/apiman/releases/tag/apiman-1.3.4.Final&quot;&gt;GitHub&lt;/a&gt; or &lt;a href=&quot;https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22io.apiman%22%20AND%20v%3A%221.3.4.Final%22&quot;&gt;Maven Central&lt;/a&gt; if you prefer (faster in some regions).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;tonnes-of-bug-fixes&quot;&gt;Tonnes of bug-fixes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you had bugs, please try 1.3.4.Final. There&amp;#8217;s a reasonable chance we addressed them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This includes issues such as: same-key headers being handled improperly in the Servlet edition; a variety of config and UI bugs; import-export issues; Vert.x config and connection issues.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you still have problems, then please let us know on the &lt;a href=&quot;https://lists.jboss.org/mailman/listinfo/apiman-user&quot;&gt;mailing list&lt;/a&gt; or via filing a bug.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;list-entities-directly-on-the-gateway-api&quot;&gt;List entities directly on the Gateway API&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We extended the Apiman Gateway API to allow you to list entities directly. This is useful for &lt;a href=&quot;https://github.com/apiman/apiman-cli&quot;&gt;our CLI&lt;/a&gt; (which will soon be bundled with Apiman releases).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ll have some more formal documentation shortly, but a short summary:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
The credentials to access the Apiman Gateway API are likely different than the UI. The quickstart demo is &lt;code&gt;apimanager/apiman123!&lt;/code&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;shell&quot;&gt;$ curl -k 'https://apimanager:apiman123!@localhost:8443/apiman-gateway-api/organizations'

[&amp;quot;FooOrganization&amp;quot;, &amp;quot;OtherOrg&amp;quot;]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;List Organizations&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;code&gt;apiman-gateway-api/organizations&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Returns: Array of Organization IDs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;List all APIs in Organization&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;code&gt;api-gateway-api/organization/{Organization ID}/apis&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Returns: Array of API IDs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;List all Api Versions in Organization&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;code&gt;api-gateway-api/organization/{Organization ID}/apis/{API Version}&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Returns: Array of &lt;a href=&quot;https://github.com/apiman/apiman/blob/master/gateway/engine/beans/src/main/java/io/apiman/gateway/engine/beans/Api.java&quot;&gt;API Version&lt;/a&gt; objects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;List all Clients in Organization&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;code&gt;api-gateway-api/organization/{organizationId}/clients&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Returns: Array of Client IDs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;List all Client Versions in Organization&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;&lt;code&gt;api-gateway-api/organization/{Organization ID}/clients/{Client Version}&lt;/code&gt;&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Returns: Array of &lt;a href=&quot;https://github.com/apiman/apiman/blob/master/gateway/engine/beans/src/main/java/io/apiman/gateway/engine/beans/Api.java&quot;&gt;Client Version&lt;/a&gt; objects.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;wildfly-11&quot;&gt;WildFly 11&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re now officially distributing a WildFly 11 overlay, with a newer version of Keycloak.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are corresponding Docker quickstart images available.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;master-docker-builds&quot;&gt;Master Docker builds&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As a component of our CI, we are now producing Docker builds of all successful builds of Apiman&amp;#8217;s master branch. So, if you need to test something on the bleeding edge, it should be much easier now.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;docker run -it -p 8080:8080 -p 8443:8443 apiman/on-wildfly11:master&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Latest always refers to the latest &lt;strong&gt;release&lt;/strong&gt; (e.g 1.3.4.Final), whilst master refers to the latest successful HEAD of master and hence moves frequently.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;cli-work&quot;&gt;CLI work&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Working with the community, we&amp;#8217;ve been successfully developing a large amount of &lt;a href=&quot;https://github.com/apiman/apiman-cli&quot;&gt;CLI functionality&lt;/a&gt;. We expect this to be bundled with an Apiman release soon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One key feature will be the ability to apply YAML declarations against the Apiman Manager or Apiman Gateway, allowing users to set the state of their system in a more static way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This will be in addition to traditional CLI functions to do one thing at a time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Separate blog-post on that soon.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;apiman-plans-to-move-to-elasticsearch-5-x-give-your-feedback&quot;&gt;Apiman plans to move to Elasticsearch 5.x. Give your feedback.&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The next planned release of Apiman will move Elasticsearch to 5.x. We plan to drop ES 1.x support. If an upgrade/migration would be particularly problematic, please let us know on the mailing list or open a ticket.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The work on this is nearing completion, so feedback now would be valuable.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;release-notes&quot;&gt;Release Notes&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Note that some issues resolved may not have been assigned tickets, so this is a partial set.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12314121&amp;amp;version=12335096&quot;&gt;Release notes for 1.3.3.Final&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12314121&amp;amp;version=12337455&quot;&gt;Release notes for 1.3.4.Final&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;thanks-to-the-community&quot;&gt;Thanks to the Community&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks to the community for their valuable contributions to this release. We had a meaningful number of features, bug reports, and bug-fixes.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category term="apiman" /><category term="release" /><pubDate>Fri, 27 Apr 2018 14:10:00 -0400</pubDate>
				<link>https://apiman.io/blog/apiman/release/2018/04/27/release-1.3.4.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/apiman/release/2018/04/27/release-1.3.4.html</guid>
			</item><item>
				<title>Version 1.3.1.Final of apiman is released!</title><dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author><description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m delighted to announce that Apiman 1.3.1.Final is out, with several notable new features and improvements &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3scale-related-functionality&quot;&gt;3scale-related functionality&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now use the Apiman Gateway with the 3scale Manager/UI as an alternative to the Apiman Manager/UI! &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using an overlay file you can augment your 3scale APIs with apiman policies. There will hopefully be an opportunity for a more cohesive and deeper integration with 3scale in the near future. Your feedback and demand will drive this; I hope as many people try it out this functionality as possible!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new 3scale registry and plugin can perform all of the usual 3scale functions, such as auth, reporting, metrics, and rate-limiting; with the addition breadth of apiman&amp;#8217;s policies and pluggable functionality. The one exception is that 3scale OAuth is currently not implemented (apiman&amp;#8217;s OAuth plugins work as normal).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ll be providing some additional blogposts over the coming days to demonstrate the new features in a more digestible form, but the documentation is available already. Just &lt;a href=&quot;https://www.apiman.io/latest/download.html#headless&quot;&gt;download the &lt;em&gt;3scale &amp;amp; Headless&lt;/em&gt; Vert.x distro&lt;/a&gt; and follow the instructions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://apiman.gitbooks.io/apiman-installation-guide/installation-guide/registries-and-components/3scale_immutable.html&quot;&gt;3scale quickstart configuration&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://apiman.gitbooks.io/apiman-installation-guide/installation-guide/vertx/download.html#_3scale_immutable&quot;&gt;3scale Immutable Registry &amp;amp; Components&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Expect some tooling soon to make generating JSON configurations for headless and 3scale registries easier!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;bug-fixes-improvements&quot;&gt;Bug-fixes &amp;amp; Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A good number of bugs were squashed in this release. Please try it out and let us know if your issues persist (if you had any!).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The HTTP codes returned in error cases have been improved, including connection issues (e.g. DNS, timeouts, etc).  You should no longer get HTTP 500 for these, and the error messages should be more meaningful. Let us know if there still seem to be issues in this area.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There were a few issues with TLS on the Vert.x gateway that have been improved (e.g. devmode was not working properly). In the near future we&amp;#8217;ll look to provide some sort of self-signed certificate generation so that TLS can be configured OOTB. As an added bonus, if you provide ALPN Boot, then HTTP/2 should just work &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_3&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_3&quot; title=&quot;View footnote.&quot;&gt;3&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The release notes for this release can be found here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12314121&amp;amp;version=12334619&quot;&gt;Release notes for 1.3.1.Final&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;you-can-help&quot;&gt;You can help!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please try the new functionality and let us know how you find it. Your demand and feedback is extremely important to the future direction of this project.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;next&quot;&gt;Next&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Expect another release very soon with more functionality, configurability and tooling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some users have reported issues with the new GitBook documentation, so we&amp;#8217;ll be looking to improve this.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. The more eagle-eyed amongst you will no doubt have noticed that most of this was actually released a few days ago.
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt;. You will need 3scale SaaS or on-prem for this to work.
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_3&quot;&gt;
&lt;a href=&quot;#_footnoteref_3&quot;&gt;3&lt;/a&gt;. More in a blog soon.
&lt;/div&gt;
&lt;/div&gt;</description><category term="apiman" /><category term="release" /><pubDate>Thu, 29 Jun 2017 17:00:00 -0400</pubDate>
				<link>https://apiman.io/blog/apiman/release/2017/06/29/release-1.3.1.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/apiman/release/2017/06/29/release-1.3.1.html</guid>
			</item><item>
				<title>Version 1.3.0.Final of apiman is released!</title><dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author><description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last week we released apiman &lt;em&gt;1.3.0.Final&lt;/em&gt;. It&amp;#8217;s been &lt;em&gt;rather&lt;/em&gt; a long while coming, but hopefully you&amp;#8217;ll be pleased with the improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release has some important new features, a substantial number of bug-fixes, and marks the official release of the Apiman Vert.x Gateway.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Importantly, this release has a lot of background work which has prepared the  the ground for the upcoming initial community integration with 3scale, as outlined in previous blogs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;where-can-i-find-more-information&quot;&gt;Where can I find more information?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The release notes for this release can be found here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://red.ht/2q31DBP&quot;&gt;Release notes for 1.3.0.Final&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And of course, all of the standard sources of information have been updated:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://www.apiman.io/&quot;&gt;The apiman project site&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://apiman.gitbooks.io/apiman-user-guide/&quot;&gt;Latest User Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://apiman.gitbooks.io/apiman-installation-guide/&quot;&gt;Latest Installation Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;highlights&quot;&gt;Highlights&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just want to know about the good stuff? Let&amp;#8217;s have a brief look at some of the more important changes in this version.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;bug-smashing-galore&quot;&gt;Bug smashing galore&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A substantial number of bugs have been resolved &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;. If there was something &lt;em&gt;bugging&lt;/em&gt; you, then it&amp;#8217;s worth trying out 1.3.0.Final to see whether your issue has been fixed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Otherwise, please do consider filing an issue!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;vert-x-comes-to-the-fore&quot;&gt;Vert.x comes to the fore&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Vert.x Apiman Gateway has finally left the &lt;em&gt;tech preview&lt;/em&gt; stable and been reworked and polished to the point that it has been officially released. It is now the recommended platform for those who need high performance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For those that aren&amp;#8217;t familiar with Vert.x, it&amp;#8217;s an asynchronous, reactive toolkit that provides a high throughput and low latency; it&amp;#8217;s a perfect match for the apiman gateway.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please &lt;a href=&quot;https://apiman.gitbooks.io/apiman-installation-guide/installation-guide/vertx/download.html&quot;&gt;try it out&lt;/a&gt; and &lt;a href=&quot;https://lists.jboss.org/mailman/listinfo/apiman-user&quot;&gt;let us know what you think&lt;/a&gt;! We hope you&amp;#8217;ll be impressed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Out of the box there are Elasticsearch and &lt;a href=&quot;#headless-registry&quot;&gt;Headless&lt;/a&gt; configuration examples. It also uses an asynchronous log4j2 configuration which should provide excellent performance &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s a really quick way to try it out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Download and run the &lt;a href=&quot;https://apiman.gitbooks.io/apiman-installation-guide/installation-guide/servlet/install.html#_installing_in_wildfly_10&quot;&gt;WildFly 10 quickstart&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download and run the &lt;a href=&quot;https://apiman.gitbooks.io/apiman-installation-guide/installation-guide/vertx/download.html&quot;&gt;Vert.x Gateway distro&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add your new gateway through the &lt;a href=&quot;https://apiman.gitbooks.io/apiman-installation-guide/installation-guide/vertx/install.html&quot;&gt;Apiman UI&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start publishing stuff! üéâ&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a gateway only implementation. It is paired with any Servlet-based Apiman Manager. Just add it through the &lt;a href=&quot;https://apiman.gitbooks.io/apiman-installation-guide/installation-guide/vertx/install.html&quot;&gt;Apiman UI&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;headless-registry&quot;&gt;Headless registry&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/5rAOyh7YmEc?t=12s&quot;&gt;Feeling headless?&lt;/a&gt; &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_3&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_3&quot; title=&quot;View footnote.&quot;&gt;3&lt;/a&gt;]&lt;/sup&gt;. We&amp;#8217;ve introduced an &lt;em&gt;immutable headless registry&lt;/em&gt; that loads gateway configuration as JSON from a local or remote location (file, http or https).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It even &lt;a href=&quot;https://apiman.gitbooks.io/apiman-installation-guide/installation-guide/registries-and-components/headless.html#_required_parameters&quot;&gt;supports authentication&lt;/a&gt;, if you need to secure that configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the moment it&amp;#8217;s probably for more advanced users, as some JSON-wrangling is required, but it&amp;#8217;s a really powerful feature that will suit many people&amp;#8217;s immutable architectures. Some of users don&amp;#8217;t actually need the apiman UI or Manager; as there is no human interaction aspects to their workflow (e.g. B2B scenarios, monitoring, managed through other systems, etc).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To find out more:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Look at the &lt;a href=&quot;https://apiman.gitbooks.io/apiman-installation-guide/installation-guide/registries-and-components/headless.html&quot;&gt;Headless Registry documentation&lt;/a&gt;, which contains extensive explanation of how to build your JSON.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then try out the Headless ES  &lt;a href=&quot;https://apiman.gitbooks.io/apiman-installation-guide/installation-guide/vertx/download.html#_elasticsearch&quot;&gt;configuration&lt;/a&gt; that ships with &lt;a href=&quot;https://www.apiman.io/latest/download.html#vertx&quot;&gt;the distro&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-documentation&quot;&gt;New documentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Given the new additions, documentation has been reworked (excluding developer guide) and is now using GitBook. We welcome your critique on whether this is an improvement versus the older documentation and you can still figure out what you need.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://apiman.gitbooks.io/apiman-installation-guide/&quot;&gt;Apiman Installation Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://apiman.gitbooks.io/apiman-user-guide/&quot;&gt;Apiman User Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://apiman.gitbooks.io/apiman-deployment-guide/&quot;&gt;Apiman Deployment Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;thank-you&quot;&gt;Thank you!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s lots more &lt;em&gt;good stuff&lt;/em&gt; to come and with much greater regularity, so stay tuned (releases, blogs, plugins, etc).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks to the community members who have made contributions to this release via code, filing bugs, and even some in-person meetings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, it&amp;#8217;s my pleasure to be doing my first release announcement for apiman, having stepped up to tech lead for the apiman gateway.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. As usual, we probably forgot to create tickets for all of the bugs, so include &quot;misc bugs splattered&quot;
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt;. Usual caveats with logging apply.
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_3&quot;&gt;
&lt;a href=&quot;#_footnoteref_3&quot;&gt;3&lt;/a&gt;. Sorry.
&lt;/div&gt;
&lt;/div&gt;</description><category term="apiman" /><category term="release" /><pubDate>Thu, 25 May 2017 16:00:00 -0400</pubDate>
				<link>https://apiman.io/blog/apiman/release/2017/05/25/release-1.3.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/apiman/release/2017/05/25/release-1.3.html</guid>
			</item><item>
				<title>Performance tuning the Apiman Gateway (WildFly, EAP, Tomcat)</title><dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author><description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog, we&amp;#8217;ll outline a few simple tweaks you can make to improve the performance of the Apiman Gateway when running on servlet platforms (WildFly, EAP, Tomcat, etc).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most of the focus will be on WildFly and EAP, but others will be more broadly applicable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Naturally, these are very rough pointers and should merely be hints for areas that could prove fruitful. There&amp;#8217;s no one-size-fits all approach to tuning, so always profile and keep tweaking to find the best settings for your workloads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;increase-maximum-allowed-connections&quot;&gt;Increase maximum allowed connections&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the time of publishing (1.3.0.Final), the OkHttpClient max connections setting can be increased by setting the &lt;code&gt;http.maxConnections&lt;/code&gt; system property &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;-Dhttp.maxConnections=100&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This should increase the number of connections that can be handled between apiman and the backend API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;wildflyeap&quot;&gt;WildFly/EAP&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also increase the WildFly/EAP connection limit. In your &lt;code&gt;standalone.xml&lt;/code&gt;, look for the Undertow subsystem, and add a &lt;code&gt;request-limit&lt;/code&gt; to the &lt;code&gt;filters&lt;/code&gt; section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;request-limit&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;limit-connections&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;max-concurrent-requests&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;15000&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;queue-size&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are some config examples:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wildfly/wildfly/blob/10.x/undertow/src/test/resources/org/wildfly/extension/undertow/undertow-3.1.xml#L110&quot;&gt;WildFly 10&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wildfly/wildfly/blob/9.x/undertow/src/test/resources/org/wildfly/extension/undertow/undertow-2.0.xml#L104&quot;&gt;WildFly 9&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wildfly/wildfly/blob/8.x/undertow/src/test/resources/org/wildfly/extension/undertow/undertow-1.2.xml#L101&quot;&gt;WildFly 8&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This should improve the number of connections that can be handled between the client (caller) and the apiman gateway.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tomcat&quot;&gt;Tomcat&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For Tomcat, the equivalent options appear to be &lt;code&gt;maxConnections&lt;/code&gt; and &lt;code&gt;maxThreads&lt;/code&gt;. &lt;a href=&quot;https://tomcat.apache.org/tomcat-9.0-doc/config/http.html#Standard_Implementation&quot;&gt;Refer to the documentation for more&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;some-community-contributed-io-tweaks&quot;&gt;Some community-contributed IO tweaks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Community member Harry Trinta &lt;a href=&quot;https://lists.jboss.org/pipermail/apiman-user/2017-January/000758.html&quot;&gt;shared some tweaks to IO settings&lt;/a&gt; he found useful for WildFly 10 when running Apiman at high load.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;re seeing broken pipe errors or dropped connections, it may be worth tweaking these parameters.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-usual-jvm-and-os-tweaks&quot;&gt;The usual JVM and OS tweaks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is an entire speciality in of itself and out of scope for t his brief blog, but it&amp;#8217;s worth mentioning in passing. You should run some profiling on your workloads to see whether various JVM tweaks could improve your performance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In your list of things to try should be heap size, garbage collector and collector settings &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/sup&gt;. It is also likely worth evaluating your system as a whole; do you have other processes on the system which may be &lt;a href=&quot;https://github.com/giltene/jHiccup&quot;&gt;causing hiccups&lt;/a&gt;; do you have enough file handles available; have you tweaked your protocol settings?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;use-the-vert-x-gateway-implementation&quot;&gt;Use the Vert.x gateway implementation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To get superior performance, consider using the &lt;a href=&quot;https://apiman.gitbooks.io/apiman-installation-guide/content/installation-guide/vertx/download.html&quot;&gt;Vert.x gateway distribution&lt;/a&gt;. Vert.x is an async platform, optimised for high-throughput scenarios and is ideally suited to the apiman gateway.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. This option is valid as of OkHttpClient 2.4.0, and is changed in later versions. We will endeavour to provide backwards compatibility when apiman upgrades.
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt;. Anyone want to try Shenandoah GC :-)?
&lt;/div&gt;
&lt;/div&gt;</description><category term="apiman" /><category term="gateway" /><category term="performance" /><pubDate>Mon, 15 May 2017 16:00:00 -0400</pubDate>
				<link>https://apiman.io/blog/apiman/gateway/performance/2017/05/15/tuning-servlet-gateway.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/apiman/gateway/performance/2017/05/15/tuning-servlet-gateway.html</guid>
			</item><item>
				<title>3scale and apiman - Part Deux</title><dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author><description>&lt;p&gt;It‚Äôs been almost two months since Red Hat announced it was acquiring 3scale Technologies and turning 
the 3scale API Management solution into a Red Hat supported product.  In that time, we‚Äôve been trying 
to figure out some stuff for the apiman community.  Here some of the things we wanted to suss out:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How the apiman development team can best focus its efforts, now that 3scale will be the basis for Red Hat‚Äôs API Management technology.&lt;/li&gt;
  &lt;li&gt;How to best support the existing apiman community going forward, given the restrictions on continued development of the apiman API Management solution.&lt;/li&gt;
  &lt;li&gt;How can existing apiman users transition to a Red Hat supported API Management solution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It doesn‚Äôt sound like much, but it actually really is.  We‚Äôve made some preliminary decisions, and 
because we want to be as transparent and upfront as possible, read on to find out what they are!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I know everyone in the apiman community probably has a lot of questions, so let‚Äôs dive right in (with 
the most important questions first).  Please note that none of this is written in stone - software 
development in general, and this situation in particular, is often very fluid.  I‚Äôm saying we reserve 
the right to change our minds!  But this post represents the best information we have right now - and 
we like to keep the apiman community in the loop as much as possible.&lt;/p&gt;

&lt;p&gt;Of course, if you have questions that aren‚Äôt covered by this post (very likely!) you can always find 
us on IRC or send questions to the mailing list.  Links to both can be found up above in the ‚ÄúGet 
Involved‚Äù menu.&lt;/p&gt;

&lt;h2 id=&quot;what-will-happen-to-the-current-apiman-api-management-solution&quot;&gt;What will happen to the current apiman API Management solution?&lt;/h2&gt;
&lt;p&gt;We discussed a number of options, but we think it‚Äôs best for everyone if we put the full apiman API 
Management solution into maintenance mode.  What does this mean?  Well, it means that we will address 
critical bugs and any issues that are trivial to implement/fix.  Of course, we will continue to accept 
community contributions, making sure that they meaningfully improve the overall solution.  This will 
allow anyone using a current version of apiman to continue using it, without worrying about the 
community edition disappearing.  However, it DOES mean that you should not expect significant new 
features to be added (unless they are contributed by the larger apiman community).&lt;/p&gt;

&lt;p&gt;It should be noted that apiman continues to be extremely extensible - so there‚Äôs nothing stopping 
individual users from implementing their own core apiman components and/or custom policies.  While 
we would prefer it if custom components and policies developed by users were contributed back to 
the project, we understand that it‚Äôs often either not appropriate or not possible.&lt;/p&gt;

&lt;p&gt;We explored the idea of donating the apiman project to a popular open source software foundation 
(e.g. apache or eclipse) but decided that it was premature.  The idea hasn‚Äôt been ruled out for 
the future, but for now we‚Äôre going to keep apiman right where it is.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-migration-path-from-apiman-to-red-hats-3scale-based-api-management-product&quot;&gt;What is the migration path from apiman to Red Hat‚Äôs 3scale-based API Management product?&lt;/h2&gt;
&lt;p&gt;Obviously not all of our users were specifically looking for a Red Hat supported version.  It‚Äôs 
certainly the case that many are perfectly happy using the community edition.  That said, many of 
you may be wondering what the migration path will be from the apiman community edition to Red Hat‚Äôs 
API Management solution.&lt;/p&gt;

&lt;p&gt;There are actually several aspects to this problem, and we won‚Äôt be able to solve them all.  Ultimately 
the answer is that there won‚Äôt be any sort of automatic migration from an apiman configuration to a 3scale 
one.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;However&lt;/em&gt;, we will be updating apiman‚Äôs API Gateway to work with the 3scale solution (acting as an optional 
replacement for e.g. the 3scale NGINX-based gateway) while also supporting all existing apiman policies.&lt;br /&gt;
Effectively, this will result in an API Gateway that will implement the 3scale gateway functionality &lt;em&gt;and&lt;/em&gt; 
the apiman gateway functionality (including custom policies!) in one neat package.  For those of you in 
the community who have invested time and effort into creating your own custom policies, this will allow 
you to continue using them!  Not only that, but you will continue to have access to all of the policies 
that exist today in apiman (along with any new ones we might release in the future).&lt;/p&gt;

&lt;p&gt;Additionally, we will be releasing a standalone community version of this new API Gateway - a version that 
can be configured and can operate without any additional components (3scale or otherwise).  At the same 
time, we will have a version that works in conjunction with the current 3scale platform (again, as an 
alternative to the 3scale NGINX- based gateway).&lt;/p&gt;

&lt;h2 id=&quot;will-the-apiman-team-be-working-on-the-3scale-api-management-product&quot;&gt;Will the apiman team be working on the 3scale API Management product?&lt;/h2&gt;
&lt;p&gt;Other than creating and maintaining the already mentioned Java-based API Gateway, the apiman team will not 
be contributing significantly to the 3scale API Management product/platform at this time.  There are a 
number of reasons for this, but the primary issue is that apiman and 3scale have chosen very different 
languages and technologies as the basis for our respective solutions.  We don‚Äôt have any experience/expertise 
in the technologies that make up the 3scale platform, and vice versa.&lt;/p&gt;

&lt;p&gt;Fortunately, 3scale already has a superb team of engineers, testers, and designers.  I‚Äôm quite certain that 
the future of Red Hat‚Äôs API Management technology is very bright!&lt;/p&gt;

&lt;h2 id=&quot;so-what-cool-new-projects-will-the-apiman-team-be-working-on&quot;&gt;So what cool new projects will the apiman team be working on?&lt;/h2&gt;
&lt;p&gt;Well we‚Äôve already mentioned the new (repurposed?) API Gateway that will go a long way to bring together the 
3scale and apiman technologies.  In addition to that, we have a few new things in the pipeline.&lt;/p&gt;

&lt;p&gt;One additional API Management related mini-project that we‚Äôve already put together is a standalone Rate 
Limiting [Micro-]Service.  The goal of ‚Äúapiman-rls‚Äù is to create a specially designed server that can manage 
large numbers of rate limits in an efficient and accurate way.  A new github repository has already been 
created and we‚Äôve already got a prototype implementation, which you can find here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apiman/apiman-rls&quot;&gt;https://github.com/apiman/apiman-rls&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Additionally, we‚Äôre exploring a number of other new projects, although it‚Äôs too early to talk about them
yet (no final decisions have been made).  Keep your eye on this space for future announcements!&lt;/p&gt;

&lt;h2 id=&quot;conclusionfinal-thoughts&quot;&gt;Conclusion/Final Thoughts&lt;/h2&gt;
&lt;p&gt;As always, thanks for reading this blog post.  And of course, thank you to the entire apiman community 
for your interest, support AND for being awesome!  Of course we would have preferred to see the apiman 
project continue to be Red Hat‚Äôs commercial API Management solution.  That wasn‚Äôt in the cards, but I 
know that we and the newly acquired 3scale team will do their damndest to push out the best API Management 
solution possible!&lt;/p&gt;

&lt;p&gt;Finally, here are some takeaways from this post, just to reinforce them.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Apiman is staying right where it is, but will be put into ‚Äúmaintenance‚Äù mode - we‚Äôll only be working on critical bugs and easy-to-implement issues.&lt;/li&gt;
  &lt;li&gt;We‚Äôll be releasing a new version of the API Gateway that works with the 3scale technology, but ALSO functions in a standalone community mode.&lt;/li&gt;
  &lt;li&gt;All existing apiman policies will be ported to the new API Gateway.&lt;/li&gt;
  &lt;li&gt;Custom apiman policies will be trivial to modify such that they work in the new API Gateway.&lt;/li&gt;
  &lt;li&gt;New apiman branded project:  Rate Limiting [Micro-]Service (apiman-rls)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;our-contributors&quot;&gt;Our contributors&lt;/h2&gt;

&lt;h3 id=&quot;core-team&quot;&gt;Core team:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Eric Wittmann &lt;a href=&quot;https://github.com/EricWittmann&quot;&gt;https://github.com/EricWittmann&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Marc Savy &lt;a href=&quot;https://github.com/msavy&quot;&gt;https://github.com/msavy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Rachel Yord√°n &lt;a href=&quot;https://github.com/kahboom&quot;&gt;https://github.com/kahboom&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;thank-you-to-our-community-contributors-in-commit-order&quot;&gt;Thank you to our community contributors, in commit order:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Gary Brown &lt;a href=&quot;https://github.com/objectiser&quot;&gt;https://github.com/objectiser&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Brett Meyer &lt;a href=&quot;https://github.com/brmeyer&quot;&gt;https://github.com/brmeyer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Rub√©n Romero Montes &lt;a href=&quot;https://github.com/ruromero&quot;&gt;https://github.com/ruromero&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Kurt Stam &lt;a href=&quot;https://github.com/kurtstam&quot;&gt;https://github.com/kurtstam&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Jorge Morales Pou &lt;a href=&quot;https://github.com/jorgemoralespou&quot;&gt;https://github.com/jorgemoralespou&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Jakub Cechacek &lt;a href=&quot;https://github.com/jcechace&quot;&gt;https://github.com/jcechace&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Brandon Gaisford &lt;a href=&quot;https://github.com/bgaisford&quot;&gt;https://github.com/bgaisford&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;eprogramming&lt;/li&gt;
  &lt;li&gt;Alexandre Kieling &lt;a href=&quot;https://github.com/alexkieling&quot;&gt;https://github.com/alexkieling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Kevin Horvatin &lt;a href=&quot;https://github.com/KevinHorvatin&quot;&gt;https://github.com/KevinHorvatin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ton Swieb &lt;a href=&quot;https://github.com/tonswieb&quot;&gt;https://github.com/tonswieb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Charles Moulliard &lt;a href=&quot;https://github.com/cmoulliard&quot;&gt;https://github.com/cmoulliard&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Boris Korogvich &lt;a href=&quot;https://github.com/VEINHORN&quot;&gt;https://github.com/VEINHORN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Pete Cornish &lt;a href=&quot;https://github.com/outofcoffee&quot;&gt;https://github.com/outofcoffee&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Andrea Rizzini&lt;/li&gt;
  &lt;li&gt;Wojciech Trocki &lt;a href=&quot;https://github.com/wtrocki/&quot;&gt;https://github.com/wtrocki/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Santiago&lt;/li&gt;
  &lt;li&gt;Nick Cross &lt;a href=&quot;https://github.com/ncross&quot;&gt;https://github.com/ncross&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Bram Vonk &lt;a href=&quot;https://github.com/bramvonk&quot;&gt;https://github.com/bramvonk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ayman Abdelghany&lt;/li&gt;
  &lt;li&gt;Paul Semprini &lt;a href=&quot;https://github.com/Semprini&quot;&gt;https://github.com/Semprini&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Bennet Schulz &lt;a href=&quot;https://github.com/bennetelli&quot;&gt;https://github.com/bennetelli&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;/post&lt;/p&gt;
</description><category term="apiman" /><category term="3scale" /><pubDate>Fri, 19 Aug 2016 11:00:00 +0000</pubDate>
				<link>https://apiman.io/blog/apiman/3scale/2016/08/19/3scale-apiman-part2.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/apiman/3scale/2016/08/19/3scale-apiman-part2.html</guid>
			</item><item>
				<title>Red Hat, 3scale, and apiman?</title><dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author><description>&lt;p&gt;As some of you have undoubtedly already heard, Red Hat
&lt;a href=&quot;https://www.redhat.com/en/about/press-releases/red-hat-acquire-api-management-leader-3scale&quot;&gt;recently announced&lt;/a&gt;
the acquisition of &lt;a href=&quot;https://www.3scale.net/&quot;&gt;3scale&lt;/a&gt;, a commercial vendor of API Management software.&lt;/p&gt;

&lt;p&gt;Because the apiman project is sponsored primarily by &lt;a href=&quot;https://www.redhat.com/&quot;&gt;Red Hat&lt;/a&gt;, you
may be wondering how this impacts the project and its open source community.  In today‚Äôs blog post,
I‚Äôll do my best to answer that question as honestly and transparently as I can.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;summary-tldr&quot;&gt;Summary (TL;DR)&lt;/h2&gt;
&lt;p&gt;On June 22, 2016 Red Hat announced that it was acquiring 3scale, a SaaS vendor of API Management technology
and, obviously, a competitor of the apiman project.  3scale is a mature company with a very robust API Management
solution.  Over the next few weeks/months, Red Hat will be working to merge the 3scale and apiman technologies
to provide as excellent an API Management solution to its customers as possible.  It has not yet been decided
exactly how this will happen, so for now the apiman project will continue to progress as normal, although perhaps 
with a short term focus on bug fixes and smaller incremental improvements rather than larger feature work.&lt;/p&gt;

&lt;p&gt;Read on for more detailed information!&lt;/p&gt;

&lt;h2 id=&quot;is-the-apiman-project-over&quot;&gt;Is the apiman project over?&lt;/h2&gt;
&lt;p&gt;Short answer:  &lt;em&gt;We‚Äôre not dead yet!&lt;/em&gt;  We‚Äôre not even &lt;a href=&quot;https://www.urbandictionary.com/define.php?term=pining%20for%20the%20fjords&quot;&gt;pining for the fjords&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;That said, I‚Äôm sorry to say that I don‚Äôt know exactly what the future will bring.  Red Hat will be working
hard over the next days/weeks/months to accomplish the following goals:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Welcome the 3scale team to Red Hat, educating (indoctrinating?) them into our Open Source culture&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Fully&lt;/em&gt; Open Source the 3scale codebase&lt;/li&gt;
  &lt;li&gt;Sensibly merge the apiman project‚Äôs efforts with the technology built by 3scale&lt;/li&gt;
  &lt;li&gt;Deliver a merged offering both in the upstream community (perhaps even here) and as a Red Hat supported product&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We‚Äôre certainly committed to this wonderful community of API Management enthusiasts (and also those of you who
grudgingly accept its benefits), so you‚Äôre &lt;em&gt;most certainly&lt;/em&gt; not going to see us disappearing anytime soon!&lt;/p&gt;

&lt;h2 id=&quot;will-the-3scale-technology-become-open-source&quot;&gt;Will the 3scale technology become open source?&lt;/h2&gt;
&lt;p&gt;Absolutely.  This is the Red Hat Way - all product offerings are developed in the upstream open source 
community before they become supported products.  API Management will of course be no different.  The timing
of this effort is still unclear, and it will depend on a number of factors.  It is, however, inevitable.  (insert
maniacal laughter here)&lt;/p&gt;

&lt;h2 id=&quot;but-3scale-isnt-on-premise&quot;&gt;But 3scale isn‚Äôt on-premise!&lt;/h2&gt;
&lt;p&gt;Yes that‚Äôs true - the 3scale technology has a few components that are exclusively available in the cloud, 
due to the SaaS nature of their offering.  It may even be a strong reason why you are working with or evaluating
apiman, because our technology is entirely on-premise.  I can understand this to be a valid concern.  What I
can say is that part of the merge of apiman with 3scale &lt;em&gt;will&lt;/em&gt; result in an on-premise version of the 
technology.  Red Hat is aware that this is an absolute requirement for many of its customers, and it will
definitely happen as soon as possible.&lt;/p&gt;

&lt;h2 id=&quot;were-planning-on-going-to-production-with-apiman-what-should-we-do&quot;&gt;We‚Äôre planning on going to production with apiman, what should we do?&lt;/h2&gt;
&lt;p&gt;Well obviously I cannot tell you what to do!  This is, unfortunately, an issue that I do not currently know
how to resolve.  As mentioned above, the project is not going away, but its future has certainly changed and
will be reshaped over the course of the next few weeks.  Because those decisions have not yet been made,
and will not be made for a little bit of time yet, I cannot offer any specific advice.&lt;/p&gt;

&lt;h2 id=&quot;we-have-custom-apiman-plugins-will-they-work-in-the-future&quot;&gt;We have custom apiman plugins, will they work in the future?&lt;/h2&gt;
&lt;p&gt;This is another great question, and I could probably just refer you to the answer right above this one.
One of the primary tasks ahead of us (apiman and 3scale engineering teams) is to work together to sensibly
merge the two technologies into a single Open Source API Management project.  Until we have had a chance to
analyze the two, we won‚Äôt know which pieces will remain and which will not.  Certainly it is the case that
apiman‚Äôs extensibility is one of our strongest features, and we will need to make sure that the merged 
technology remains equivalently flexible.  But at this point, we won‚Äôt know what form that will take, and 
so I cannot say for certain whether any/all existing apiman plugins will make sense in the future.&lt;/p&gt;

&lt;h2 id=&quot;thank-you-to-our-users&quot;&gt;Thank you to our users!&lt;/h2&gt;
&lt;p&gt;Thanks for reading!  We have a great community here in apiman, which something I am very thankful for.  I
hope that the influx of technology, expertise, and manpower that comes along with Red Hat‚Äôs acquisition
of 3scale will only strengthen our Open Ssource API Management community.  Please stick with us and know
that your feedback (positive or negative) is important!  Always tell us what you think, don‚Äôt pull any
punches, and keep being awesome!&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description><category term="apiman" /><category term="3scale" /><pubDate>Thu, 23 Jun 2016 01:30:00 +0000</pubDate>
				<link>https://apiman.io/blog/apiman/3scale/2016/06/23/redhat-3scale-apiman.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/apiman/3scale/2016/06/23/redhat-3scale-apiman.html</guid>
			</item><item>
				<title>Version 1.2.4.Final of apiman is released!</title><dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author><description>&lt;p&gt;Greetings, earthlings!  On Friday of last week we released the &lt;em&gt;absolute best&lt;/em&gt; version 
of apiman ever!  This release has a fair number of bugs fixed, as well as a few new
things.  Read on for the details!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;where-can-i-find-more-information&quot;&gt;Where can I find more information?&lt;/h2&gt;
&lt;p&gt;The release notes for this release can be found here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://red.ht/23NVU1k&quot;&gt;Release notes for 1.2.4.Final&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And of course, all of the standard sources of information have been updated:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apiman.io/&quot;&gt;The apiman project site&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apiman.io/latest/user-guide.html&quot;&gt;Latest User Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;just-give-me-the-highlights&quot;&gt;Just give me the highlights!&lt;/h2&gt;
&lt;p&gt;Mouse clicky finger too tired?  No worries, read on for some of the highlights
(not the children‚Äôs magazine, but still pretty cool):&lt;/p&gt;

&lt;h3 id=&quot;deletes-finally&quot;&gt;Deletes‚Ä¶ Finally!&lt;/h3&gt;
&lt;p&gt;A really annoying thing about apiman, ever since version 1.0, has been the
inability to delete anything.  Well now you can!  The following can now be
deleted:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Organizations&lt;/li&gt;
  &lt;li&gt;Plans&lt;/li&gt;
  &lt;li&gt;Client Apps&lt;/li&gt;
  &lt;li&gt;APIs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that there are some conditions that must be met, different for each type
of thing, before a delete will be successful.  For example, you can only 
delete an API if it has no (0) published versions.&lt;/p&gt;

&lt;h3 id=&quot;decent-logging-in-the-gateway&quot;&gt;Decent Logging in the Gateway&lt;/h3&gt;
&lt;p&gt;We‚Äôre not done with this yet, but we finally have decent logging support in the
Gateway.  In fact, if you‚Äôre creating a custom policy, you should access the 
logger by getting it from the policy conext.  Something like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;IApimanLogger logger = context.getLogger(getClass());
logger.info(&quot;An INFO message here!&quot;);
logger.debug(&quot;A DEBUG message here!&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the best way to do logging in apiman.  You probably want to stay away
from standard output or a custom logger implementation within your policy.&lt;/p&gt;

&lt;h3 id=&quot;circuit-breaker-policy&quot;&gt;Circuit Breaker Policy&lt;/h3&gt;
&lt;p&gt;Apiman now comes with a new Circuit Breaker policy (available as a plugin).
If you‚Äôre not familiar with the circuit breaker pattern, I recommend you go
here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://martinfowler.com/bliki/CircuitBreaker.html&quot;&gt;Martin Fowler: Circuit Breaker Pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;plugin-classloader-improvements&quot;&gt;Plugin ClassLoader Improvements&lt;/h3&gt;
&lt;p&gt;A number of community members have been building their own custom plugins, and
they‚Äôve run into some issues with how classes and resources are loaded.  In
this latest version of apiman we have made a few changes (and fixed a few bugs)
that should make writing a custom policy much easier.  In particular, the 
plugin classloader was not properly loading resources from library dependencies.
This meant that, for example, any third party library you used that tried to
load a service via a Java &lt;em&gt;ServiceLoader&lt;/em&gt; would fail (because the service 
loader‚Äôs configuration file would not be found).&lt;/p&gt;

&lt;p&gt;Additionally, we‚Äôre now setting the plugin‚Äôs classloader as the current thread‚Äôs
context classloader.  This means that, again, any of those calls to ServiceLoader
will be searching for resources in the correct classloader.&lt;/p&gt;

&lt;h2 id=&quot;ok-thanks-im-out&quot;&gt;OK thanks, I‚Äôm out!&lt;/h2&gt;
&lt;p&gt;Thanks for reading - see you later.&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description><category term="apiman" /><category term="release" /><pubDate>Mon, 25 Apr 2016 01:45:00 +0000</pubDate>
				<link>https://apiman.io/blog/apiman/release/2016/04/25/release-1.2.4.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/apiman/release/2016/04/25/release-1.2.4.html</guid>
			</item><item>
				<title>Covering Your Assets: Data Encryption in API Management</title><dc:creator>Rachel Yord√°n</dc:creator>
				        <author>ryordan@redhat.com</author><description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a world where APIs are quickly becoming the standard, most of us understand the importance of following best practices for API security. We authenticate, authorize and throttle requests. We encrypt the data that we share with other applications (hopefully!). But we often neglect one of the most essential components of the API layer: data storage.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot; class=&quot;title&quot;&gt;&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#encrypting-data-as-a-component-of-api-management-security&quot;&gt;Encrypting Data as a Component of API Management Security&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#data-storage-in-apiman&quot;&gt;Data Storage in apiman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#idataencrypter-interface-and-data-encryption-classes&quot;&gt;IDataEncrypter Interface and Data Encryption Classes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#setting-the-gateway-to-use-a-custom-encrypted-secret-key&quot;&gt;Setting the Gateway to use a Custom Encrypted Secret Key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#writing-your-own-encryption-plugin&quot;&gt;Writing Your Own Encryption Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#key-takeaways&quot;&gt;Key Takeaways&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;encrypting-data-as-a-component-of-api-management-security&quot;&gt;Encrypting Data as a Component of API Management Security&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We often forget that APIs are not meant to protect data, rather, to share data across applications. While providers are certainly responsible for designing their APIs to be secure, we must be equally cautious about &lt;em&gt;each&lt;/em&gt; component of the API layer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;data-storage-in-apiman&quot;&gt;Data Storage in apiman&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Designing, building, and maintaining an API can be a lot of work, often making security an afterthought. Using an API management platform can save you valuable time, allowing you to focus on other critical aspects of your business.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Apiman was designed with the goal of providing a secure, customizable platform for API providers that is easy to use. As an open source platform, it is highly extendable and maintained by a community of developers with the common goal of streamlining API management without compromising security.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;All sensitive data stored by apiman is fully encrypted&lt;/strong&gt; so that it is not stored in plain text, then later decrypted again on runtime or when publishing services. By default, the API Manager uses a relational database for storage. One of the many examples of data that gets stored are the credentials that must be provided when the manager wants to publish an API and makes an authenticated REST call to the gateway.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Data for the API gateway and API manager are stored separately to keep components fully decoupled. For a more detailed overview, please see our &lt;a href=&quot;https://www.apiman.io/latest/production-guide.html#_architecture_summary&quot;&gt;API layer architecture&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s swan dive into some code!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;idataencrypter-interface-and-data-encryption-classes&quot;&gt;IDataEncrypter Interface and Data Encryption Classes&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The component interface used by apiman to encrypt data (both in the API Manager and in the API Gateway) is called &lt;code&gt;IDataEncrypter&lt;/code&gt;. This interface provides the structure for the classes that encrypt keys and data, which is done synchronously using AES.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, the &lt;code&gt;DefaultDataEncrypter&lt;/code&gt; class is the encrypter for the gateway. The encrypt and decrypt methods accept a single parameter for the string to be encrypted or decrypted, respectively. If you look at the code, you&amp;#8217;ll notice that the key is hard coded. For those of us that are looking for a more secure approach, we offer an alternative.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;AesDataEncrypter&lt;/code&gt; class is a data encrypter that accepts an encrypted secret key. When it is invoked, it expects a configuration object that contains a previously defined encrypted secret key.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point you may be wondering how secret keys are obtained. A factory class called &lt;code&gt;ConfigFactory&lt;/code&gt; is responsible for creating a configuration Map using information from &lt;code&gt;apiman.properties&lt;/code&gt;. This configuration Map is later passed to &lt;code&gt;AesDataEncrypter&lt;/code&gt; as a parameter when it is constructed. The secret key included in the configuration Map is then used whenever data is encrypted or decrypted.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;setting-the-gateway-to-use-a-custom-encrypted-secret-key&quot;&gt;Setting the Gateway to use a Custom Encrypted Secret Key&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;We highly recommend that users change the default gateway encryption class&lt;/strong&gt; to the more secure &lt;code&gt;AesDataEncrypter&lt;/code&gt; class. To do so, please follow these steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;1. Locate and open the &lt;code&gt;apiman.properties&lt;/code&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;2. Uncomment the following lines, located toward the top of the file (around line 10), by removing the hashtag at the beginning of each line:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;properties&quot;&gt;apiman.encrypter.type=io.apiman.common.util.crypt.AesDataEncrypter
apiman.encrypter.type.secretKey=&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;3. Add your encrypted secret key (&lt;em&gt;the key must be a 16 character string&lt;/em&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;4. Save and close the file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;5. $$$ Profit!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;writing-your-own-encryption-plugin&quot;&gt;Writing Your Own Encryption Plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the major benefits of working with an open source API management platform, and open source projects in general, is the ability to read and modify the source code to make it work for your business needs. In apiman, we make it easy for you to write your own implementation of the data encrypter by &lt;a href=&quot;https://www.apiman.io/latest/developer-guide.html#_creating_a_plugin&quot;&gt;creating a plugin that encrypts data&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once your basic plugin is set up, you can then begin working on the Java component of your plugin that contains the functionality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Every encryption plugin must implement the &lt;code&gt;IDataEncrypter&lt;/code&gt; interface like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;SuperDataEncrypter&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;implements&lt;/span&gt; IDataEncrypter {
  &lt;span class=&quot;comment&quot;&gt;/**
  * Constructor.
  */&lt;/span&gt;
  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; SuperDataEncrypter(&lt;span class=&quot;predefined-type&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; config) {
    thing = config.get(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//$NON-NLS-1$&lt;/span&gt;

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (thing == &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;) {
      &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Missing configuration property: apiman-manager.config.thing&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//$NON-NLS-1$&lt;/span&gt;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, the class is constructed with the configuration Map we discussed above. Once the &lt;code&gt;SuperDataEncrypter&lt;/code&gt; class is built, the configuration Map is checked for a &quot;thing&quot; key. If it is null, a runtime exception is thrown. Pretty, straightforward so far, right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whenever data is stored in a persistent store (either by the API Manager or by the API Gateway), the data encrypter is used to encrypt that data. You can pretty much guess what our next step will be:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;SuperDataEncrypter&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;implements&lt;/span&gt; IDataEncrypter {
  &lt;span class=&quot;comment&quot;&gt;/**
  * Constructor.
  */&lt;/span&gt;
  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; SuperDataEncrypter(&lt;span class=&quot;predefined-type&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; config) {
    thing = config.get(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//$NON-NLS-1$&lt;/span&gt;

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (thing == &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;) {
      &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Missing configuration property: apiman-manager.config.thing&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//$NON-NLS-1$&lt;/span&gt;
    }
  }


  &lt;span class=&quot;comment&quot;&gt;/* (non-Javadoc)
   * @see io.apiman.common.util.crypt.IDataEncrypter#encrypt(java.lang.String)
   */&lt;/span&gt;
  &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; encrypt(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; plainText) {
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; AesEncrypter.encrypt(secretKey, plainText);
  }

  &lt;span class=&quot;comment&quot;&gt;/* (non-Javadoc)
   * @see io.apiman.common.util.crypt.IDataEncrypter#decrypt(java.lang.String)
   */&lt;/span&gt;
  &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; decrypt(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; encryptedText) {
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; AesEncrypter.decrypt(secretKey, encryptedText);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From there, you can use your &lt;code&gt;SuperDataEncrypter&lt;/code&gt; class to write the functionality you need. For an example of an implementation you can take a look at the &lt;code&gt;AesDataEncrypter&lt;/code&gt; class we discussed earlier. You should be up and running in no time!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you are kind enough to want to share your plugin with the rest of the apiman community, create a pull request on the &lt;a href=&quot;https://github.com/apiman/apiman-plugins&quot;&gt;apiman plugins repository&lt;/a&gt;. Contributors, please don&amp;#8217;t forget to write a unit test for any plugin you write (one that actually passes, kthx!).
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;key-takeaways&quot;&gt;Key Takeaways&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If your memory is as short-lived as mine, it‚Äôs probably best that we do a quick recap. In this article we discussed the importance of securing stored data, and why it should be treated as an essential component of your API security strategy. We then discussed how apiman encrypts and decrypts sensitive data, with a detailed review of the IDataEncrypter interface and the classes that implement it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For those of us with a guilty security conscience, we went over how to configure the API gateway to use an encrypted key that you provided in the &lt;code&gt;apiman.properties&lt;/code&gt; file. Because we‚Äôre √ºber ambitious, we also took a look at how to write your very own implementation of said &lt;code&gt;IDataEncrypter&lt;/code&gt; interface and the methods you are required to implement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As always, we &lt;em&gt;love&lt;/em&gt; hearing from you! So, if you have any questions or comments, feel free to leave them below or &lt;a href=&quot;https://www.apiman.io/latest/chat.html&quot;&gt;reach out to us&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category term="security" /><category term="gateway" /><pubDate>Wed, 13 Apr 2016 13:34:00 -0400</pubDate>
				<link>https://apiman.io/blog/security/gateway/2016/04/13/data-encryption.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/security/gateway/2016/04/13/data-encryption.html</guid>
			</item><item>
				<title>Using apiman in a network with limited Internet access</title><dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author><description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In plenty of enterprises, networks are either locked down or have very limited access to the Internet; often for security, privacy or other practical reasons.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve carefully designed apiman to be fully featured and easily configured when no Internet access is available; providing a great deal of flexibility and eschewing any &quot;off-site only&quot; functionality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, if you&amp;#8217;re looking for API management in a locked-down network or Internet-free environment, read on!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot; class=&quot;title&quot;&gt;&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#apiman-plugins&quot;&gt;Apiman Plugins&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#distribution-and-management&quot;&gt;Distribution and Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#registry-plugin-catalogue&quot;&gt;Registry (Plugin Catalogue)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#api-catalogue&quot;&gt;API Catalogue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#metrics&quot;&gt;Metrics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;apiman-plugins&quot;&gt;Apiman Plugins&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Apiman&amp;#8217;s extensibility is one of its key strengths, and it&amp;#8217;s extremely easy to write &lt;a href=&quot;https://www.apiman.io/latest/developer-guide.html#_plugins&quot;&gt;plugins&lt;/a&gt; that can do almost anything. There are two default behaviours we are likely to want to configure when operating within a restricted network.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;distribution-and-management&quot;&gt;Distribution and Management&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Apiman plugins are, by default loaded via &lt;a href=&quot;https://central.sonatype.org/&quot;&gt;The Central Repository&lt;/a&gt; (often known as Maven Central), which is a fantastically convenient in most situations. All of apiman&amp;#8217;s components (manager, gateways, etc), will pull down the necessary plugins as and when they need them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, without Internet access this clearly won&amp;#8217;t work as intended. We have three good options which you can configure in &lt;code&gt;apiman.properties&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;properties&quot;&gt;apiman.plugins.repositories=https://repo1.example.local/our-internal-repo/,http://repository.example.org/nexus/content/groups/public/ &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

apiman.plugins.repositories=file:///mnt/nfs/my/shared/maven/repo &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

apiman.plugins.repositories=&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use an internal &lt;a href=&quot;https://maven.apache.org/repository-management.html#Available_Repository_Managers&quot;&gt;repository or mirror&lt;/a&gt; to deploy your own (and community) plugins to. This is likely the best option for many enterprises who may already have such infrastructure. Join multiple repositories with commas.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Mount a repository to a shared volume or filesystem on every machine running apiman.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Copy a valid Maven formatted repository containing your plugins to &lt;code&gt;~/.m2&lt;/code&gt;, where apiman will look by default.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;strong&gt;Advanced:&lt;/strong&gt; You can replace the &lt;a href=&quot;https://github.com/apiman/apiman/blob/master/gateway/engine/core/src/main/java/io/apiman/gateway/engine/impl/DefaultPluginRegistry.java&quot;&gt;default registry&lt;/a&gt; entirely with an implementation of your own and set it via &lt;code&gt;apiman-gateway.plugin-registry&lt;/code&gt; in &lt;code&gt;apiman.properties&lt;/code&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;registry-plugin-catalogue&quot;&gt;Registry (Plugin Catalogue)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our community releases contain a plugin registry which downloads a curated list of plugins. This lets the API Manager have a nice pre-populated list of plugins to install, rather than having to type the coordinates manually. To preserve this functionality simply download the registry file and make it available internally:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;properties&quot;&gt;apiman-manager.plugins.registries=https://rawgit.com/apiman/apiman-plugin-registry/master/registry.json &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

apiman-manager.plugins.registries=file:///path/to/my/registry.json &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The default JSON plugin registry&amp;#8217;s data URL.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;As &amp;lt;1&amp;gt;, but replaced with a local copy. Naturally, you may want to add your own plugins here in place of the curated ones. A custom registry may not even use JSON - it&amp;#8217;s entirely up to you.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
When running in WildFly/EAP you can use appropriate platform system properties to make the config more portable: &lt;code&gt;apiman-manager.plugins.registries=file:///${jboss.server.config.dir}/apiman-plugin-registry.json&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;api-catalogue&quot;&gt;API Catalogue&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The demonstration &lt;a href=&quot;https://www.apiman.io/blog/apiman/1.2.x/manager/catalog/2016/03/23/api-catalog.html&quot;&gt;API Catalogue&lt;/a&gt; (or catalog, if you&amp;#8217;re into American English) is also downloaded from the Internet, so you may want to make it available offline and customise it, too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Albeit not the topic of this blog, it&amp;#8217;s worth briefly mentioning most advanced users will likely want to implement code &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt; to &lt;a href=&quot;https://github.com/apiman/apiman/blob/master/manager/api/core/src/main/java/io/apiman/manager/api/core/IApiCatalog.java&quot;&gt;search a real registry or catalogue&lt;/a&gt; for APIs to import, such as &lt;a href=&quot;https://github.com/fabric8io/fabric8-ipaas/blob/master/apiman/src/main/java/io/fabric8/apiman/KubernetesServiceCatalog.java&quot;&gt;Kubernetes' service registry&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;properties&quot;&gt;apiman-manager.api-catalog.catalog-url=https://rawgit.com/apiman/apiman-api-catalog/master/catalog.json &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

apiman-manager.api-catalog.type=io.apiman.manager.api.core.catalog.JsonApiCatalog &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Default API catalogue. You can replace it with &lt;code&gt;&lt;a href=&quot;file:///path/to/my/catalog.json&quot; class=&quot;bare&quot;&gt;file:///path/to/my/catalog.json&lt;/a&gt;&lt;/code&gt; after downloading it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;If you write your own catalogue, then provide your own catalogue&amp;#8217;s implementation of the &lt;code&gt;IApiCatalog&lt;/code&gt; interface here.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;metrics&quot;&gt;Metrics&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some API managers have off-site only metrics implementations. Rest assured, there&amp;#8217;s &lt;a href=&quot;https://www.apiman.io/blog/api-manager/api/ui/metrics/2015/07/06/metrics-redux.html&quot;&gt;none of that nonsense here&lt;/a&gt;! Just ensure that your metrics store (such as ElasticSearch) is available for apiman to connect to and it&amp;#8217;ll work fine.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A handful of trivial tweaks are potentially necessary to make all of apiman&amp;#8217;s features work in a locked-down environment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. Or find existing implementations
&lt;/div&gt;
&lt;/div&gt;</description><category term="configuration" /><category term="production" /><category term="offline" /><pubDate>Tue, 05 Apr 2016 15:00:00 -0400</pubDate>
				<link>https://apiman.io/blog/configuration/production/offline/2016/04/05/locked-down-network.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/configuration/production/offline/2016/04/05/locked-down-network.html</guid>
			</item><item>
				<title>Apiman 1.2 - Introduction to User Roles in apiman</title><dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author><description>&lt;p&gt;In this post, we‚Äôll examine apiman user roles. In the apiman data model, all data elements exist in the context of the organization. The same holds true for user memberships as users can be members of multiple organizations. Permissions in apiman are role based. The actions that a user is able to perform are dependent on the roles to which the user is assigned when a user is added as a member of an organization.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Let‚Äôs start by looking at the roles that are preconfigured in apiman.&lt;/p&gt;

&lt;h3 id=&quot;understanding-ootb-apiman-user-roles&quot;&gt;Understanding OOTB apiman user roles&lt;/h3&gt;

&lt;p&gt;In apiman, each role defines a set of permissions granted by that role. When a user is made a member of an organization, that user must be assigned to a role. A role definition consists of a name and description, and, most importantly, a set of permissions that govern the user‚Äôs ability to view, edit, and administer the organization itself, as well as the organization‚Äôs plans, APIs, and applications.&lt;/p&gt;

&lt;p&gt;Roles are managed in the Roles section of the apiman System Administration form in the Management UI.&lt;/p&gt;

&lt;p&gt;Apiman is preconfigured with the following roles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Organization Owner&lt;/li&gt;
  &lt;li&gt;API Developer&lt;/li&gt;
  &lt;li&gt;Client App Developer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These role names are self-explanatory. For example, a user assigned the Application Developer role is able to manage the organization‚Äôs applications but is blocked from managing its APIs or plans.&lt;/p&gt;

&lt;p&gt;The full set of permissions provided in apiman by these preconfigured roles are:&lt;/p&gt;

&lt;p&gt;Preconfigured apiman Role: Client App Developer&lt;br /&gt;
Who Should be Assigned this Role: Users responsible for creating and managing client apps
Permissions Granted to this Role:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Client App View&lt;/li&gt;
  &lt;li&gt;Client App Edit&lt;/li&gt;
  &lt;li&gt;Client App Admin&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Preconfigured apiman Role&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Who Should be Assigned this Role&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Permissions Granted to this Role&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Client App Developer&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Users responsible for creating and managing client apps&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Client App View, Client App Edit, Client App Admin&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Organization Owner&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Automatically granted to the user who creates an Organization&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;All permissions = Client App View, Client App Edit, Client App Admin, Plan View, Plan Edit, Plan Admin, API View, API Edit, API Admin, Organization View, Organization Edit, Organization Admin&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;API Developer&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Users responsible for creating and managing APIs&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Plan View, Plan Edit, Plan Admin, API View, API Edit, API Admin&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Organization owners can assign roles to users through the ‚ÄúManage Members‚Äù form in the apiman Management UI. Each user must be assigned at least one role, but users can also be assigned multiple roles.&lt;/p&gt;

&lt;p&gt;We‚Äôll walk through an example of assigning a role to a user in a moment.&lt;/p&gt;

&lt;p&gt;While apiman admin users can also modify the permissions as defined for these preconfigured roles, it can be easier to create new custom roles. We will also walk through an example of creating a new user role later in this post.&lt;/p&gt;

&lt;h3 id=&quot;assigningrevoking-roles-for-organization-users&quot;&gt;Assigning/Revoking Roles for Organization Users&lt;/h3&gt;

&lt;p&gt;It‚Äôs worth repeating that all data elements in apiman exist in the context of an organization.  As a result, it is important to understand that users can only manage these elements if they have the appropriate role for the organization in which the elements exist.  Therefore, a user must be granted membership in an organization.&lt;/p&gt;

&lt;p&gt;It‚Äôs not possible for users to assign themselves roles. Roles must be assigned to a user by an organization owner. Assigning a role to a user is a straightforward task for an organization owner.&lt;/p&gt;

&lt;p&gt;First, the organization must search for the user:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-03-28/roles_1.png&quot; alt=&quot;Image: Search for User&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And then, the organization owner can assign a role to the user from the existing set of roles:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-03-28/roles_2.png&quot; alt=&quot;Image: Assign Role&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Revoking a role for a user is just as easy. The organization owner simply has to search for the user, and then deselect a role for the user.&lt;/p&gt;

&lt;p&gt;The same approach for assigning/revoking a role for a user is followed for the standard roles that are preconfigured in apiman, and for custom roles that you create.&lt;/p&gt;

&lt;h3 id=&quot;creating-a-new-user-roledefining-the-role-permissions&quot;&gt;Creating a New User Role/Defining the Role Permissions&lt;/h3&gt;

&lt;p&gt;In addition to providing a set of preconfigured roles, apiman also provides a means for apiman admin users to create new roles where you can define a custom set of permissions for each role. Custom roles give you the ability to exercise fine-grained control over the set of permissions granted to users.&lt;/p&gt;

&lt;p&gt;Let‚Äôs look at an example of a custom role.&lt;/p&gt;

&lt;p&gt;Imagine a situation where you have API developer users and application developer users. These sets of users can rely on apiman‚Äôs preconfigured roles. Let‚Äôs also imagine that you have a third set of user. You want these users to have read access to APIs and applications so that they can participate in a review/approval process. However, you do not want to give these users write access. For example, suppose you have to find a job for a certain relative of yours. He may be a thoroughly competent person, but you‚Äôd feel better if he didn‚Äôt have write access to anything valuable. A read-only role for your brother in law would look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-03-28/roles_3.png&quot; alt=&quot;Image: Define New Role&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the ‚Äúbrother-in-law‚Äù role is created, you can assign it to other users in the same manner as any other role:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-03-28/roles_4.png&quot; alt=&quot;Image: View the Roles&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h3&gt;

&lt;p&gt;A consistent pattern in apiman is a rich set of features provided OOTB, and a method for you to expand on these features by creating customizations. User roles enable you to assign users permissions based on the tasks that they perform. Apiman is preconfigured with a rich set of roles OOTB, and also enables you to create new, custom roles to handle additional types of users (even your brother-in-law).&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description><category term="apiman" /><category term="introduction" /><category term="overview" /><category term="users" /><category term="roles" /><pubDate>Mon, 28 Mar 2016 07:00:00 +0000</pubDate>
				<link>https://apiman.io/blog/apiman/introduction/overview/users/roles/2016/03/28/users_roles.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/apiman/introduction/overview/users/roles/2016/03/28/users_roles.html</guid>
			</item><item>
				<title>Version 1.2.3.Final of apiman is released!</title><dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author><description>&lt;p&gt;Greetings, earthlings!  Yesterday we released the &lt;em&gt;best&lt;/em&gt; version of apiman yet,
and I‚Äôm not just saying that because the version number (1.2.3.Final) is awesome.
This release has a bunch of bug fixes in it, as well as a few targeted new 
features.  Read on for more details!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;where-can-i-find-more-information&quot;&gt;Where can I find more information?&lt;/h2&gt;
&lt;p&gt;The release notes for this release can be found here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://red.ht/21HvJDe&quot;&gt;Release notes for 1.2.3.Final&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And of course, all of the standard sources of information have been updated:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apiman.io/&quot;&gt;The apiman project site&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apiman.io/latest/user-guide.html&quot;&gt;Latest User Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;just-give-me-the-highlights&quot;&gt;Just give me the highlights!&lt;/h2&gt;
&lt;p&gt;Too busy to click the links above?  I get it.  I‚Äôll give you the top changes in this
release.&lt;/p&gt;

&lt;h3 id=&quot;api-key-moved-from-contract-to-client-app&quot;&gt;API Key moved from Contract to Client App&lt;/h3&gt;
&lt;p&gt;The big change from 1.2.2.Final is that we have moved the API Key from the Contract
(which is the link between a Client App and an API it consumes) to the Client App.&lt;br /&gt;
This change was suggested by a number of community members, and it does make a lot
of sense.  The primary down-side to this change is that you are now limited to one
Contract per Client App per API. Previously if an API was offered through, for example,
a Gold and a Silver plan, you could actually create a Contract to &lt;em&gt;both&lt;/em&gt; of them.
This is no longer possible.&lt;/p&gt;

&lt;p&gt;It is worth noting that this change makes many things easier to do, now and going 
forward.  API Key management is simpler - you just have one key for each Client App
(version) you manage.  It also opens up the opportunity to allow other types of 
API Keys (such as client certificates or Keycloak client IDs) beyond the default 
Java UUID style keys.&lt;/p&gt;

&lt;h3 id=&quot;data-migration-when-upgrading-apiman&quot;&gt;Data migration when upgrading apiman&lt;/h3&gt;
&lt;p&gt;Moving the API Key from the Contract to the Client App changed the apiman internal
data model, which prompted us to implement a data migration feature integrated with
the already-existing data import/export feature.  This means that you can export
data from an older version of apiman, and then import that data into a newer version
of apiman - and apiman will automatically tranform the import data to the latest
data model.&lt;/p&gt;

&lt;h3 id=&quot;initial-metrics-support-for-hawkular-metrics&quot;&gt;Initial metrics support for Hawkular Metrics&lt;/h3&gt;
&lt;p&gt;As you all probably know, apiman supports different implementations of various core
internal components.  One of those components is the Metrics feature, where we 
record metrics information for every request made to the Gateway.  In the default
community edition of apiman we use Elasticsearch to record these metrics.  Version
1.2.3.Final of apiman now includes an initial (tech preview) implementation that
uses &lt;a href=&quot;https://www.hawkular.org/docs/components/metrics/index.html&quot;&gt;Hawkular Metrics&lt;/a&gt; 
instead of Elasticsearch!&lt;/p&gt;

&lt;h3 id=&quot;improvements-to-the-api-catalog-ui&quot;&gt;Improvements to the API Catalog UI&lt;/h3&gt;
&lt;p&gt;A very cool recent feature of apiman is the new 
&lt;a href=&quot;https://www.apiman.io/blog/apiman/1.2.x/manager/catalog/2016/03/23/api-catalog.html&quot;&gt;API Catalog browser UI&lt;/a&gt;.&lt;br /&gt;
The API Catalog feature allows you to quickly filter the list of available APIs from
the catalog by name.  Now in 1.2.3.Final, every entry in the catalog is also tagged
with zero or more tags, and filtering can now be done based on these tags.  The UI
is pretty slick!&lt;/p&gt;

&lt;h3 id=&quot;configurable-aes-data-encrypter-implementation&quot;&gt;Configurable AES data encrypter implementation&lt;/h3&gt;
&lt;p&gt;You may or may not be aware that apiman encrypts any data that might be sensitive prior
to storing it in the data store (manager) or registry (gateway).  There is a java
interface called &lt;a href=&quot;https://github.com/apiman/apiman/blob/apiman-1.2.3.Final/common/util/src/main/java/io/apiman/common/util/crypt/IDataEncrypter.java&quot;&gt;IDataEncrypter&lt;/a&gt; 
that controls this behavior, and you can provide your own implementation via an apiman
plugin if you choose.  Previously that was the only option available to you if you
wanted a more secure implementation (the default implementation uses a well-known/hard-coded
secret key when doing AES encryption on the data, making it not-very-secure).  Now we
offer that same AES encrypter but the secret key can be configured in the &lt;em&gt;apiman.properties&lt;/em&gt;
file.&lt;/p&gt;

&lt;h2 id=&quot;ok-thanks-im-out&quot;&gt;OK thanks, I‚Äôm out!&lt;/h2&gt;
&lt;p&gt;Thanks for reading - see you later.&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description><category term="apiman" /><category term="release" /><pubDate>Thu, 24 Mar 2016 10:00:00 +0000</pubDate>
				<link>https://apiman.io/blog/apiman/release/2016/03/24/release-1.2.3.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/apiman/release/2016/03/24/release-1.2.3.html</guid>
			</item><item>
				<title>Import APIs Into Apiman (API Catalog)</title><dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author><description>&lt;p&gt;One of the less enjoyable aspects of apiman is the manual addition of an API
that you wish to manage.  And if you have a bunch of APIs you want to manage,
you can either use the apiman REST interface to script the creation of them,
or else you‚Äôre stuck manually entering them into the UI.&lt;/p&gt;

&lt;p&gt;However, if you take advantage of the new API Catalog feature, things might
get a lot easier!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;why-import-an-api&quot;&gt;Why Import an API?&lt;/h2&gt;
&lt;p&gt;By using the new API Manager to import an API rather than manually creating it
(typically via the ‚ÄúNew API‚Äù button in the UI) you can more quickly and 
accurately add an API to apiman.  Importing an API from the API Catalog means
that it will be created in apiman pre-configured with the endpoint information
and some other relevant details.  This can obviously save you some time, and 
make the process of managing your APIs a bit more streamlined.&lt;/p&gt;

&lt;h2 id=&quot;browsing-the-api-catalog&quot;&gt;Browsing the API Catalog&lt;/h2&gt;
&lt;p&gt;The long-term goal for importing APIs is to be able to import from multiple 
different sources, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Swagger&lt;/li&gt;
  &lt;li&gt;WADL&lt;/li&gt;
  &lt;li&gt;RAML&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, we currently only support importing APIs from an apiman API Catalog.
I‚Äôll talk more about how to configure the API Catalog later in this post.
First, let‚Äôs focus on how to use the API Catalog.&lt;/p&gt;

&lt;p&gt;The most user-friendly way to use the API Catalog is to browse it!  This can
easily be done by clicking the ‚ÄúBrowse available/importable APIs‚Äù link on the
API Manager‚Äôs dashboard page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-03-23/dash-catalog.png&quot; alt=&quot;Image: Dashboard - Browse APIs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you click that link, you‚Äôll be taken to the (very nice!) API Catalog
Browser UI page.  Have a look, it‚Äôs actually pretty slick:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-03-23/api-catalog.png&quot; alt=&quot;Image: API Catalog Browser&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From this UI, you can filter the APIs available to be imported, find the
one you want, and easily Import it into one of your Organizations.  You can
easily filter by name, type, or tag - the hope is that you can quickly find
the API you want to import.  Once you are ready, simply click the &lt;em&gt;Import&lt;/em&gt;
button on the API card, which will result in the following dialog:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-03-23/import-api.png&quot; alt=&quot;Image: Import API&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After completing the information in the dialog, the API will be imported
and you will be redirected to the newly imported API.&lt;/p&gt;

&lt;h2 id=&quot;importing-multiple-apis&quot;&gt;Importing Multiple APIs&lt;/h2&gt;
&lt;p&gt;Another way to import APIs from the API Catalog is to use the Import API(s)
Wizard interface.  You can access the Import API(s) Wizard by clicking on the
&lt;em&gt;Import API(s)&lt;/em&gt; button from within a particular Organization:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-03-23/import-apis-btn.png&quot; alt=&quot;Image: Import APIs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This wizard will allow you to import multiple APIs into a single Organization.
Follow the wizard‚Äôs steps to find the APIs, choose them, configure some
settings, and then import them.  Here are some screenshots, since pictures
are more powerful than words (although the pictures do contain some words):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-03-23/import-api-wizard-1.png&quot; alt=&quot;Image: Import APIs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-03-23/import-api-wizard-2.png&quot; alt=&quot;Image: Import APIs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-03-23/import-api-wizard-3.png&quot; alt=&quot;Image: Import APIs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-03-23/import-api-wizard-4.png&quot; alt=&quot;Image: Import APIs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the Import APIs Wizard is a nice way to find and import
multiple APIs all at the same time, all into the same Organization.&lt;/p&gt;

&lt;h2 id=&quot;customizing-the-api-catalog&quot;&gt;Customizing the API Catalog&lt;/h2&gt;
&lt;p&gt;At this point you may be asking yourself how &lt;em&gt;your&lt;/em&gt; APIs might come to be
listed in the API Catalog, rather than Flickr and Facebook.  That‚Äôs a great
question, and we actually have two answers to it.  First, you can provide
a simple JSON file that contains all of the APIs in your enterprise (along
with optionally any other external APIs you might want to potentially 
import).  Second, you can actually provide a fully custom implementation of
the apiman &lt;em&gt;IApiCatalog&lt;/em&gt; java interface and contribute it via an apiman
plugin!&lt;/p&gt;

&lt;h3 id=&quot;providing-a-custom-api-catalog-file&quot;&gt;Providing a Custom API Catalog File&lt;/h3&gt;
&lt;p&gt;The easiest way to include your own APIs into the catalog is to provide 
your own custom API Catalog JSON file.  The default API Catalog implementation
simply reads the API information from a JSON file (with a custom format
specific to apiman).  An example of the format of this file can be found
here:&lt;/p&gt;

&lt;p&gt;https://raw.githubusercontent.com/apiman/apiman-api-catalog/master/catalog.json&lt;/p&gt;

&lt;p&gt;Once you create your own file, you will need to make it available to apiman
by configuring it in the &lt;em&gt;apiman.properties&lt;/em&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiman-manager.api-catalog.type=io.apiman.manager.api.core.catalog.JsonApiCatalog
apiman-manager.api-catalog.catalog-url=https://rawgit.com/apiman/apiman-api-catalog/master/catalog.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Simply update the &lt;em&gt;apiman-manager.api-catalog.catalog-url&lt;/em&gt; property to provide
a URL to your custom file.&lt;/p&gt;

&lt;h3 id=&quot;implementing-your-own-api-catalog-plugin&quot;&gt;Implementing Your Own API Catalog Plugin&lt;/h3&gt;
&lt;p&gt;Providing your own JSON file is fine, but it‚Äôs very static and doesn‚Äôt work
well if you are often introducing new APIs.  Instead, you may want to implement
your own API Catalog implementation and bundle it up into an apiman plugin.
This approach will let you return the list of APIs from dynanmic sources such
as API Registries (e.g. UDDI or perhaps something more platform-specific like
kubernetes).&lt;/p&gt;

&lt;p&gt;To do this, it‚Äôs probably best to read up on the existing apiman documentation
about how to create and contribute a plugin:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apiman.io/latest/developer-guide.html#_creating_a_plugin&quot;&gt;Developer Guide: Creating a Plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apiman.io/latest/developer-guide.html#_contributing_a_core_component&quot;&gt;Developer Guide: Contributing a Core Component&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The component you will want to customize is &lt;em&gt;IApiCatalog&lt;/em&gt;, which can be found here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apiman/apiman/blob/master/manager/api/core/src/main/java/io/apiman/manager/api/core/IApiCatalog.java&quot;&gt;IApiCatalog Java Interface&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create an implementation of that interface, bundle it up in your custom plugin,
and then configure apiman to use your implementation by modifying the right 
properties in the &lt;em&gt;apiman.properties&lt;/em&gt; file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiman-manager.api-catalog.type=plugin:GROUP_ID:ARTIFACT_ID:VERSION/org.example.apiman.plugins.catalog.MyCustomApiCatalog
apiman-manager.api-catalog.my-property=value-1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The API Catalog is a great way to make it easier for your API Providers to quickly
and accurately get APIs added to apiman, without using the apiman REST interface to
do it programmatically.  There is a tremendous opportunity to integrate the API
Catalog with your API registry, if you have one, or to simply provide a JSON file 
with information about all your deployed APIs!&lt;/p&gt;

&lt;p&gt;This feature will be introduced as of version &lt;em&gt;1.2.3.Final&lt;/em&gt;, which should be released
tomorrow!&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description><category term="apiman" /><category term="1.2.x" /><category term="manager" /><category term="catalog" /><pubDate>Wed, 23 Mar 2016 10:30:00 +0000</pubDate>
				<link>https://apiman.io/blog/apiman/1.2.x/manager/catalog/2016/03/23/api-catalog.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/apiman/1.2.x/manager/catalog/2016/03/23/api-catalog.html</guid>
			</item><item>
				<title>Storing Your Gateway Config in a Database</title><dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author><description>&lt;p&gt;One of the strongest features of apiman, in general, is its excellent
extensibility.  Not only is it easy to add new policies, for example,
but many of its core components are also pluggable.  This includes, 
for example, the registry used by the API Gateway to store configuration
information published to it by the manager.  This blog post will detail
a new JDBC based implementation of that registry, explaining how you can
store that information in a Database instead of in Elasticsearch (the
default setting).&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;why-use-a-database-instead-of-elastic&quot;&gt;Why Use a Database Instead of Elastic?&lt;/h2&gt;
&lt;p&gt;You may or may not be wondering why this is important.  Some users may
not be comfortable storing persistent data in Elasticsearch.  Or perhaps
a user doesn‚Äôt want to create a production deployment of Elasticsearch 
at all and would prefer alternatives for each of the various Gateway
components that currently uses it.  For these reasons (or others), we
now (as of version 1.2.2.Final) have a JDBC implementation of the 
API Gateway registry!&lt;/p&gt;

&lt;p&gt;Read on to learn how to use it!&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-database&quot;&gt;Setting Up the Database&lt;/h2&gt;
&lt;p&gt;First it‚Äôs important to note that the Gateway registry JDBC implementation
does &lt;em&gt;not&lt;/em&gt; leverage JPA.  Instead we use JDBC directly (with a little 
help from Apache‚Äôs dbutils library) to store the data in the database
and query it again.  For this reason, you will absolutely need to create
your database and then configure it using one of the provided DDLs.&lt;/p&gt;

&lt;p&gt;You can find the DDLs included in the apiman distribution in the following
directory:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$WILDFLY_ROOT/apiman/ddls/apiman-gateway*.ddl&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We include DDLs for the following databases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MySQL&lt;/li&gt;
  &lt;li&gt;PostgreSQL&lt;/li&gt;
  &lt;li&gt;Oracle&lt;/li&gt;
  &lt;li&gt;H2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Simply create a new database using tools that are appropriate to the
type you are using (e.g. you can use the MySQL Workbench).  Then execute
the DDL appropriate to your database type, so that all the correct 
tables and indexes are created.&lt;/p&gt;

&lt;h2 id=&quot;configuring-apiman-to-use-it&quot;&gt;Configuring Apiman to Use It&lt;/h2&gt;
&lt;p&gt;Once the database is created, you will need to make some configuration
changes in apiman so that the Gateway will connect to the database and store
information there instead of Elasticsearch.  There are two files that need
to be created/modified to make this happen.&lt;/p&gt;

&lt;h3 id=&quot;creating-a-datasource&quot;&gt;Creating a Datasource&lt;/h3&gt;
&lt;p&gt;First, you will need to create a Datasource using whatever is appropriate
for the platform you are running apiman on.  This will differ, for example,
if you are running apiman on Tomcat rather than Wildfly or EAP.  Here are
some documentation resources that may be helpful when creating a Datasource
for your preferred runtime platform:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.jboss.org/author/display/WFLY10/DataSource+configuration&quot;&gt;Wildfly 10&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tomcat.apache.org/tomcat-8.0-doc/jndi-resources-howto.html#JDBC_Data_Sources&quot;&gt;Apache Tomcat 8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure you download and install the JDBC driver for your database, and
also make sure that you know the JNDI location of the datasource you wish
to use.&lt;/p&gt;

&lt;h3 id=&quot;tweaking-apimanproperties&quot;&gt;Tweaking apiman.properties&lt;/h3&gt;
&lt;p&gt;Finally, you have everything you need to now configure apiman to use the
database.  You simply need to change some properties in &lt;em&gt;apiman.properties&lt;/em&gt; 
and you‚Äôll be good to go!&lt;/p&gt;

&lt;p&gt;Specifically, you need to change the configuration of the Gateway Registry.
The default settings in 1.2.2.Final for the Gateway Registry look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;apiman-gateway.registry=io.apiman.gateway.engine.es.PollCachingESRegistry
apiman-gateway.registry.client.type=jest
apiman-gateway.registry.client.protocol=${apiman.es.protocol}
apiman-gateway.registry.client.host=${apiman.es.host}
apiman-gateway.registry.client.port=${apiman.es.port}
apiman-gateway.registry.client.initialize=true
apiman-gateway.registry.client.username=${apiman.es.username}
apiman-gateway.registry.client.password=${apiman.es.password}
apiman-gateway.registry.client.timeout=${apiman.es.timeout}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;All of these properties can be replaced with the following settings:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;apiman-gateway.registry=io.apiman.gateway.engine.jdbc.PollCachingJdbcRegistry
apiman-gateway.registry.datasource.jndi-location=java:jboss/datasources/apiman-gateway&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Please note that the &lt;em&gt;apiman-gateway.registry.datasource.jndi-location&lt;/em&gt; should
be set to whatever value makes sense based on the deployment/configuration of
your actual datasource.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Once you have configured the API Gateway to use a database to store your 
configuration info, apiman will no longer store this type of data in 
Elasticsearch.  This is perhaps one step closer to a world where you do
not need to maintain/manager a production Elasticsearch instance.&lt;/p&gt;

&lt;p&gt;In future posts I will show you how you can swap out other Elasticsearch
components for alternatives (e.g. Rate Limiting, Caching, etc).&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description><category term="apiman" /><category term="1.2.x" /><category term="gateway" /><category term="jdbc" /><category term="registry" /><pubDate>Wed, 09 Mar 2016 09:30:00 +0000</pubDate>
				<link>https://apiman.io/blog/apiman/1.2.x/gateway/jdbc/registry/2016/03/09/jdbc-registry.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/apiman/1.2.x/gateway/jdbc/registry/2016/03/09/jdbc-registry.html</guid>
			</item><item>
				<title>Re-Registering Your Client App(s)</title><dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author><description>&lt;p&gt;In a recent blog post I explained why APIs used to be completely frozen 
once they were published, and how we have loosened that restriction for
Public APIs.  Similarly, we did not allow Client Apps to be changed and
then re-registered.  This was never a good decision, since the Client App
does not have anything ‚Äúconnected‚Äù to it (the way that an API may).  So
we should never have restricted the registration of a Client App!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;when-can-i-re-register&quot;&gt;When Can I Re-Register?&lt;/h2&gt;
&lt;p&gt;A Client App can be re-registered to the Gateway whenever it has been
modified, or if it has been un-registered (is in the &lt;em&gt;Retired&lt;/em&gt; state).&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-re-register&quot;&gt;How Do I Re-Register?&lt;/h2&gt;
&lt;p&gt;When you have made some changes to your Client App, you can re-register
it by clicking the &lt;strong&gt;Re-Register&lt;/strong&gt; button in the UI.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-02-24/re-register.png&quot; alt=&quot;Image: Reregister Button&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As soon as you‚Äôre comfortable with the changes you‚Äôve made to your
Client App, simply click the button and you should be all set!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Again, we should never have restricted when users can update the settings
of a Client App in the gateway.  This change should make it much easier
for Client App Developers to make sensible changes and then push those
changes to the gateway!&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description><category term="apiman" /><category term="1.2.x" /><category term="gateway" /><pubDate>Wed, 24 Feb 2016 10:30:00 +0000</pubDate>
				<link>https://apiman.io/blog/apiman/1.2.x/gateway/2016/02/24/reregistering.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/apiman/1.2.x/gateway/2016/02/24/reregistering.html</guid>
			</item><item>
				<title>Re-Publishing Your API(s)</title><dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author><description>&lt;p&gt;An early design decision we made in apiman was to not allow APIs to be
re-published to the Gateway.  The reasoning was that Client Apps may have
established Contracts with the API, and thus have agreed to specific terms
and conditions (whether implicit or explicit).  Therefore, we shouldn‚Äôt 
allow the API provider to modify those terms and re-publish the API, as it
may violate the agreement.&lt;/p&gt;

&lt;p&gt;However, we later added the concept of a Public API, which allows any 
client to invoke it without first creating a Contract.  It is clear that
API providers should be able to re-publish a Public API (presumably after
changing the API‚Äôs configuration).&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;when-can-i-re-publish&quot;&gt;When Can I Re-Publish?&lt;/h2&gt;
&lt;p&gt;An API can be re-published to the Gateway when the following criteria is
met:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It is a Public API&lt;/li&gt;
  &lt;li&gt;The API is in the &lt;em&gt;Published&lt;/em&gt; state&lt;/li&gt;
  &lt;li&gt;The API has been modified in some way&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, if the Public API has been retired (is currently in the 
&lt;em&gt;Retired&lt;/em&gt; state) then the user can Re-Publish it regardless of whether
it has since been modified.&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-re-publish&quot;&gt;How Do I Re-Publish?&lt;/h2&gt;
&lt;p&gt;When an API meets the above criteria, a &lt;strong&gt;Re-Publish&lt;/strong&gt; button will be 
available in the user interface (right where the ‚ÄúPublish‚Äù button is
typically located).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-02-24/re-publish.png&quot; alt=&quot;Image: Republish Button&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As soon as you‚Äôre comfortable with the changes you‚Äôve made to your API, 
simply click the button and you should be all set!&lt;/p&gt;

&lt;h2 id=&quot;why-is-there-still-versioning&quot;&gt;Why Is There Still Versioning?&lt;/h2&gt;
&lt;p&gt;This feature does not take the place of API versioning.  Versioning
is still very important because you may want to publish multiple 
versions of the same API at the same time (for example, if you 
actually need to support multiple versions of a live API).  In 
addition, if an API is not public, then you will still need to 
use versioning if you want to change the policy configuration for
your API.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As always, a goal of apiman is to make the system as easy to use as
possible, while still being useful and powerful.  We think that this
approach is a reasonable compromise.  You still can‚Äôt re-publish an
API if there are established Contracts with Client Apps, but if you‚Äôre
only using Public APIs, then there‚Äôs no reason to prevent changes from
being republished!&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description><category term="apiman" /><category term="1.2.x" /><category term="gateway" /><pubDate>Wed, 24 Feb 2016 09:30:00 +0000</pubDate>
				<link>https://apiman.io/blog/apiman/1.2.x/gateway/2016/02/24/republishing.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/apiman/1.2.x/gateway/2016/02/24/republishing.html</guid>
			</item><item>
				<title>Apiman 1.2 - Improvements to Plugin Management</title><dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author><description>&lt;p&gt;Apiman is not only preconfigured with a rich set of policies that you can use, right out of the box, but, from its earliest releases, apiman has also included a mechanism that you can use to define your own custom policies through plugins. This article describes the improvements introduced in apiman release 1.2.x that enable you to better manage your custom policy plugins.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;policies-the-most-important-part-of-api-management&quot;&gt;Policies, the Most Important Part of API Management&lt;/h3&gt;

&lt;p&gt;In API Management, policies are where the action is. It‚Äôs through the application of policies that an API Management system such as apiman performs API governance. All the subsystems in apiman, from the Management API UI to the API Gateway, exist for one ultimate goal; to ensure that API governance is achieved by the application of policies to API requests. In apiman, a policy is a rule, or set of rules that controls responses to API requests. There are multiple types of apiman policies. Some policies allow or block access to APIs based on the IP address of the client application, while others allow or restrict access to specific resources provided by an API, while still others enable you to control or ‚Äúthrottle‚Äù the rate at which requests made to an API.&lt;/p&gt;

&lt;h3 id=&quot;apiman-plugin-management-improvements---extending-flexibility&quot;&gt;Apiman Plugin Management Improvements - Extending Flexibility&lt;/h3&gt;

&lt;p&gt;Apiman release 1.2.x adds these new features that enable you to better manage your custom policy plugins:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Uninstalling Policies&lt;/li&gt;
  &lt;li&gt;Upgrading Policies&lt;/li&gt;
  &lt;li&gt;Automatically Reloading SNAPSHOT Version Policies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best way to understand how these features work is to see them in action.&lt;/p&gt;

&lt;h3 id=&quot;uninstalling-a-policy-plugin&quot;&gt;Uninstalling a Policy Plugin&lt;/h3&gt;

&lt;p&gt;Before we can uninstall a policy plugin, we have to install it.&lt;/p&gt;

&lt;p&gt;Apiman is preconfigured with a core set of policy types that can handle many common situations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Authorization - Access to API resources is controlled by user roles&lt;/li&gt;
  &lt;li&gt;BASIC Authentication - A username/password is required to access an API&lt;/li&gt;
  &lt;li&gt;Caching - Cache responses from a backend API&lt;/li&gt;
  &lt;li&gt;Ignored Resources - Paths to API resources that will not be accessible&lt;/li&gt;
  &lt;li&gt;IP Blacklist - Clients with specific IP address(es) will be blocked from accessing an API&lt;/li&gt;
  &lt;li&gt;IP Whitelist - Clients with specific IP address(es) will not be blocked from accessing an API (all IP addresses not listed will be blocked)&lt;/li&gt;
  &lt;li&gt;Limiting - Access to an API is limited by the number of requests in a defined time period (generally used to create a fine-grained limit)&lt;/li&gt;
  &lt;li&gt;Quota - Access to an API is limited by the number of requests in a defined time period (generally used to create a coarse-grained limit)&lt;/li&gt;
  &lt;li&gt;Transfer Quota - Similar to a Quota policy, but based on the number of bytes transferred, not the number of requests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These core policy types cannot be uninstalled.&lt;/p&gt;

&lt;p&gt;Apiman is also includes second set of policy types which can be optionally installed as plugins:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CORS - This plugin implements CORS (Cross-origin resource sharing): A method of controlling access to resources outside of an originating domain.&lt;/li&gt;
  &lt;li&gt;HTTP Security - Provides a policy which allows security-related HTTP headers to be set, which can help mitigate a range of common security vulnerabilities.&lt;/li&gt;
  &lt;li&gt;JSONP - A plugin that contributes a policy that turns a standard RESTful endpoint into a JSONP compatible endpoint.&lt;/li&gt;
  &lt;li&gt;Keycloak OAuth - This plugin offers an OAuth2 policy which leverages the Keycloak authentication platform as the identity and access provider.&lt;/li&gt;
  &lt;li&gt;Simple Headers - Offers a simple policy that allows request headers to be added or stripped from the HTTP request (outgoing) or HTTP response (incoming).&lt;/li&gt;
  &lt;li&gt;XML&amp;lt;-&amp;gt;JSON Transformation - This plugin provides a very simple policy which can transform the request and/or response payload between XML and JSON.&lt;/li&gt;
  &lt;li&gt;Log Headers - A policy that logs request and/or response headers to the server console.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The optional plugins are accessed in this administrative page in the apiman Management UI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-02-22/plugin_mgmt_1.png&quot; alt=&quot;Image: Optional Plugins&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To install a policy plugin, click on ‚ÄúInstall‚Äù - for example, to install the Log Headers Policy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-02-22/plugin_mgmt_2.png&quot; alt=&quot;Image: Log Policy Plugin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, it‚Äôs installed!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-02-22/plugin_mgmt_3.png&quot; alt=&quot;Image: Log Policy Plugin Installed&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OK, we installed the policy plugin. Now, let‚Äôs uninstall it!&lt;/p&gt;

&lt;p&gt;Uninstalling a policy plugin is as simple as installing it. All you do is select the plugin from the ‚ÄúManage Plugins‚Äù page in the Administrative UI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-02-22/plugin_mgmt_4.png&quot; alt=&quot;Image: Log Policy Plugin Uninstalled &quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are a couple of caveats to keep in mind when you uninstall a policy plugin:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, uninstalling the plugin removes it from the apiman Management UI, but it still remains in use for all APIs in which it was previously configured.&lt;/li&gt;
  &lt;li&gt;Second, if you want to completely remove the plugin from all APIs in which it was previously configured, you must manually click on each API, Plan, and Client App that uses the policy and remove it. Apiman does not include a single ‚Äúkill‚Äù button to automatically remove all references to a policy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;upgrading-policy-plugins&quot;&gt;Upgrading Policy Plugins&lt;/h3&gt;

&lt;p&gt;In addition to enabling you to create and install your own custom policies, apiman also provides a mechanism to upgrade to new versions of those policies. This is an especially useful feature as, over time, a policy may be upgraded to include bug fixes or new features.&lt;/p&gt;

&lt;p&gt;The best way to illustrate how to upgrade a policy plugin is to follow the process step-by-step.&lt;/p&gt;

&lt;p&gt;For this illustration, we‚Äôll use one of the policy plugins provided in the official apiman plugins git repository ( &lt;a href=&quot;https://github.com/apiman/apiman-plugins&quot;&gt;https://github.com/apiman/apiman-plugins&lt;/a&gt; ) as our custom plugin. Many of the plugins provided in this repository are also available set of ‚Äúavailable plugins‚Äù packaged with apiman. We‚Äôll use one of the plugins (‚Äútest-policy‚Äù - it‚Äôs a very simple policy that adds a header to the inbound http request) that is not already installed into apiman for this example.&lt;/p&gt;

&lt;p&gt;(Note that in order to follow this example, you will have to have maven and git installed.)&lt;/p&gt;

&lt;p&gt;To download the policy plugins, execute these commands:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/apiman/apiman-plugins.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;apiman-plugins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Before we build the plugins, we have to make one small change. The plugins as downloaded are assigned version numbers that include a -‚ÄúSNAPSHOT‚Äù suffix. We will want to remove that suffix for this example. (Sneak peek: We will restore the suffix later in this article as apiman includes a new feature where ‚ÄúSNAPSHOT‚Äù version plugins are automatically reloaded.)&lt;/p&gt;

&lt;p&gt;To make these changes, edit these files, and change the version from ‚Äú1.2.2-SNAPSHOT‚Äù to ‚Äú1.2.2‚Äù:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./pom.xml
test-policy/pom.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, to build the plugins, and install them into your local maven repo (at runtime, the apiman API Gateway installs plugins from the local maven ‚Äú.m2‚Äù repo directory), execute this command:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OK, our policy plugin is built, let‚Äôs add it into the management UI.&lt;/p&gt;

&lt;p&gt;As an administrative user, navigate to the ‚ÄúManage Plugins‚Äù page in the Management UI and select the ‚ÄúAvailable Plugins‚Äù tab, and then, click on the ‚ÄúAdd Custom Plugin‚Äù button. The following dialog is displayed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-02-22/plugin_mgmt_5.png&quot; alt=&quot;Image: Add Custom Plugin &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fill in the details for the ‚Äútest-policy‚Äù plugin. (You can find all this information in the plugin‚Äôs ‚Äúpom.xml‚Äù file.) apiman will use this information to locate the policy plugin in your local maven repo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-02-22/plugin_mgmt_6.png&quot; alt=&quot;Image: Add Custom Plugin Details &quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, after you click on the ‚ÄúAdd Plugin‚Äù button, the policy plugin is installed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-02-22/plugin_mgmt_7.png&quot; alt=&quot;Image: Custom Plugin Added &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice that there are (2) buttons in the ‚ÄúActions‚Äù column of the ‚ÄúInstalled Plugins‚Äù  table. The button labeled with an ‚ÄúX‚Äù enables you to remove the plugin. The button labeled with an up-arrow enables you to upgrade the policy plugin.&lt;/p&gt;

&lt;p&gt;In order for apiman to recognize that a plugin policy has been updated, the plugin version number must change. To change the version number of the test-policy plugin, edit these files, and change the version from ‚Äú1.2.2‚Äù to ‚Äú1.2.3‚Äù:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./pom.xml
test-policy/pom.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, to rebuild the plugins, and install them into your local maven repo, execute this command:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn clean install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After rebuilding the plugins, return to the apiman Management UI, and click on the plugin policy‚Äôs upgrade button. Enter the new plugin version number in the dialog that is displayed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-02-22/plugin_mgmt_8.png&quot; alt=&quot;Image: Set the Updated Version Number &quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, after you perform the upgrade by clicking on the ‚ÄúOK‚Äù button, the plugin is upgraded:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-02-22/plugin_mgmt_9.png&quot; alt=&quot;Image: View the Updated Version Number &quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are a few important things to keep in mind while upgrading policy plugins:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The upgraded version of a policy plugin replaces the previous version.&lt;/li&gt;
  &lt;li&gt;Plans, APIs, or Client Apps that had previously been configured with the old version of the plugin policy will continue to use that older version. They will not be automatically updated to use the upgraded version of the policy plugin.&lt;/li&gt;
  &lt;li&gt;New Plans, APIs, or Client Apps that are created after the policy plugin was upgraded will use the new/upgraded version.&lt;/li&gt;
  &lt;li&gt;If you want to upgrade existing Plans, APIs, or Client Apps to use an upgraded policy plugin, then you will have to manually remove the old policy plugin version and then add the new policy plugin version. The apiman project documentation recommends against doing this unless there is a bug fix or new feature added in a policy plugin upgrade.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;automatically-reloading-snapshot-version-policies&quot;&gt;Automatically Reloading SNAPSHOT Version Policies&lt;/h3&gt;

&lt;p&gt;The final new feature added to Plugin Management in apiman 1.2.x is the automatic reloading of SNAPSHOT version policy plugins.&lt;/p&gt;

&lt;p&gt;When you are developing a custom policy plugin, you may have to uninstall and reinstall the plugin many times while it is being debugged. This can quickly become a time-consuming manual task. Apiman 1.2.x now makes it possible for you avoid this manual installing/re-installing.&lt;/p&gt;

&lt;p&gt;As we‚Äôve just seen, the apiman API Gateway installs policy plugins from your local maven repo. To be more efficient, the API Gateway caches plugins the first time that they are used. If, however, a plugin‚Äôs version ends with a ‚Äú-SNAPSHOT‚Äù suffix, then the API Gateway will reload it every time the plugin is used.&lt;/p&gt;

&lt;p&gt;So, by including a ‚Äú-SNAPSHOT‚Äù suffix in your custom policy plugin‚Äôs version, you can iterate through changes to the policy plugin  without having to manually uninstall and then install each new version of the plugin.&lt;/p&gt;

&lt;p&gt;Let‚Äôs take a look at this in action.&lt;/p&gt;

&lt;p&gt;Since we want to take advantage of the automatic reloading, we must restore the ‚Äú-SNAPSHOT‚Äù suffix to the test-policy custom policy plugin. To make these changes, edit these files, and change the version from ‚Äú1.2.3‚Äù to ‚Äú1.2.2-SNAPSHOT‚Äù:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;./pom.xml
test-policy/pom.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, to build the plugins, and install them into your local maven repo, execute this command:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn clean install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And then add the custom policy plugin in the Management UI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-02-22/plugin_mgmt_10.png&quot; alt=&quot;Image: Add SNAPSHOT Plugin &quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, here‚Äôs the installed plugin:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-02-22/plugin_mgmt_11.png&quot; alt=&quot;Image: View SNAPSHOT Plugin &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before we can configure the custom policy plugin, we need an API. For this example, we‚Äôll use our old friend, ‚Äúapiman-echo.‚Äù You can download this API from this git repository: &lt;a href=&quot;https://github.com/apiman/apiman-quickstarts&quot;&gt;https://github.com/apiman/apiman-quickstarts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The steps to build, deploy, and configure this API are available in the first article in this series: &lt;a href=&quot;https://www.apiman.io/blog/introduction/overview/2015/01/09/impatient-new-user-redux.html&quot;&gt;The Impatient New User Guide to apiman&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We‚Äôll use the postman web client to access the API. The first time that we access the API, we‚Äôll see this response (note the text highlighted in green):&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;resource&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/apiman-echo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;uri&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/apiman-echo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;headers&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Accept&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Cache-Control&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;no-cache&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;User-Agent&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.86 Safari/537.36&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Connection&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;keep-alive&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Test-Policy&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Postman-Token&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;8808bb68-1c1c-ef97-449d-ab60f620b0e5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Host&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;localhost:8080&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Accept-Language&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;en-US,en;q=0.8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Accept-Encoding&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gzip, deflate, sdch&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bodyLength&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bodySha1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;OK, now, let‚Äôs change the policy plugin. In this file: src/main/java/io/apiman/plugins/test_policy/TestPolicy.java&lt;/p&gt;

&lt;p&gt;Change this line from this: request.getHeaders().put(‚ÄúTest-Policy‚Äù, ‚Äútrue‚Äù);&lt;/p&gt;

&lt;p&gt;To this: request.getHeaders().put(‚ÄúTest-Policy‚Äù, ‚Äúquite true‚Äù);&lt;/p&gt;

&lt;p&gt;And then, rebuild the plugin with this command:&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn clean install &lt;span class=&quot;nt&quot;&gt;-DskipTests&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;(The ‚ÄúskipTests‚Äù directive is a bit of laziness. There is a test included in the plugin that will fail because of the change that we just made. You can either run this command as is, or you can edit the test in the plugin to also look for a string of ‚Äúquite true.‚Äù)&lt;/p&gt;

&lt;p&gt;Now, when we access the API again, we‚Äôll see the change reflected - without our having to manually upgrade or uninstall/install the policy plugin:&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;resource&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/apiman-echo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;uri&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/apiman-echo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;headers&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Accept&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Cache-Control&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;no-cache&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;User-Agent&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.86 Safari/537.36&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Connection&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;keep-alive&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Test-Policy&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;quite true&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Postman-Token&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bb900e07-249c-66e4-980a-2c9a70002c45&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Host&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;localhost:8080&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Accept-Language&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;en-US,en;q=0.8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Accept-Encoding&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gzip, deflate, sdch&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bodyLength&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bodySha1&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h3&gt;

&lt;p&gt;From its first releases, apiman has provided users with flexibility, including support for adding custom policies through plugins. In the latest release, apiman has expanded on that flexibility by enabling users to uninstall policy plugins, upgrade policy plugins, and automatically reload policy plugins.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;You can see a more detailed walk-through on how a custom policy plugin is created in this apiman blog post: &lt;a href=&quot;https://www.apiman.io/blog/plugins/policies/development/maven/2015/03/06/custom-policies-redux.html&quot;&gt;https://www.apiman.io/blog/plugins/policies/development/maven/2015/03/06/custom-policies-redux.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The ‚Äúpostman‚Äù client is available here: &lt;a href=&quot;https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en&quot;&gt;https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;/post&lt;/p&gt;
</description><category term="apiman" /><category term="introduction" /><category term="overview" /><category term="plugin" /><category term="management" /><pubDate>Mon, 22 Feb 2016 12:30:00 +0000</pubDate>
				<link>https://apiman.io/blog/apiman/introduction/overview/plugin/management/2016/02/22/plugin-mgmt.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/apiman/introduction/overview/plugin/management/2016/02/22/plugin-mgmt.html</guid>
			</item><item>
				<title>Apiman 1.2.1 Export and Import</title><dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author><description>&lt;h3 id=&quot;the-question-you-dread&quot;&gt;The Question you Dread&lt;/h3&gt;

&lt;p&gt;If you use a computer at home or at work, you‚Äôll eventually find yourself in a situation where you lose some important data and, while you are trying to recover it, someone asks you a question that is simultaneously annoying and terrifying:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;‚ÄúDid you make a backup?‚Äù&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Happily, the 1.2 release of apiman includes a new feature that enables you to export and import your apiman data and provides you with an easy means to create apiman data backups.  In this post,  we‚Äôll take a look at the new export/import feature, and how you can use it for a variety of tasks to protect your data, make your life easier, and enable you to avoid annoying and terrifying questions.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;For test data, we‚Äôll use the same types of data (organizations, users, plans, policies, APIs and client apps), that we created in the initial post in this series. (  &lt;a href=&quot;https://www.apiman.io/blog/introduction/overview/2015/01/09/impatient-new-user-redux.html&quot;&gt;The Impatient New User Guide to apiman&lt;/a&gt; )&lt;/p&gt;

&lt;p&gt;Note that since that post was written in January 2015, some of the names of the data elements have changed. You can either create the test data referred to in this post yourself, or you can import the data file attached to the post.&lt;/p&gt;

&lt;h3 id=&quot;exportimport-in-apiman-121&quot;&gt;Export/Import in apiman 1.2.1&lt;/h3&gt;

&lt;p&gt;The new export/import feature in apiman 1.2.1 enables you to export your apiman configuration data to a file, which can later be imported into an apiman system. Note that this feature follows an all-or-nothing approach in that is does not support incremental backup and restore of selected apiman data.&lt;/p&gt;

&lt;p&gt;The three main use cases that the export/import feature supports are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Backing up all your apiman data&lt;/li&gt;
  &lt;li&gt;Upgrading to a newer version of apiman&lt;/li&gt;
  &lt;li&gt;Migrating apiman data from a Test environment to a Production environment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The export/import operations are only available to Administrative users. The export/import feature is accessed through the admin operations menu:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-01-26/export_import_1.png&quot; alt=&quot;Image: Admin Choices&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you select the &lt;strong&gt;Export/Import&lt;/strong&gt; Data feature, this menu is displayed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-01-26/export_import_2.png&quot; alt=&quot;Image: Export/Import Menu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One thing to keep in mind is that while you are importing or exporting data, no changes to data should be made or else the export/import may encounter an error, or may result in incomplete results. To be safe, you should disable user access to the API Manager, both the Management UI and its REST interface, for the duration of the import or export operation.&lt;/p&gt;

&lt;p&gt;We‚Äôll look at exporting data first.&lt;/p&gt;

&lt;h3 id=&quot;backing-up-apiman-data&quot;&gt;Backing up apiman Data&lt;/h3&gt;

&lt;p&gt;To make a backup of all your apiman data, simply select the ‚ÄúExport All‚Äù button. The apiman data will be written to a file and downloaded by your browser. Your browser‚Äôs settings will determine where the file is saved.&lt;/p&gt;

&lt;p&gt;The apiman data is written to a file named: api-manager-export.json&lt;/p&gt;

&lt;p&gt;As its name indicates, the apiman data is written in JSON form. This format provides us with  several advantages. First of all, it‚Äôs the format in which apiman is able to import data. (We‚Äôll perform an import later in this post.) Secondly, it‚Äôs a text file where the contents of the file are human readable. The content of the file is ALL the apiman data, both the data elements that you have created and the data elements with which apiman is preconfigured.&lt;/p&gt;

&lt;p&gt;Reading this file can greatly increase your understanding of the elements that are defined in apiman. Let‚Äôs take a look at the elements in the file:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Users&lt;/strong&gt; - The preconfigured ‚Äúadmin‚Äù user is defined here, as are the new users we create.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Gateways&lt;/strong&gt; - The preconfigured apiman Gateway is defined here.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Roles&lt;/strong&gt; - The preconfigured, permission-based roles, and new roles that we create, are defined here. For example, the ‚ÄúOrganizationOwner‚Äù role is shown to have these permissions: [ ‚ÄúapiAdmin‚Äù, ‚ÄúorgAdmin‚Äù, ‚ÄúapiView‚Äù, ‚ÄúorgEdit‚Äù, ‚ÄúclientEdit‚Äù, ‚ÄúclientAdmin‚Äù, ‚ÄúplanView‚Äù, ‚ÄúorgView‚Äù, ‚ÄúplanAdmin‚Äù, ‚ÄúclientView‚Äù, ‚ÄúplanEdit‚Äù, ‚ÄúapiEdit‚Äù ]&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Policy Definitions&lt;/strong&gt; -  Next, the preconfigured policies, and new policies t2015-11-12-micro-services.markdownhat we create, are defined here. For example: the ‚ÄúRateLimitingPolicy‚Äù is described as ‚ÄúEnforces rate configurable request rate limits on an API.  This ensures that consumers can‚Äôt overload an API with too many requests.‚Äù&lt;/li&gt;
  &lt;li&gt;The remainder of the file includes the elements that we create: &lt;strong&gt;Organizations, Plans, APIs, and Client Apps&lt;/strong&gt;. For example, here is the definition of the ‚Äúecho‚Äù API that we created:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Apis&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ApiBean&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;echo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;echo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;The echo API&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;createdBy&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;serprov&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;createdOn&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1453773184836&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;numPublished&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Versions&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ApiVersionBean&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Published&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;endpoint&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:8080/apiman-echo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;endpointType&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rest&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;endpointContentType&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;json&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;endpointProperties&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gateways&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gatewayId&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;TheGateway&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;publicAPI&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;plans&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;planId&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gold&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;createdBy&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;serprov&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;createdOn&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1453773184845&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;modifiedBy&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;serprov&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;modifiedOn&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1453773312563&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;publishedOn&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1453773327835&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Policies&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Api&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;organizationId&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ACMEServices&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;entityId&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;echo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;entityVersion&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BASIC Authentication Policy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;configuration&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;realm&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Echo&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;requireBasicAuth&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:false,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;staticIdentity&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;identities&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:[{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;user1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;admin123!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;}]}}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;createdBy&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;serprov&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;createdOn&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1453773312553&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;modifiedBy&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;serprov&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;modifiedOn&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1453773312553&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
     &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;definition&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BASICAuthenticationPolicy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;templates&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;deleted&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;orderIndex&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;One thing to remember is that the exported data file represents ALL apiman data. It‚Äôs not yet possible to perform incremental data backups in apiman. If you attempt to import the data from this file into the same apiman installation from which it was generated, you will see unique primary key violations as the import operation will attempt to create duplicate data elements.&lt;/p&gt;

&lt;p&gt;OK, now that we have this exported data file, what can we do with it?&lt;/p&gt;

&lt;p&gt;Well, obviously, if something goes wrong with your installation of apiman, you can start over with a clean installation, and instead of manually recreating your data, you can import the data. (Personal note from the author: I work in software test/QE. Part of our testing is always destructive in nature. As a result, we are always ‚Äúmessing up‚Äù test data. The export/import feature enables us to quickly reinstall apiman and recover a clean test environment.) To perform the import after a new installation of apiman, you simply select and upload  the exported data file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-01-26/export_import_3.png&quot; alt=&quot;Image: Admin Choices&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Management UI displays the status of the import as the data is processed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-01-26/export_import_4.png&quot; alt=&quot;Image: Admin Choices&quot; /&gt;&lt;/p&gt;

&lt;p&gt;How else can we use the exported data file?&lt;/p&gt;

&lt;h3 id=&quot;upgrading-to-a-newer-version-of-apiman&quot;&gt;Upgrading to a Newer Version of apiman&lt;/h3&gt;

&lt;p&gt;One of the best aspects of open source projects is the rapid rate at which new features are implemented and new versions are released. It‚Äôs exciting to watch projects quickly mature as features are added and bugs are fixed, and since the projects are open source, you can even make your own contributions. This has been the case with apiman over the past several months. New features have been added such as metrics and support for creating custom policies.&lt;/p&gt;

&lt;p&gt;One downside to all the rapid change is that as new versions of apiman have been released, we‚Äôve had to recreate all our apiman data as there was no way to migrate apiman data from one release to the next. The export/import feature now gives us a way to export apiman data from one apiman release and import it into a new apiman release.&lt;/p&gt;

&lt;p&gt;NOTE: In cases where the apiman data model changes between versions, apiman will introduce tools to transform the JSON export file from an older format to the latest.  It has not yet been decided whether those tools will be built into the Import process, or released as a standalone utility.&lt;/p&gt;

&lt;h3 id=&quot;migrating-apiman-data-from-a-test-environment-to-a-production-environment&quot;&gt;Migrating apiman Data from a &lt;em&gt;Test&lt;/em&gt; Environment to a &lt;em&gt;Production&lt;/em&gt; Environment&lt;/h3&gt;

&lt;p&gt;It‚Äôs a common practice for organizations to maintain two separate installations of software releases:&lt;/p&gt;

&lt;p&gt;A test environment, where the goal is to experiment with new features. This is typically an internal environment that gives up some measure of stability in exchange for the ability to ‚Äútry out‚Äù new features as they become available. The rate of change for this environment is high as any disruption in service in this environment do not affect customers.
A production environment, where the goal is stability. This is the environment that supports your customers. Changes happen slowly in this environment and new features are only installed after they are carefully tested as disruptions in service in this environment do affect customers.&lt;/p&gt;

&lt;p&gt;The new export/import feature in apiman 1.2 makes it possible for you to experiment with changes in your test environment, and, after the changes have been found to be stable, to easily migrate your test data from the test environment into your production environment. (You will, of course, create a backup of your production environment data before making any changes.  ;-)&lt;/p&gt;

&lt;h3 id=&quot;migrating-apiman-from-one-storage-solution-to-another&quot;&gt;Migrating apiman from one storage solution to another&lt;/h3&gt;

&lt;p&gt;Finally, when apiman is first installed, you must make various decisions about its configuration.  One of these decisions is where to store configuration and data.  When you first install apiman, you might decide that MySQL is the right choice.  However, somewhere along the line you might change your mind - perhaps you want to switch to postgresql, or even more drastically you might switch to Elasticsearch!  The Export/Import process described here solves the problem of how to migrate all your data from one storage location to another.&lt;/p&gt;

&lt;p&gt;The process is basically the same as upgrading to a newer version of apiman.  But instead you will be upgrading to the same version of apiman, but with a different configuration.  Because the exported data is in a neutral (JSON) format, we can easily import into the new configuration.  This will result in all your data being migrated from MySQL to Elasticsearch (for example).&lt;/p&gt;

&lt;h3 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h3&gt;

&lt;p&gt;The new export/import feature in apiman 1.2 provides an easy way to safeguard your apiman data and to make it possible to migrate your data between apiman releases and installations. In addition, since the exported data is human readable, it is a great resource for better understanding apiman data structures. And, it‚Äôs easy to use too!&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;

</description><category term="apiman" /><category term="introduction" /><category term="overview" /><category term="backup" /><category term="export" /><category term="import" /><pubDate>Wed, 27 Jan 2016 11:30:00 +0000</pubDate>
				<link>https://apiman.io/blog/apiman/introduction/overview/backup/export/import/2016/01/27/export-import.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/apiman/introduction/overview/backup/export/import/2016/01/27/export-import.html</guid>
			</item><item>
				<title>Apiman Names Have Been Changed to Protect the Guilty</title><dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author><description>&lt;p&gt;Recently we released version 1.2 of apiman and part of that release includes an effort
to rename some concepts to make them more clear (or to better align them with industry standard
terminology).  Read on below the fold to find out what changed!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;oh-god-why&quot;&gt;Oh God, Why?&lt;/h2&gt;
&lt;p&gt;We‚Äôve had some feedback that the names of some of the apiman entities are, in some cases,
not as clear as they could be.  There was a fair bit of confusion, and so with the 1.2
release we decided it was an opportunity to fix the problem.  To that end, here is a
quick summary of the changes:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Old Name&lt;/th&gt;
      &lt;th&gt;New Name&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Organization&lt;/td&gt;
      &lt;td&gt;Organization&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Plan&lt;/td&gt;
      &lt;td&gt;Plan&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Service&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;API&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Application&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Client App&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Policy&lt;/td&gt;
      &lt;td&gt;Policy&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;As you can see, most of the old entity names are unchanged.  But it turns out that
&lt;strong&gt;Service&lt;/strong&gt; and &lt;strong&gt;Application&lt;/strong&gt; just weren‚Äôt great names.&lt;/p&gt;

&lt;h2 id=&quot;what-was-wrong-with-service&quot;&gt;What Was Wrong With Service?&lt;/h2&gt;
&lt;p&gt;It turns out that there is no more ambiguous term in software these days that ‚ÄúService‚Äù.
The term can mean many different things to many different people.  Because apiman is an
API Management system, it just made sense that we rename Service to API.  Now you can
actually manage an API!&lt;/p&gt;

&lt;h2 id=&quot;ok-but-what-about-application&quot;&gt;OK, But What About Application?&lt;/h2&gt;
&lt;p&gt;In this case, the term &lt;strong&gt;Application&lt;/strong&gt; was confusing to some folks, because it wasn‚Äôt
clear that the Application was really just the specific Client that was allowed to
connect to an API.  Instead, many people assumed that ‚ÄúApplication‚Äù was either an
way to mashup multiple APIs, or some other sort of server-side thing.  Hopefully
by using the term ‚ÄúClient‚Äù makes it more clear what it‚Äôs used for.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Obviously one of our goals is to make using apiman easier and more intuitive to all
users.  We certainly hope that these name changes help with that goal.&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description><category term="apiman" /><category term="1.2.x" /><pubDate>Wed, 27 Jan 2016 08:30:00 +0000</pubDate>
				<link>https://apiman.io/blog/apiman/1.2.x/2016/01/27/renaming.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/apiman/1.2.x/2016/01/27/renaming.html</guid>
			</item><item>
				<title>Cover yourself up! Protecting your APIs with mutual auth</title><dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author><description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last thing you want after carefully setting up your system with apiman is for someone to be able to call around the gateway and hit your APIs directly. The typical solution for this is to lock down your network so that the only publicly accessible part is the apiman gateway, whilst APIs are hidden in the private part of the network, which apiman can access, but not someone in the outside world. However, in some situations fine-grained network controls may not be available, such as the cloud; or, you may wish to have an additional layer of security to be reassured that no funny business is going on (such as imposters).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The class of solutions to this problem generally falls under the banner of &lt;strong&gt;mutual authentication&lt;/strong&gt;. One such mutual auth offering apiman supports is Mutually Authenticated TLS&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-is-mutual-transport-layer-security-mutual-tls&quot;&gt;What is mutual transport layer security (Mutual TLS)?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most developers are familiar with SSL/TLS; it facilitates authentication via certificates followed by the establishment of an encrypted channel between the parties. It is overwhelmingly used in a one-way configuration: the client (often a browser) connects to a server, inspects the certificates it presents, and makes a determination as to whether the server is trustworthy. The connection is only made if the client is satisfied that the server is who it claims to be. In general, the server makes no determination as to who the client is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, in a typical apiman setup the gateway is acting as the client and the APIs act as the servers. Clearly, if we wish to prevent anyone other than approved clients from connecting directly to our APIs then unidirectional authentication is insufficient: we must ascertain the identities of &lt;em&gt;both&lt;/em&gt; client and server before establishing a connection. In essence, each party must present certificates that the other party trusts. This a great way to prevent anyone from side-stepping our gateway, and even better, it also stops any interlopers from sneaking into the system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Luckily, apiman makes this &lt;a href=&quot;https://www.apiman.io/latest/installation-guide.html#_how_to_enable_mtls_mutual_ssl_support_for_endpoint_security&quot;&gt;extremely easy to set this up&lt;/a&gt;, so let&amp;#8217;s dive in and explore what&amp;#8217;s possible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s assume 'node' refers generically to a participant in our system, either a gateway or an API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two main elements we need to work with: &lt;strong&gt;keystores&lt;/strong&gt;, which contain a node&amp;#8217;s private key material, and &lt;strong&gt;truststores&lt;/strong&gt;, which contain public certificates instructing the node whom it should trust.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ideally, each node should have its own keystore, whose key material is signed by a &lt;strong&gt;trusted certificate authority&lt;/strong&gt;; a trusted party whose signature indicates that the holder of the certificate is trustworthy. In many organisations there is an internal certificate authority which will sign or issue certificates. If we add a CA&amp;#8217;s certificate to our node&amp;#8217;s keystores, then &lt;em&gt;any&lt;/em&gt; certificate issued by it will be trusted by virtue of the issuer&amp;#8217;s authority. This approach scales excellently, because we can issue an unlimited number of new certificates without needing to add them to our truststores.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It bears mentioning that any client apps&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/sup&gt; legitimately using our gateway will never be exposed to any mutual auth issues; they will establish a standard one-way authenticating TLS connection that is terminated at the gateway, with the gateway then establishing the two-way TLS connection to the API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.apiman.io/blog/images/generated/gateway-mtls-redux.svg&quot; alt=&quot;gateway mtls redux&quot; width=&quot;752&quot; height=&quot;466&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Simple mutual auth setup&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the APIs trust the gateway (and vice versa), but the APIs &lt;em&gt;do not&lt;/em&gt; trust the client app. The client app tries its luck and attempts to bypass the gateway, but it doesn&amp;#8217;t hold a trusted certificate, so it fails.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-keys-to-success&quot;&gt;The keys to success&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Remember, this is just a quick blog demonstration; you need to take extreme care with how you look after your key infrastructure to avoid a catastrophic security incident. If you&amp;#8217;re unsure, consult someone who knows what they&amp;#8217;re doing!
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;truststore&quot;&gt;Truststore&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s create a simple shared truststore that we&amp;#8217;ll use on all of our nodes. We&amp;#8217;re going to imagine that we have an internal root CA called &lt;code&gt;apimanCA&lt;/code&gt;, and that whomever controls it has taken &lt;a href=&quot;https://i.imgur.com/sYeorwQ.png&quot;&gt;appropriate security precautions&lt;/a&gt; to ensure no baddies get their certificates signed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;keytool -import -keystore shared_trust_store.jks -file apimanCA.cer -alias apimanCA&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s the easy bit done, now onto key wrangling.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;keystore&quot;&gt;Keystore&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each of our nodes needs its own keystore, which we can create using &lt;code&gt;keytool&lt;/code&gt;, followed by generating a &lt;em&gt;certificate signing request&lt;/em&gt; (CSR), which we can then send to our CA to be signed:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;keytool -keystore gateway_ks.jks -genkey -alias gateway -keyalg rsa
keytool -keystore gateway_ks.jks -certreq -alias gateway -keyalg rsa -file gateway.csr

keytool -keystore API_a_ks.jks -genkey -alias API_a -keyalg rsa
keytool -keystore API_a_ks.jks -certreq -alias API_a -keyalg rsa -file API_a.csr&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Do the same for &lt;em&gt;each of your APIs&lt;/em&gt;, and send off the &lt;code&gt;csr&lt;/code&gt; files to be signed by CA (internal or otherwise). They should come back as certificate replies in one of several formats, import them back into their &lt;em&gt;corresponding keystores&lt;/em&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;keytool -import -keystore gateway_ks.jks -file gateway.cer -alias gateway
keytool -import -keystore API_a_ks.jks -file API_a.cer -alias API_a&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;hooking-it-up&quot;&gt;Hooking it up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Your APIs may not use Java, so you&amp;#8217;ll need to find the appropriate solution for enabling mutual TLS in your language&amp;#8217;s ecosystem. It doesn&amp;#8217;t really matter, as long as you have the appropriate certificates hooked in and have set &lt;strong&gt;client authentication to required&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;gateway-to-heaven&quot;&gt;Gateway to Heaven&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s easy to set up the gateway, but you should be especially careful about what you twiddle with, as the security implications could be important. Let&amp;#8217;s edit &lt;code&gt;apiman.properties&lt;/code&gt; on our gateway(s) with a few simple settings to test things out:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;properties&quot;&gt;# ---------------------------------------------------------------------
# SSL/TLS settings for the gateway connector(s).
# ---------------------------------------------------------------------

# Trust store contains certificate(s) trusted by gateway.
apiman-gateway.connector-factory.tls.trustStore=/path/to/shared_trust_store.jks
apiman-gateway.connector-factory.tls.trustStorePassword=password

# Key store contains gateway's keys (including private components: keep it safe).
apiman-gateway.connector-factory.tls.keyStore=/path/to/gateway_ks.jks
apiman-gateway.connector-factory.tls.keyStorePassword=password
apiman-gateway.connector-factory.tls.keyPassword=password

# Whether certificate host checks should be bypassed. *Use with great care.*
apiman-gateway.connector-factory.tls.allowAnyHost=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last option is to make our testing easier by removing hostname checks on the certificates, but you should disable that in production. Have a look at &lt;a href=&quot;https://www.apiman.io/latest/installation-guide.html#_make_changes_to_apiman_properties_3&quot;&gt;our setup guide&lt;/a&gt; for a full list of options.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;service-is-everything&quot;&gt;Service is Everything&lt;/h3&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You must explicitly enable client authentication for any APIs you want protected by mutual TLS.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s a small Java example using Jetty to create a tiny API with mutual authentication enabled. We hook up our &lt;em&gt;keystore&lt;/em&gt; and &lt;em&gt;truststore&lt;/em&gt; with respective hard-to-guess passwords, and set &lt;code&gt;setNeedClientAuth(true)&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; main(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;... args) &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;Exception&lt;/span&gt; {
      Server server = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Server();
      server.setStopAtShutdown(&lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;);

      HttpConfiguration http_config = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HttpConfiguration();
      http_config.setSecureScheme(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
      http_config.setSecurePort(&lt;span class=&quot;integer&quot;&gt;8009&lt;/span&gt;);

      SslContextFactory sslContextFactory = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SslContextFactory();
      sslContextFactory.setKeyStorePath(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/tmp/keys/API_a_ks.jks&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
      sslContextFactory.setKeyStorePassword(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
      sslContextFactory.setKeyManagerPassword(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
      sslContextFactory.setTrustStorePath(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/tmp/keys/shared_trust_store.jks&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
      sslContextFactory.setTrustStorePassword(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
      &lt;span class=&quot;comment&quot;&gt;// Important: Require client auth&lt;/span&gt;
      sslContextFactory.setNeedClientAuth(&lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;);

      HttpConfiguration https_config = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HttpConfiguration(http_config);
      https_config.addCustomizer(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SecureRequestCustomizer());

      ServerConnector sslConnector = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ServerConnector(server, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SslConnectionFactory(
              sslContextFactory, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http/1.1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;), &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HttpConnectionFactory(https_config));
      sslConnector.setPort(&lt;span class=&quot;integer&quot;&gt;8009&lt;/span&gt;);
      server.addConnector(sslConnector);
      server.setHandler(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AbstractHandler() {

          &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; handle(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; target, Request baseRequest,
                  HttpServletRequest request, HttpServletResponse response) &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;IOException&lt;/span&gt;,
                  ServletException {
              response.setContentType(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;text/html;charset=utf-8&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
              response.setStatus(HttpServletResponse.SC_OK);
              baseRequest.setHandled(&lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;);
              response.getWriter().println(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;apiman saves the day, again!&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
          }
      });
      server.start();
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fire-it-up&quot;&gt;Fire it up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Restart everything, and you should be ready to test it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When creating an API that is protected by mutual TLS you should set the &lt;strong&gt;API Security&lt;/strong&gt; dropdown in the &lt;strong&gt;Implementation&lt;/strong&gt; tab to &lt;code&gt;MTLS/Two-Way-SSL&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.apiman.io/blog/images/2016-01-08/enable-mtls.png&quot; alt=&quot;enable mtls&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If things don&amp;#8217;t seem to be working quite how you expected, you&amp;#8217;ll probably notice that the error messages emitted are fairly vague. If you need more information to figure out what&amp;#8217;s going on then you can pass the flag &lt;code&gt;-Djavax.net.debug=all&lt;/code&gt;, which will print helpful debug info from &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/guides/security/jsse/ReadDebug.html&quot;&gt;Java&amp;#8217;s SSL subsystems&lt;/a&gt; onto the console.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;./bin/standalone.sh -Djavax.net.debug=all -c standalone-apiman.xml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mutually authenticated TLS is a good way to ensure both client and server are who they claim to be before connecting to one another. If you need to prevent unauthorized direct access to your APIs, this is an option worth considering.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. Also commonly referred to as MTLS, MSSL, 2WAY, client authenticated TLS/SSL, two-way SSL, amongst other names!
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt;. Client Apps are the users of our APIs, like browsers, mobile apps, etc
&lt;/div&gt;
&lt;/div&gt;</description><category term="gateway" /><category term="security" /><category term="mutual-auth" /><category term="ssl" /><category term="mtls" /><category term="1.2.x" /><pubDate>Fri, 22 Jan 2016 12:00:00 +0000</pubDate>
				<link>https://apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/1.2.x/2016/01/22/mtls-mutual-auth-redux.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/1.2.x/2016/01/22/mtls-mutual-auth-redux.html</guid>
			</item><item>
				<title>Keycloak and dagger: Securing your APIs with OAuth2</title><dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author><description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One great advantage of API Management is centralising auth concerns, thereby avoiding burdensome reimplementation issues and streamlining your security processes. The good news is that you can easily configure apiman to handle many common auth use-cases, such as OAuth2 with our popular Keycloak OAuth2 policy which I&amp;#8217;ll outline in this blogpost.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;preparation&quot;&gt;Preparation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this example, let&amp;#8217;s assume we&amp;#8217;re using apiman&amp;#8217;s &lt;a href=&quot;https://www.apiman.io/latest/download.html&quot;&gt;quickstart&lt;/a&gt; setup and have it running. I suggest using the &lt;em&gt;'Or simply try this&amp;#8230;&amp;#8203;'&lt;/em&gt; box.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After you have your apiman quickstart running (replace &lt;strong&gt;apiman-1.2.0.Final&lt;/strong&gt; in the path below with whatever version you downloaded), we can live deploy a handy &lt;strong&gt;echo service&lt;/strong&gt; into our environment so we have an API to test against:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;cd /tmp
git clone https://github.com/apiman/apiman-quickstarts.git
cd apiman-quickstarts/echo-service
git checkout 1.2.0.Final
mvn clean install
mvn wildfly:deploy&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;installing-the-plugin&quot;&gt;Installing the Plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Those amongst you with some experience of apiman may have noticed that the OAuth2 policy doesn&amp;#8217;t appear in the standard list of policies in the manager UI; that&amp;#8217;s because the OAuth2 policy is an example of an &lt;strong&gt;apiman plugin&lt;/strong&gt;, all of which are shipped separately from apiman, but are trivially easy to install.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When logged into &lt;a href=&quot;http://localhost:8080/apimanui/&quot;&gt;the apiman manager UI&lt;/a&gt; as an administrator (for the quickstart that&amp;#8217;s u:`admin`, p:`admin123!`), navigate to the &lt;strong&gt;manage plugins&lt;/strong&gt; page:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://www.apiman.io/latest/user-guide.html#_plugins&quot;&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-01-08/sysadmin-manage-plugins.png&quot; alt=&quot;System Administration&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.apiman.io/blog/images/2016-01-08/available-plugins.png&quot; alt=&quot;Select Keycloak OAuth Policy Plugin from the available plugins list&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tab to &lt;strong&gt;Available Plugins&lt;/strong&gt;, select &lt;strong&gt;Install&lt;/strong&gt; for &lt;em&gt;Keycloak OAuth Policy Plugin&lt;/em&gt;, confirm the plugin coordinates, and click &lt;strong&gt;Add Plugin&lt;/strong&gt;. That&amp;#8217;s it!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;setting-up&quot;&gt;Setting Up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two essential components to our system. First, is the &lt;a href=&quot;https://keycloak.jboss.org&quot;&gt;Keycloak server&lt;/a&gt;, an all-in-one &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_sign-on&quot;&gt;SSO&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Identity_management&quot;&gt;IdM&lt;/a&gt; platform; we&amp;#8217;ll configure it to be our identity source and handle the issuance of OAuth2 bearer tokens. Second, is the apiman OAuth2 policy; we&amp;#8217;ll set it up to validate the tokens precisely to our requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s assume we&amp;#8217;re going to protect a very simple &lt;strong&gt;echo service&lt;/strong&gt;, which echoes back to the requestor the details of any request made to it. It is located at &lt;code&gt;&lt;a href=&quot;http://localhost:8080/apiman-echo&quot; class=&quot;bare&quot;&gt;http://localhost:8080/apiman-echo&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;keycloak-server&quot;&gt;Keycloak Server&lt;/h3&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
There are a huge number of configuration permutations with Keycloak, and the most suitable approach will vary according to your requirements. It is highly recommended to consult the &lt;a href=&quot;https://keycloak.jboss.org/docs.html&quot;&gt;Keycloak guides&lt;/a&gt; to determine your optimal setup, as for the sake of brevity we&amp;#8217;re only going to cover a couple of trivial preconfigured scenarios.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, log into the &lt;a href=&quot;http://localhost:8080/auth/admin&quot;&gt;Keycloak server&lt;/a&gt;. If you&amp;#8217;re following our walkthrough, the log-in details are identical to those mentioned earlier (&lt;code&gt;admin&lt;/code&gt;, &lt;code&gt;admin123!&lt;/code&gt;). You can see that there is already an &lt;strong&gt;apiman&lt;/strong&gt; realm defined, but we&amp;#8217;re going to create a new one, so navigate to &lt;strong&gt;Add Realm&lt;/strong&gt; (top right), and import and upload &lt;a href=&quot;https://www.apiman.io/blog/resources/2015-06-04/stottie.json&quot;&gt;this demonstration realm definition&lt;/a&gt;; it provides an extremely simple setup where we have:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A realm: &lt;code&gt;stottie&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A single user: &lt;code&gt;rincewind&lt;/code&gt;, with password: &lt;code&gt;apiman&lt;/code&gt; and a realm role: &lt;code&gt;echomeister&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And, a client: &lt;code&gt;apiman&lt;/code&gt;, which is allowed direct grants via Keycloak&amp;#8217;s &lt;a href=&quot;https://keycloak.github.io/docs/userguide/keycloak-server/html/direct-access-grants.html&quot;&gt;RESTful Direct Access Grants API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s quickly test requesting ourselves an OpenID Connect OAuth2 token:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;curl -X POST http://127.0.0.1:8080/auth/realms/stottie/protocol/openid-connect/token  -H &amp;quot;Content-Type: application/x-www-form-urlencoded&amp;quot; -d &amp;quot;username=rincewind&amp;quot; -d 'password=apiman' -d 'grant_type=password' -d 'client_id=apiman'&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This should return some JSON similar to the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;{
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;access_token&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;eyJhbGciOiJSUzI1NiJ9...&amp;lt;SNIP&amp;gt;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;expires_in&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;300&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;refresh_expires_in&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1800&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;refresh_token&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;eyJhbGcg...&amp;lt;SNIP&amp;gt;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;not-before-policy&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;session-state&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;69974623-be8b-49d7-840a-0330c6bdde21&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the OAuth2 token we&amp;#8217;re interested in is contained within the &lt;code&gt;access_token&lt;/code&gt; field, with useful ancillary information about token validity and refreshing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this instance, the access token is a signed OpenID Connect JSON Web Token (JWT). Using the handy decoder available at &lt;a href=&quot;https://jwt.io&quot;&gt;jwt.io&lt;/a&gt;, we can see a lot interesting information, including the &lt;code&gt;echomiester&lt;/code&gt; realm role defined on &lt;code&gt;rincewind&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;{
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;jti&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;c89b8cf7-84ef-4f02-9954-f8d3d4321473&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1433414538&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;nbf&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;iat&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1433414238&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;iss&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://127.0.0.1:8080/auth/realms/stottie&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;aud&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;apiman&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;de4af322-85b2-4dbe-8d53-6a2ee29e4080&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;azp&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;apiman&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;session_state&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;69974623-be8b-49d7-840a-0330c6bdde21&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;client_session&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;b5bd36a0-d576-4593-be7b-4648612c25b8&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;allowed-origins&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [],
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;realm_access&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
        &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [
            &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;echomeister&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
        ]
    },
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;resource_access&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
        &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
            &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [
                &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;view-profile&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;manage-account&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
            ]
        }
    },
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;preferred_username&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;rincewind&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This demonstrates one OpenID Connect&amp;#8217;s most useful attributes: all the information required to validate a request is contained within the token itself.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;apiman-oauth2-policy&quot;&gt;Apiman OAuth2 Policy&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, log into apiman, and &lt;strong&gt;Create a New Organization&lt;/strong&gt;; let&amp;#8217;s call it &lt;strong&gt;&lt;em&gt;Newcastle&lt;/em&gt;&lt;/strong&gt;. Select the &lt;strong&gt;APIs&lt;/strong&gt; tab, and add a &lt;strong&gt;New API&lt;/strong&gt;; we&amp;#8217;ll name this one &lt;strong&gt;&lt;em&gt;EchoAPI&lt;/em&gt;&lt;/strong&gt; and then &lt;strong&gt;Create API&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Select the &lt;strong&gt;Implementation&lt;/strong&gt; tab, and set the endpoint to our echo service, &lt;code&gt;&lt;a href=&quot;http://localhost:8080/apiman-echo&quot; class=&quot;bare&quot;&gt;http://localhost:8080/apiman-echo&lt;/a&gt;&lt;/code&gt;. Save and move onto the &lt;strong&gt;Plans&lt;/strong&gt; tab, where you should opt to &lt;strong&gt;Make this API public&lt;/strong&gt;. After saving, we can move onto the &lt;strong&gt;Policies&lt;/strong&gt; tab, where the interesting stuff starts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Navigate to &lt;strong&gt;Add Policy&lt;/strong&gt;, and select &lt;strong&gt;Keycloak OAuth Policy&lt;/strong&gt; from the drop-down list. A substantial set of options are available for your perusal, but for the purposes of this blog demo we&amp;#8217;ll set the following:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Option&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Value&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Details&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Realm&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://127.0.0.1:8080/auth/realms/stottie&quot; class=&quot;bare&quot;&gt;http://127.0.0.1:8080/auth/realms/stottie&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;The path to our realm &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;. Note that in older versions of Keycloak (pre &lt;code&gt;1.2.0&lt;/code&gt;), the realm will just be the &lt;strong&gt;stottie&lt;/strong&gt; (no path).&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Keycloak Realm Certificate&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Base64 encoded cert&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Paste your &lt;a href=&quot;http://localhost:8080/auth/admin/master/console/#/realms/stottie/keys-settings&quot;&gt;Keycloak realm certificate&lt;/a&gt;.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Forward Authorization Roles&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Forward Realm Roles, and set &lt;em&gt;Forward Realm Roles?&lt;/em&gt; to &lt;strong&gt;true&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;If we decide to use the authorization policy later, we&amp;#8217;ll forward the realm roles contained within the token (i.e. &lt;code&gt;echomeister&lt;/code&gt;). If we don&amp;#8217;t need the granularity of roles, you can still just validate the token.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Forward Keycloak Token Information&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Header: &lt;code&gt;X-AZP&lt;/code&gt; &amp;#8658; Field: &lt;code&gt;azp&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Set header &lt;code&gt;X-AZP&lt;/code&gt; to be value of token&amp;#8217;s &lt;code&gt;azp&lt;/code&gt; field. We would expect this to be &lt;code&gt;apiman&lt;/code&gt; for this case,  but you can set any field.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Select &lt;strong&gt;Add Policy&lt;/strong&gt;, and then &lt;strong&gt;Publish&lt;/strong&gt; the API. You can see its endpoint information in the &lt;strong&gt;Endpoint&lt;/strong&gt; tab, it should be similar to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://localhost:8443/apiman-gateway/Newcastle/EchoAPI/1.0&quot; class=&quot;bare&quot;&gt;https://localhost:8443/apiman-gateway/Newcastle/EchoAPI/1.0&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;testing-authentication&quot;&gt;Testing Authentication&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s test our setup with cURL to see whether our request is &lt;em&gt;denied&lt;/em&gt; if we don&amp;#8217;t use a token:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;[msavy@mmbp tmp]$ curl -k  https://127.0.0.1:8443/apiman-gateway/Newcastle/EchoAPI/1.0
{
    &amp;quot;type&amp;quot;: &amp;quot;Authentication&amp;quot;,
    &amp;quot;failureCode&amp;quot;: 11005,
    &amp;quot;responseCode&amp;quot;: 401,
    &amp;quot;message&amp;quot;: &amp;quot;OAuth2 'Authorization' header or 'access_token' query parameter must be provided.&amp;quot;,
    &amp;quot;headers&amp;quot;: {}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Excellent, it all seems to be working! Notice that we&amp;#8217;re using self-signed certificates for this demo, so the &lt;code&gt;-k&lt;/code&gt; flag will skip certificate validation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, let&amp;#8217;s do a request with a token. There are two ways to attach your bearer token to a request. Either:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Authorization&lt;/code&gt; header, as &lt;code&gt;Authorization: Bearer &amp;lt;token&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;access_token&lt;/code&gt; query parameter, as &lt;code&gt;&lt;a href=&quot;http://example.org/the/path/?access_token=&quot;&gt;token&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, let&amp;#8217;s retrieve a fresh token from Keycloak, and extract the &lt;code&gt;access_token&lt;/code&gt; field from the json using &lt;code&gt;jq&lt;/code&gt; &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;curl -X POST http://127.0.0.1:8080/auth/realms/stottie/protocol/openid-connect/token  -H &quot;Content-Type: application/x-www-form-urlencoded&quot; -d 'username=rincewind' -d 'password=apiman' -d 'grant_type=password' -d 'client_id=apiman' | jq -r '.access_token'&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Second, we&amp;#8217;ll take the token and attach it to our request to the API&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;[msavy@mmbp tmp]$ curl -k -H &quot;Authorization: Bearer eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiJiNDY1YW...&quot; https://127.0.0.1:8443/apiman-gateway/Newcastle/EchoAPI/1.0
{
  &quot;method&quot; : &quot;GET&quot;,
  &quot;resource&quot; : &quot;/apiman-echo&quot;,
  &quot;uri&quot; : &quot;/apiman-echo&quot;,
  &quot;headers&quot; : {
    &quot;Authorization&quot; : &quot;Bearer eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiJiNDY1YWMzNi1hMTczLTRjOWMtYWJjZS00MzE2MJ...&quot;,
    &quot;Host&quot; : &quot;127.0.0.1:8080&quot;,
    &quot;User-Agent&quot; : &quot;curl/7.37.1&quot;,
    &quot;Accept&quot; : &quot;*/*&quot;,
    &quot;Connection&quot; : &quot;keep-alive&quot;,
    &quot;Cache-Control&quot; : &quot;no-cache&quot;,
    &quot;Pragma&quot; : &quot;no-cache&quot;,
    &quot;X-AZP&quot;: &quot;apiman&quot;
  },
  &quot;bodyLength&quot; : null,
  &quot;bodySha1&quot; : null,
  &quot;counter&quot; : 1
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Great, it worked! We can see EchoAPI has now been reached, meaning our OAuth2 token was validated successfully, and it sent us back a response which includes the bearer token we used (you can strip this out in the options).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Furthermore, you can see our &lt;code&gt;X-AZP&lt;/code&gt; header has been set to the expected value of &lt;code&gt;apiman&lt;/code&gt;, which was pulled from the token.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;re feeling lazy, here&amp;#8217;s &lt;a href=&quot;https://gist.github.com/msavy/eaa1841e0c7a50e6ea8c&quot;&gt;an all-in-one script&lt;/a&gt; to do it for you.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;adding-authorization&quot;&gt;Adding Authorization&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re going to develop our example a little bit further. At present, we simply have a binary approach where we either allow or disallow based upon which realm the token was issued from. If we want a more granular approach where we can discriminate upon roles, then we need to add another element: &lt;strong&gt;Authorization&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The more observant readers will note that we have already added two of the required elements when we imported the realm into Keycloak; namely, a user &lt;code&gt;rincewind&lt;/code&gt; and a realm role &lt;code&gt;echomeister&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we navigate back to the &lt;strong&gt;EchoAPI&lt;/strong&gt; API in the apiman UI, we can create a &lt;strong&gt;New Version&lt;/strong&gt;. We&amp;#8217;ll call it &lt;strong&gt;&lt;em&gt;2.0&lt;/em&gt;&lt;/strong&gt; and clone the previous configuration. Moving over to the &lt;strong&gt;Policies&lt;/strong&gt; tab again, we &lt;strong&gt;Add Policy&lt;/strong&gt; and select &lt;strong&gt;Authorization Policy&lt;/strong&gt; from the drop-down.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re going to add two rules:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;To access resource&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;using verb/action&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;the user must have role&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;/rincewind/.*&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;echomeister&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;/secret/.*&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;overlord&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our example user has the first role, but not the second. &lt;strong&gt;Add&lt;/strong&gt; the policy and &lt;strong&gt;Publish&lt;/strong&gt; the API again. Our endpoint will now reflect the changed version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will probably need to issue a new bearer token, which you can achieve by repeating the previous shell command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;[msavy@mmbp tmp]$ curl -k -H &amp;quot;Authorization: Bearer eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiJmODAyZjFmMy1kN2JmLTQ0YjQtODA2N...&amp;quot; \
 https://127.0.0.1:8443/apiman-gateway/Newcastle/EchoAPI/2.0/rincewind/wizard
{
  &amp;quot;method&amp;quot; : &amp;quot;GET&amp;quot;,
  &amp;quot;resource&amp;quot; : &amp;quot;/apiman-echo/rincewind/wizard&amp;quot;,
  &amp;quot;uri&amp;quot; : &amp;quot;/apiman-echo/rincewind/wizard&amp;quot;,
  &amp;quot;headers&amp;quot; : {
    &amp;quot;Authorization&amp;quot; : &amp;quot;Bearer eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiJmODAyZjFmMy1kN2JmLTQ0YjQtODA2N...&amp;quot;,
    &amp;quot;Host&amp;quot; : &amp;quot;127.0.0.1:8080&amp;quot;,
    &amp;quot;User-Agent&amp;quot; : &amp;quot;curl/7.37.1&amp;quot;,
    &amp;quot;Accept&amp;quot; : &amp;quot;*/*&amp;quot;,
    &amp;quot;Connection&amp;quot; : &amp;quot;keep-alive&amp;quot;,
    &amp;quot;Cache-Control&amp;quot; : &amp;quot;no-cache&amp;quot;,
    &amp;quot;Pragma&amp;quot; : &amp;quot;no-cache&amp;quot;,
    &amp;quot;X-AZP&amp;quot;: &amp;quot;apiman&amp;quot;
  },
  &amp;quot;bodyLength&amp;quot; : null,
  &amp;quot;bodySha1&amp;quot; : null,
  &amp;quot;counter&amp;quot; : 19
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As our user &lt;code&gt;rincewind&lt;/code&gt; has the role &lt;code&gt;echomeister&lt;/code&gt;, his request went through successfully.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, if we try to access a resource for which he doesn&amp;#8217;t hold the appropriate role, we see an error message:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;[msavy@mmbp tmp]$ curl -k -H &amp;quot;Authorization: Bearer eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiJmODAyZjFmMy1kN2JmLTQ0YjQtODA2N...&amp;quot; \
 https://127.0.0.1:8443/apiman-gateway/Newcastle/EchoAPI/2.0/secret/not/allowed

{
    &amp;quot;type&amp;quot;: &amp;quot;Authorization&amp;quot;,
    &amp;quot;failureCode&amp;quot;: 10009,
    &amp;quot;responseCode&amp;quot;: 0,
    &amp;quot;message&amp;quot;: &amp;quot;The user is not authorized to make this request (a required role is missing).&amp;quot;,
    &amp;quot;headers&amp;quot;: {}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&amp;#8230;&amp;#8203;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We protected an API with apiman using OAuth2; with examples of both simple authentication and role-based authorization. It should be easy to design your own role-based auth setups in combination with Keycloak.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. Ensure you use whatever the valid ISS value is for your Keycloak realm. One quick way to find this is by decoding an access_token looking at what Keycloak has set for the &lt;code&gt;iss&lt;/code&gt; field
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt;. We&amp;#8217;re going to use &lt;code&gt;jq&lt;/code&gt; to select the &lt;code&gt;access_token&lt;/code&gt; field in our JSON, so if you don&amp;#8217;t have &lt;code&gt;jq&lt;/code&gt; installed you can use your package manager to get it: OS X Brew &lt;code&gt;brew install jq&lt;/code&gt;; On Fedora &lt;code&gt;sudo yum install jq&lt;/code&gt;; On Debian &lt;code&gt;sudo apt-get install jq&lt;/code&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category term="gateway" /><category term="security" /><category term="oauth2" /><category term="keycloak" /><category term="authentication" /><category term="authorization" /><category term="1.2.x" /><pubDate>Fri, 22 Jan 2016 12:00:00 +0000</pubDate>
				<link>https://apiman.io/blog/gateway/security/oauth2/keycloak/authentication/authorization/1.2.x/2016/01/22/keycloak-oauth2-redux.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/gateway/security/oauth2/keycloak/authentication/authorization/1.2.x/2016/01/22/keycloak-oauth2-redux.html</guid>
			</item><item>
				<title>CORS? Of Course!</title><dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author><description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;re looking to define &lt;a href=&quot;https://www.w3.org/TR/2014/REC-cors-20140116/&quot;&gt;CORS policies&lt;/a&gt; in your API Management layer, then we have an &lt;a href=&quot;https://github.com/apiman/apiman-plugins&quot;&gt;official plugin&lt;/a&gt; that should be perfect for the job.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For those &lt;a href=&quot;https://enable-cors.org/&quot;&gt;unfamiliar with CORS&lt;/a&gt;, it&amp;#8217;s a way of precisely defining who and how a remote origin may invoke an API&amp;#8217;s resources. Generally, due to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Same-origin_policy&quot;&gt;same-origin policy&lt;/a&gt;, a web browser will only allow the invocation of resources that reside on the same origin as the requesting page. This mitigates a range of malicious script attacks by preventing interaction with remote resources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, if we &lt;em&gt;want&lt;/em&gt; our resource to be callable by some (or all) other origins, then we need to define a CORS policy which let&amp;#8217;s user agent know what&amp;#8217;s allowed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;preparation&quot;&gt;Preparation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have the &lt;a href=&quot;https://www.apiman.io/latest/download.html&quot;&gt;apiman quickstart&lt;/a&gt; running &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;, you next need to deploy the &lt;strong&gt;&lt;em&gt;echo-service&lt;/em&gt;&lt;/strong&gt; to act as the backend API for our demo. &lt;strong&gt;Substitute the path below&lt;/strong&gt; for the appropriate one corresponding to the version you downloaded.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;cd /tmp
git clone https://github.com/apiman/apiman-quickstarts.git
cd apiman-quickstarts/echo-service
git checkout 1.2.0.Final
mvn clean install
mvn wildfly:deploy&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Return to the &lt;a href=&quot;http://127.0.0.1:8080/apimanui&quot;&gt;apiman UI&lt;/a&gt; and log in &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/sup&gt;, navigate to the &lt;strong&gt;manage plugins&lt;/strong&gt; page:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://www.apiman.io/latest/user-guide.html#_plugins&quot;&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2016-01-08/sysadmin-manage-plugins.png&quot; alt=&quot;System Administration&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.apiman.io/blog/images/2016-01-09/available-plugins.png&quot; alt=&quot;Select CORS plugin from the available plugins list&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tab to &lt;strong&gt;Available Plugins&lt;/strong&gt;, select &lt;strong&gt;Install&lt;/strong&gt; for &lt;em&gt;CORS Policy Plugin&lt;/em&gt;, confirm the plugin coordinates, and click &lt;strong&gt;Add Plugin&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;lets-give-it-a-go&quot;&gt;Let&amp;#8217;s give it a go&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the purposes of this blogpost we&amp;#8217;ll contrive a scenario that allows us to demonstrate a variety of the plugin&amp;#8217;s functionality. However, if your precise use-case isn&amp;#8217;t covered here, you should still investigate the settings page, as a raft of configuration options are available that will likely achieve what you need.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Create an &lt;strong&gt;Organization&lt;/strong&gt; called &lt;strong&gt;&lt;em&gt;Foo&lt;/em&gt;&lt;/strong&gt;, then create an &lt;strong&gt;API&lt;/strong&gt; called &lt;strong&gt;&lt;em&gt;Bar&lt;/em&gt;&lt;/strong&gt;. Set your API&amp;#8217;s &lt;strong&gt;Implementation&lt;/strong&gt; URL to be &lt;code&gt;&lt;a href=&quot;http://127.0.0.1:8080/apiman-echo&quot; class=&quot;bare&quot;&gt;http://127.0.0.1:8080/apiman-echo&lt;/a&gt;&lt;/code&gt;, and select &lt;strong&gt;&lt;em&gt;Rest&lt;/em&gt;&lt;/strong&gt; as the type. Move to the &lt;strong&gt;Plans&lt;/strong&gt; tab and tick &lt;strong&gt;&lt;em&gt;Make this API public&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, move to the &lt;strong&gt;Policies&lt;/strong&gt; tab, click &lt;strong&gt;&lt;em&gt;Add Policy&lt;/em&gt;&lt;/strong&gt; and select &lt;strong&gt;&lt;em&gt;CORS Policy&lt;/em&gt;&lt;/strong&gt; from the dropdown list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;plugin-settings&quot;&gt;Plugin settings&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s configure the settings as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 55%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Option&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Value(s)&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Explanation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Terminate on CORS error&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ll not hit the backend if there&amp;#8217;s a CORS validation error. In some instances, a non-preflighted CORS request would otherwise cause a real invocation of the API whose results would be ignored by the user agent.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Access-Control-Allow-Origin&quot;&gt;Access-Control-Allow-Origin&lt;/a&gt;&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&quot;http://newcastle.local&quot; class=&quot;bare&quot;&gt;http://newcastle.local&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re going to use cURL to simulate a CORS request from this allowed origin.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Access-Control-Expose-Headers&quot;&gt;Access-Control-Expose-Headers&lt;/a&gt;&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Response-Counter&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default CORS will only allow a set of &lt;a href=&quot;https://www.w3.org/TR/cors/#simple-header&quot;&gt;simple headers&lt;/a&gt; to be exposed in a &lt;em&gt;response&lt;/em&gt; to the user agent, so we&amp;#8217;ll set this additional one we want to see.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Access-Control-Allow-Headers&quot;&gt;Access-Control-Allow-Headers&lt;/a&gt;&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;X-APIMAN-EXCELLENT&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default CORS only allows &lt;em&gt;requests&lt;/em&gt; to include a set of basic headers, and we want our API to be able to see the value of our &lt;em&gt;X-APIMAN-EXCELLENT&lt;/em&gt; header, so we specify it as allowed here.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Access-Control-Allow-Methods&quot;&gt;Access-Control-Allow-Methods&lt;/a&gt;&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;TRACE&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, only &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt; are allowed verbs. We want to use &lt;code&gt;TRACE&lt;/code&gt;, so we add it to the list.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Access-Control-Max-Age&quot;&gt;Access-Control-Max-Age&lt;/a&gt;&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;9001&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How long the browser should cache your CORS policy for (to avoid repeated preflight requests).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After saving you&amp;#8217;ll see it&amp;#8217;s description says something along the lines of:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Cross-origin requests from  1  origin(s) will be permitted upon satisfying method, header and credential constraints.  Denied requests will be terminated.  Preflight requests will be cached for 9001 delta seconds.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Assuming you&amp;#8217;ve saved everything, hit &lt;strong&gt;Publish&lt;/strong&gt; and we&amp;#8217;ll be ready to test.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;access-control-to-major-tom&quot;&gt;Access Control to Major Tom&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Generally, it&amp;#8217;s the job of the user agent to set the &lt;code&gt;Origin&lt;/code&gt; header, such as a browser or mobile client. However, we&amp;#8217;ll be using cURL to simulate a variety of scenarios so we can test things out without actually needing to set up a load of different domains.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;unwelcome-guests&quot;&gt;Unwelcome guests&lt;/h4&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;no-ticket-to-fly&quot;&gt;No ticket to fly&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In our first example, we&amp;#8217;ll set an &lt;code&gt;Origin&lt;/code&gt; that we didn&amp;#8217;t permit:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;curl -k -v -H 'Origin: http://panacalty.local' https://127.0.0.1:8443/apiman-gateway/Foo/Bar/1.0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s what comes back:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;{
   &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;CORS: Origin not permitted.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
   &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : {
      &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Access-Control-Expose-Headers&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Response-Counter&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
   },
   &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;responseCode&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;integer&quot;&gt;400&lt;/span&gt;,
   &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Authorization&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
   &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;failureCode&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;integer&quot;&gt;400&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that we were given the thumbs down without the API ever being hit; for most use cases this is a good thing, as it avoids unnecessary load on a API where the user agent is going to throw away the response anyway.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;not-got-the-header-for-it&quot;&gt;Not got the head(er) for it&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even if our origin is correct, we need to pass other checks, such as headers. In this preflighted example, we&amp;#8217;ll try to make a request with a header that we&amp;#8217;ve not allowed: &lt;code&gt;X-SECRET&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;curl -X OPTIONS -k -v -H 'Origin: http://newcastle.local' -H 'Access-Control-Request-Headers: X-SECRET' 'Access-Control-Request-Method: TRACE' https://127.0.0.1:8443/apiman-gateway/Foo/Bar/1.0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Correctly, CORS turned the preflight request down:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;{
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Authorization&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;failureCode&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;400&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;responseCode&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;400&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;CORS: Requested header not allowed&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
        &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Access-Control-Max-Age&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;9001&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The same goes for Request-Method (verb), and of course, whether the CORS request itself is valid.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;playing-by-the-rules&quot;&gt;Playing by the rules&lt;/h4&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
When &lt;code&gt;Host&lt;/code&gt; and &lt;code&gt;Origin&lt;/code&gt; are equal, a request will automatically be allowed, as it is a &lt;em&gt;non-CORS&lt;/em&gt; request. Some browsers still make the superfluous CORS requests anyway.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;keep-it-simple&quot;&gt;Keep it simple&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s set up a request that finally is playing by the parameters we configured earlier:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;curl -X GET -k -v -H 'Origin: http://newcastle.local' https://127.0.0.1:8443/apiman-gateway/Foo/Bar/1.0
&amp;gt; GET /apiman-gateway/Foo/Bar/1.0 HTTP/1.1
&amp;gt; User-Agent: curl/7.37.1
&amp;gt; Host: 127.0.0.1:8443
&amp;gt; Accept: */*
&amp;gt; Origin: http://newcastle.local
&amp;gt;
&amp;lt; HTTP/1.1 200 OK
&amp;lt; X-Powered-By: Undertow/1
&amp;lt; Server: WildFly/8
&amp;lt; Access-Control-Expose-Headers: Response-Counter
&amp;lt; Response-Counter: 1
&amp;lt; Date: Sat, 13 Jun 2015 16:06:32 GMT
&amp;lt; Connection: keep-alive
&amp;lt; Access-Control-Allow-Origin: http://newcastle.local
&amp;lt; Content-Type: application/json
&amp;lt; Content-Length: 345
&amp;lt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It works: excellent! Here&amp;#8217;s our response body:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;{
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/apiman-echo&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/apiman-echo&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : {
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;127.0.0.1:8080&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;User-Agent&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;curl/7.37.1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;*/*&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;keep-alive&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Cache-Control&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;no-cache&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Pragma&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;no-cache&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can see that the &lt;code&gt;Response-Counter&lt;/code&gt; header is in our list of headers that can be exposed. If we were building a Javascript XHR then the browser would allow you to see the &lt;code&gt;Response-Counter&lt;/code&gt; but not other non-standard fields such as &lt;code&gt;X-Powered-By&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;preflight-checks&quot;&gt;Preflight checks&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s do something a bit more complex that requires a &lt;strong&gt;preflight request&lt;/strong&gt;, which is essentially a pre-check to see whether our request is acceptable before attempting it for real. We&amp;#8217;ll set the headers &lt;code&gt;Access-Control-Request-Method&lt;/code&gt; to &lt;code&gt;PATCH&lt;/code&gt; and &lt;code&gt;Access-Control-Request-Headers&lt;/code&gt; to &lt;code&gt;X-APIMAN-EXCELLENT&lt;/code&gt;. Again, we&amp;#8217;re using a permitted origin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To simulate it using cURL, let&amp;#8217;s do:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;curl -X OPTIONS -k -v -H 'Origin: http://newcastle.local' -H 'Access-Control-Request-Method: PATCH' -H 'Access-Control-Request-Headers: X-APIMAN-EXCELLENT' https://127.0.0.1:8443/apiman-gateway/Foo/Bar/1.0
&amp;gt; OPTIONS /apiman-gateway/Foo/Bar/1.0 HTTP/1.1
&amp;gt; User-Agent: curl/7.37.1
&amp;gt; Host: 127.0.0.1:8443
&amp;gt; Accept: */*
&amp;gt; Origin: http://newcastle.local
&amp;gt; Access-Control-Request-Method: PATCH
&amp;gt; Access-Control-Request-Headers: X-APIMAN-EXCELLENT
&amp;gt;
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Access-Control-Allow-Headers: X-APIMAN-EXCELLENT
&amp;lt; Access-Control-Expose-Headers: Response-Counter
&amp;lt; Access-Control-Allow-Origin: http://newcastle.local
&amp;lt; Access-Control-Max-Age: 9001
&amp;lt; Access-Control-Allow-Methods: PATCH
&amp;lt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;liftoff&quot;&gt;Liftoff&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, the plugin gave us permission to continue on and make our real request with that origin, header and verb. In the real world, the browser would go ahead and do exactly that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the preflight requests never go through to the API itself, they are CORS specific and the response is generated on the gateway by the CORS policy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;in-conclusion&quot;&gt;In conclusion&amp;#8230;&amp;#8203;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We built up a CORS configuration and tested out its functionality. Thankfully, it was pretty easy!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. For simplicity&amp;#8217;s sake, I suggest using the instructions in the &lt;em&gt;'Or simply try this&amp;#8230;&amp;#8203;'&lt;/em&gt; box
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt;. If you used the quickstart, the defaults are U: admin P: admin123!
&lt;/div&gt;
&lt;/div&gt;</description><category term="security" /><category term="plugin" /><category term="policy" /><category term="cors" /><category term="1.2.x" /><pubDate>Fri, 22 Jan 2016 12:00:00 +0000</pubDate>
				<link>https://apiman.io/blog/security/plugin/policy/cors/1.2.x/2016/01/22/cors-redux.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/security/plugin/policy/cors/1.2.x/2016/01/22/cors-redux.html</guid>
			</item><item>
				<title>Finally!  Apiman 1.2.1.Final is released!</title><dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author><description>&lt;p&gt;It‚Äôs been ages since apiman had a new release!  Well the reason for that is we‚Äôve been
pushing to get the first version of &lt;em&gt;1.2.x&lt;/em&gt; out the door.  I‚Äôm here to tell you - that
day has finally arrived.&lt;/p&gt;

&lt;p&gt;We‚Äôre happy to announce apiman &lt;em&gt;1.2.1.Final&lt;/em&gt;.  Our goal is now to go back to our previous,
more frequent, release schedule.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;where-can-i-find-more-information&quot;&gt;Where can I find more information?&lt;/h2&gt;

&lt;p&gt;We‚Äôve updated the website, the guides, and other collateral information to reflect all
of the additions and changes in the new version.  For more information about this latest
release of apiman, here are some useful links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://red.ht/1OK3LG7&quot;&gt;1.2.0.Final Release Notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://red.ht/1OC1Tf7&quot;&gt;1.2.1.Final Release Notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apiman.io/&quot;&gt;The apiman project site&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apiman.io/latest/user-guide.html&quot;&gt;Latest User Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;but-i-dont-like-following-links&quot;&gt;But I don‚Äôt like following links!&lt;/h2&gt;

&lt;p&gt;Don‚Äôt want to slog through the links above?  I totally understand - let me give you a quick
high level overview of what‚Äôs new in 1.2 (rhyming ftw).&lt;/p&gt;

&lt;p&gt;You should probably expect to see more detailed blog posts and documentation for each of the
following, so stay tuned!&lt;/p&gt;

&lt;h3 id=&quot;entity-renaming&quot;&gt;Entity Renaming&lt;/h3&gt;

&lt;p&gt;I suspect this will become a separate blog post, because it probably needs repeating.  After
getting feedback from users, it has become clear that the names of the apiman entities/objects
aren‚Äôt very intuitive.  The &lt;em&gt;1.1.x&lt;/em&gt; version of apiman used the following names:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Organization&lt;/li&gt;
  &lt;li&gt;Plan&lt;/li&gt;
  &lt;li&gt;Service&lt;/li&gt;
  &lt;li&gt;Application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the new version of apiman, we made some changes to try and make things a bit more clear.
It turns out that the first two concepts are clear enough, but Service and Application are
a little bit ambiguous.  So the new names in apiman &lt;em&gt;1.2.x&lt;/em&gt; are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Organization&lt;/li&gt;
  &lt;li&gt;Plan&lt;/li&gt;
  &lt;li&gt;API&lt;/li&gt;
  &lt;li&gt;Client App  (aka Client)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Functionally everything works the same, it‚Äôs just the names that have changed.  It‚Äôs worth
pointing out that the renaming isn‚Äôt just superficial (e.g. text in the UI).  Instead, we 
refactored all of the code and the REST endpoints to reflect these new concepts.&lt;/p&gt;

&lt;h3 id=&quot;plugin-support&quot;&gt;Plugin Support&lt;/h3&gt;

&lt;p&gt;We already had interesting support for plugins, but now we‚Äôve gone further and made it much
easier to find, install, test, and upgrade apiman plugins.  There‚Äôs a new Administration UI
where you can see a list of available plugins and easily install them.  If you are creating
your own plugin you can easily reload and/or uninstall plugins to make it easier to test your
changes.  And finally, if your plugin version ends with &lt;em&gt;-SNAPSHOT&lt;/em&gt; then apiman will 
automatically reload the plugin every time it is used.  This makes it VERY easy to iterate on
the plugin code and see the results quickly, without doing anything in the UI and without
restarting apiman!&lt;/p&gt;

&lt;h3 id=&quot;importexport&quot;&gt;Import/Export&lt;/h3&gt;

&lt;p&gt;One of the really nice new features in &lt;em&gt;1.2.x&lt;/em&gt; is the ability to export your apiman configuration
to a file, which can later be imported into a different apiman system.  This feature is
designed to satisfy the following use-cases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Backing up your apiman data&lt;/li&gt;
  &lt;li&gt;Migrating apiman data from a &lt;em&gt;Test&lt;/em&gt; environment to a &lt;em&gt;Production&lt;/em&gt; environment&lt;/li&gt;
  &lt;li&gt;Upgrading to a newer version of apiman&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We‚Äôll follow up this blog post with one that goes into this feature in more depth.&lt;/p&gt;

&lt;h2 id=&quot;what-happened-to-120final&quot;&gt;What happened to 1.2.0.Final?&lt;/h2&gt;

&lt;p&gt;You know what, don‚Äôt even worry about it.&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description><category term="apiman" /><pubDate>Fri, 22 Jan 2016 11:30:00 +0000</pubDate>
				<link>https://apiman.io/blog/apiman/2016/01/22/release-1.2.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/apiman/2016/01/22/release-1.2.html</guid>
			</item><item>
				<title>The More You Know: apiman micro-services?</title><dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author><description>&lt;p&gt;Let‚Äôs spend a little bit of time learning more about one of the newer ways you
can run apiman:  as a set of micro-services.&lt;/p&gt;

&lt;p&gt;Running apiman in this way has several advantages, including (but not limited to):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fast startup time&lt;/li&gt;
  &lt;li&gt;Fully decoupled&lt;/li&gt;
  &lt;li&gt;Easily debuggable from an IDE&lt;/li&gt;
  &lt;li&gt;Quick to test different configurations&lt;/li&gt;
  &lt;li&gt;Independently scale (esp. via fabric8/openshift/kubernetes)&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;p&gt;On the other hand, breaking everything apart has some disadvantages as well.
Some of these include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Need to fire up multiple, separate Java processes&lt;/li&gt;
  &lt;li&gt;No authentication integration with Keycloak out of the box&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-are-they&quot;&gt;What are they?&lt;/h2&gt;
&lt;p&gt;What do we mean by ‚Äúapiman micro-services‚Äù?  Well, by default if you download 
apiman from the &lt;a href=&quot;https://apiman.io/&quot;&gt;project site&lt;/a&gt;, you‚Äôll get everything delivered
to you in one convenient package.  This package extracts into an existing WildFly
installation, and thus everything runs as a web application within the application
server.  This is very convenient to evaluate the software, but it‚Äôs not ideal for
development or for dockerizing.&lt;/p&gt;

&lt;p&gt;In addition to our support for WildFly and EAP, we also now support simply running
the various components of apiman as standalone Java applications.  You can find 
the specific source modules that provide this functionality here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apiman/apiman/tree/master/manager/api/micro&quot;&gt;API Manager Micro-Service (source)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apiman/apiman/tree/master/gateway/platforms/war/micro&quot;&gt;API Gateway Micro-Service (source)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These two modules provide Java classes which use an embedded version of Jetty to 
start up the API Manager and API Gateway as simple standalone Java processes.  Each
micro-service includes a Starter class with a Java main method.  Both micro-services
are designed to be easily extensible/customizable to fit whatever purpose or 
configuration is desired.&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-use-them&quot;&gt;How do I use them?&lt;/h2&gt;
&lt;p&gt;As I mentioned, the micro-services are intended to be extended and customized.  So
you could create a new maven project and add the specific apiman micro service
module as a dependency and then‚Ä¶.&lt;/p&gt;

&lt;p&gt;OK I probably lost you already.  It‚Äôs actually not very hard, so here‚Äôs a whole
github repository full of examples:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apiman/apiman-servers&quot;&gt;https://github.com/apiman/apiman-servers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each of the modules in there is a very simple pre-baked and configured micro-service
based on what apiman provides.  So for example, if you want to run an Elasticsearch
version of the API Gateway along with a Postgres version of the API Manager, you 
could follow these two sets of directions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apiman/apiman-servers/blob/master/gateway-es/README.md&quot;&gt;API Gateway micro-service with Elastic&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apiman/apiman-servers/blob/master/manager-postgres/README.md&quot;&gt;API Manager micro-service with Postgres&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you run both of these at the same time, you will end up with two entirely separate
Java processes running embedded Jetty and listening on different ports.&lt;/p&gt;

&lt;h2 id=&quot;what-about-the-api-manager-ui&quot;&gt;What about the API Manager UI?&lt;/h2&gt;
&lt;p&gt;There are two ways you can access the API Manager User Interface.  The first is that
it‚Äôs built into the API Manager micro-service!  Once you have the Manager micro-service
running, you should be able to go here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://localhost:8080/apimanui/&quot;&gt;http://localhost:8080/apimanui/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;using-gulp-development-only&quot;&gt;Using gulp (development only)&lt;/h3&gt;
&lt;p&gt;If you‚Äôre looking to use the micro-services to make it easier to do development
work on apiman, then you might find yourself needing to modify the User Interface.
You can do this by running ‚Äúgulp‚Äù in the UI module of the apiman source tree:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/git/apiman/manager/ui/hawtio/
ewittman@falcon ~/git/apiman/apiman/manager/ui/hawtio
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gulp
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29] Using gulpfile ~/git/apiman/apiman/manager/ui/hawtio/gulpfile.js
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29] Starting &lt;span class=&quot;s1&quot;&gt;'default'&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29] Starting &lt;span class=&quot;s1&quot;&gt;'build'&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29] Starting &lt;span class=&quot;s1&quot;&gt;'browserify'&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29] Starting &lt;span class=&quot;s1&quot;&gt;'css'&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29] Starting &lt;span class=&quot;s1&quot;&gt;'fonts'&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29] Starting &lt;span class=&quot;s1&quot;&gt;'images'&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29] Finished &lt;span class=&quot;s1&quot;&gt;'build'&lt;/span&gt; after 58 ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29] Starting &lt;span class=&quot;s1&quot;&gt;'watch'&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29] Finished &lt;span class=&quot;s1&quot;&gt;'watch'&lt;/span&gt; after 10 ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29] Starting &lt;span class=&quot;s1&quot;&gt;'connect'&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29] Finished &lt;span class=&quot;s1&quot;&gt;'connect'&lt;/span&gt; after 49 ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29] Finished &lt;span class=&quot;s1&quot;&gt;'default'&lt;/span&gt; after 126 ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29] Server started http://localhost:2772
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:30] Finished &lt;span class=&quot;s1&quot;&gt;'css'&lt;/span&gt; after 589 ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:37] Finished &lt;span class=&quot;s1&quot;&gt;'images'&lt;/span&gt; after 7.49 s
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:41] Finished &lt;span class=&quot;s1&quot;&gt;'fonts'&lt;/span&gt; after 12 s
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:41] Finished &lt;span class=&quot;s1&quot;&gt;'browserify'&lt;/span&gt; after 12 s
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:41] Starting &lt;span class=&quot;s1&quot;&gt;'path-adjust'&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:41] Finished &lt;span class=&quot;s1&quot;&gt;'path-adjust'&lt;/span&gt; after 38 ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:41] Starting &lt;span class=&quot;s1&quot;&gt;'clean-defs'&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:41] Finished &lt;span class=&quot;s1&quot;&gt;'clean-defs'&lt;/span&gt; after 7.87 ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:41] Starting &lt;span class=&quot;s1&quot;&gt;'tsc'&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:45] Finished &lt;span class=&quot;s1&quot;&gt;'tsc'&lt;/span&gt; after 4.19 s
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:45] Starting &lt;span class=&quot;s1&quot;&gt;'template'&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:45] Finished &lt;span class=&quot;s1&quot;&gt;'template'&lt;/span&gt; after 132 ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:45] Starting &lt;span class=&quot;s1&quot;&gt;'concat'&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:45] Finished &lt;span class=&quot;s1&quot;&gt;'concat'&lt;/span&gt; after 72 ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:45] Starting &lt;span class=&quot;s1&quot;&gt;'clean'&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:45] Finished &lt;span class=&quot;s1&quot;&gt;'clean'&lt;/span&gt; after 8.82 ms&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once you have the API Manager micro-service &lt;em&gt;and&lt;/em&gt; gulp running, you should be
able to access the UI by going here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://localhost:2772/api-manager&quot;&gt;http://localhost:2772/api-manager&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;warning-authentication&quot;&gt;Warning: Authentication&lt;/h2&gt;
&lt;p&gt;At the moment, the biggest problem with the micro-services is the issue of user
authentication.  Currently, only very simple BASIC authentication is supported.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It‚Äôs always tricky talking about authentication with apiman - but in this context
I‚Äôm referring to authenticating into the apiman UI and REST services.  All of the
authentication related &lt;em&gt;Policies&lt;/em&gt; will work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The micro-services allow you to specify your own users.list file, which should
include the static set of users you wish to allow access.  In the future, we will
be improving the micro-services to support other authentication mechanisms.  Note
that you can do this yourself by overriding this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apiman/apiman/blob/master/gateway/platforms/war/micro/src/main/java/io/apiman/gateway/platforms/war/micro/GatewayMicroService.java#L319-L332&quot;&gt;Gateway Micro-Service Authentication Handler+Filter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apiman/apiman/blob/master/manager/api/micro/src/main/java/io/apiman/manager/api/micro/ManagerApiMicroService.java#L192-L211&quot;&gt;Manager Micro-Service Authentication Handler+Filter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good luck and come find us on the mailing list or IRC if you have any trouble!&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description><category term="micro-services" /><category term="development" /><pubDate>Thu, 12 Nov 2015 13:30:00 +0000</pubDate>
				<link>https://apiman.io/blog/micro-services/development/2015/11/12/micro-services.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/micro-services/development/2015/11/12/micro-services.html</guid>
			</item><item>
				<title>apiman Limiting Policies</title><dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author><description>&lt;p&gt;In this, the sixth article in the series on apiman, JBoss‚Äô new API Management framework, we‚Äôll examine how apiman enables you to govern access to managed services through the use of rate limiting policies.&lt;/p&gt;

&lt;p&gt;The runtime core of apiman is the API Gateway and the policies that it applies to incoming requests to services. apiman is configured out of the box with a variety of policies that can be used to govern access to services managed by the API Gateway based on IP address, user authentication, and usage levels. From its first release, apiman has supported rate limiting policies, where the upper limit for use of a service could be governed by a policy. In its new 1.1.6 release, apiman has expanded this support to include quota based limiting policies.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;types-of-limiting-policies&quot;&gt;Types of Limiting Policies&lt;/h2&gt;

&lt;p&gt;As of release 1.1.6, apiman supports these types of limiting policies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rate Limiting - This policy type governs the number of times requests are made to a service within a specified time period. The requests can be filtered by user, application, or service and can set the level of granularity for the time period to second, minute, hour, day, month, or year. The intended use of this policy type is for fine grained processing (e.g., 10 requests per second).&lt;/li&gt;
  &lt;li&gt;Quota - This policy type performs the same basic functionality as the Rate Limiting policy type., however, the intended use of this policy type is for less fine grained processing (e.g., 10,000 requests per month).&lt;/li&gt;
  &lt;li&gt;Transfer Quota - In contrast to the other policy types, Transfer Quota tracks the number of bytes transferred (either uploaded or downloaded) rather than the total number of requests made.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these policies, if used singly, can be effective in throttling requests. apiman, however, adds an additional layer of flexibility to your use of these policy types by enabling you to use them in combinations. Let‚Äôs look at a few examples.&lt;/p&gt;

&lt;h2 id=&quot;combinations-of-limiting-policies--flexibility&quot;&gt;Combinations of Limiting Policies = Flexibility&lt;/h2&gt;

&lt;p&gt;Limiting the total number of service requests within a period of time, is a straightforward task as this can be configured in a quota policy. This policy, however, may not have the desired effect as the quota may be reached early in the defined time period. If this happens, the requests made to the service during the remainder of the time period will be blocked by the policy. A better way to deal with a situation like this is to implement a more flexible approach where the monthly quota policy is combined with a fine grained rate limiting policy that will act as a throttle on the traffic.&lt;/p&gt;

&lt;p&gt;To illustrate, there are about 2.5 million seconds in a month. If we want to set the service request quota for a month to .5 million, then we can also set a rate limit policy to a limit of 5 requests per second to ensure that service requests are throttled and the service can be accessed throughout the entire month.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a visual view of a rate limiting policy based on a time period of one week. If we define a weekly quota, there is no guarantee that users will not consume that quota before the week is over. This will result in a service requests being denied at the end of the week:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-08-17/rate_limit1.png&quot; alt=&quot;rate limit coarse grain&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In contrast, if we augment the weekly quota with a more fine grained policy, we can maintain the service‚Äôs ability to respond to requests throughout the week:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-08-17/rate_limit2.png&quot; alt=&quot;rate limit fine grain&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The ability to throttle service requests based on service request counts and bytes transferred provides even greater flexibility in implementing policies. Services that transfer larger amounts of data, but rely on fewer service requests can have that data transfer throttled on a per byte basis. For example, a service that is data intensive, will return a large amount of data in response to each service request. The service may only receive a request a few hundreds of times a day, but each request may result in several megabytes of data being transferred. Let‚Äôs say that we want to limit the amount of data transferred to 6GB per hour. For this type of service, we could set a rate limiting policy to allow for one request per minute, and then augment that policy with a transfer quota policy of 100Mb per hour.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;When you configure limiting policies with apiman, it‚Äôs important to remember that the limits you set can not only function as hard limits for service requests, they can also be used to throttle service request. This throttling gives you the flexibility to control the level of incoming service requests over a period of time that you designate in the policies without blocking all incoming service requests. The flexibility that apiman provides you in configuring limiting policies is further enhanced by its support for you to create combinations of limiting policies. These combined policies work together to give you both coarse grained and fine grained control over incoming service requests.&lt;/p&gt;

&lt;h2 id=&quot;author-acknowledgements&quot;&gt;Author Acknowledgements&lt;/h2&gt;

&lt;p&gt;As always, the author would like to acknowledge Eric Wittmann, and the apiman team for their review comments and suggestions on writing this article!&lt;/p&gt;
</description><category term="policies" /><pubDate>Mon, 17 Aug 2015 11:00:00 +0000</pubDate>
				<link>https://apiman.io/blog/policies/2015/08/17/limiting-policies.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/policies/2015/08/17/limiting-policies.html</guid>
			</item><item>
				<title>apiman Limiting Policies</title><dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author><description>&lt;p&gt;In this, the sixth article in the series on apiman, JBoss‚Äô new API Management framework, we‚Äôll examine how apiman enables you to govern access to managed APIs through the use of rate limiting policies.&lt;/p&gt;

&lt;p&gt;The runtime core of apiman is the API Gateway and the policies that it applies to incoming requests to APIs. apiman is configured out of the box with a variety of policies that can be used to govern access to APIs managed by the API Gateway based on IP address, user authentication, and usage levels. From its first release, apiman has supported rate limiting policies, where the upper limit for use of an API could be governed by a policy. In its new 1.1.6 release, apiman has expanded this support to include quota based limiting policies.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;types-of-limiting-policies&quot;&gt;Types of Limiting Policies&lt;/h2&gt;

&lt;p&gt;As of release 1.1.6, apiman supports these types of limiting policies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rate Limiting - This policy type governs the number of times requests are made to an API within a specified time period. The requests can be filtered by user, client app, or API and can set the level of granularity for the time period to second, minute, hour, day, month, or year. The intended use of this policy type is for fine grained processing (e.g., 10 requests per second).&lt;/li&gt;
  &lt;li&gt;Quota - This policy type performs the same basic functionality as the Rate Limiting policy type., however, the intended use of this policy type is for less fine grained processing (e.g., 10,000 requests per month).&lt;/li&gt;
  &lt;li&gt;Transfer Quota - In contrast to the other policy types, Transfer Quota tracks the number of bytes transferred (either uploaded or downloaded) rather than the total number of requests made.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these policies, if used singly, can be effective in throttling requests. apiman, however, adds an additional layer of flexibility to your use of these policy types by enabling you to use them in combinations. Let‚Äôs look at a few examples.&lt;/p&gt;

&lt;h2 id=&quot;combinations-of-limiting-policies--flexibility&quot;&gt;Combinations of Limiting Policies = Flexibility&lt;/h2&gt;

&lt;p&gt;Limiting the total number of API requests within a period of time, is a straightforward task as this can be configured in a quota policy. This policy, however, may not have the desired effect as the quota may be reached early in the defined time period. If this happens, the requests made to the API during the remainder of the time period will be blocked by the policy. A better way to deal with a situation like this is to implement a more flexible approach where the monthly quota policy is combined with a fine grained rate limiting policy that will act as a throttle on the traffic.&lt;/p&gt;

&lt;p&gt;To illustrate, there are about 2.5 million seconds in a month. If we want to set the API request quota for a month to .5 million, then we can also set a rate limit policy to a limit of 5 requests per second to ensure that API requests are throttled and the API can be accessed throughout the entire month.&lt;/p&gt;

&lt;p&gt;Here‚Äôs a visual view of a rate limiting policy based on a time period of one week. If we define a weekly quota, there is no guarantee that users will not consume that quota before the week is over. This will result in an API requests being denied at the end of the week:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-08-17/rate_limit1-redux.png&quot; alt=&quot;rate limit coarse grain&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In contrast, if we augment the weekly quota with a more fine grained policy, we can maintain the API‚Äôs ability to respond to requests throughout the week:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-08-17/rate_limit2-redux.png&quot; alt=&quot;rate limit fine grain&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The ability to throttle API requests based on API request counts and bytes transferred provides even greater flexibility in implementing policies. APIs that transfer larger amounts of data, but rely on fewer API requests can have that data transfer throttled on a per byte basis. For example, an API that is data intensive, will return a large amount of data in response to each API request. The API may only receive a request a few hundreds of times a day, but each request may result in several megabytes of data being transferred. Let‚Äôs say that we want to limit the amount of data transferred to 6GB per hour. For this type of API, we could set a rate limiting policy to allow for one request per minute, and then augment that policy with a transfer quota policy of 100Mb per hour.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;When you configure limiting policies with apiman, it‚Äôs important to remember that the limits you set can not only function as hard limits for API requests, they can also be used to throttle API requests. This throttling gives you the flexibility to control the level of incoming API requests over a period of time that you designate in the policies without blocking all incoming API requests. The flexibility that apiman provides you in configuring limiting policies is further enhanced by its support for you to create combinations of limiting policies. These combined policies work together to give you both coarse grained and fine grained control over incoming API requests.&lt;/p&gt;

&lt;h2 id=&quot;author-acknowledgements&quot;&gt;Author Acknowledgements&lt;/h2&gt;

&lt;p&gt;As always, the author would like to acknowledge Eric Wittmann, and the apiman team for their review comments and suggestions on writing this article!&lt;/p&gt;
</description><category term="policies" /><pubDate>Mon, 17 Aug 2015 11:00:00 +0000</pubDate>
				<link>https://apiman.io/blog/policies/2015/08/17/limiting-policies-redux.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/policies/2015/08/17/limiting-policies-redux.html</guid>
			</item><item>
				<title>apiman Policy and Endpoint Security</title><dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author><description>&lt;p&gt;In this, the fifth article in the series on apiman, JBoss‚Äô new API Management framework, we‚Äôll examine how apiman enables you to provide security for your managed services at the policy level, and and at the endpoint level for its managed and unmanaged endpoints.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;unintentionally-insecure&quot;&gt;Unintentionally Insecure?&lt;/h2&gt;

&lt;p&gt;If you read the first article in this series closely (https://dzone.com/articles/impatient-new-users) you might have noticed that in the course of creating a service whose endpoint was managed by the apiman API Gateway, we also inadvertently left that service in a very insecure state as unauthorized client applications could bypass the gateway and access the service directly.  We discussed how to configure authentication in a policy for the managed service endpoint in the most recent post in this series (https://dzone.com/articles/adding-basic-authentication). This authentication policy provides username/password security for clients as they access the managed service through the API Gateway, but it does not protect the service from unauthorized access attempts that bypass the Gateway completely. To make the service secure from unauthorized client applications, endpoint level security should also be configured.&lt;/p&gt;

&lt;p&gt;In this article, we‚Äôll examine both apiman policy level and endpoint level security, how they compare, and how they differ.&lt;/p&gt;

&lt;h2 id=&quot;complementary-types-of-security-provided-by-apiman&quot;&gt;Complementary Types of Security Provided by apiman&lt;/h2&gt;

&lt;p&gt;The best way to start our discussion of the different, but complementary types of security that we‚Äôll examine in this article is with a diagram. The nodes involved are the client applications that will access our services, the apiman API Gateway, and the servers that host our services:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-08-03/apiman_security.png&quot; alt=&quot;apiman logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs work our way through the diagram from left to right and start by taking a look at Policy Level Security.&lt;/p&gt;

&lt;h2 id=&quot;policy-level-security&quot;&gt;Policy Level Security&lt;/h2&gt;

&lt;p&gt;apiman includes several pre-defined policies OOTB. The policies provide support for controlling access to services based on the rate at which the services are invoked, the IP address of the client applications that access the services, authorization, and authentication. In the most recent article in this series, we showed how to configure an authentication policy. To keep things simple, we chose BASIC authentication. This BASIC Authentication policy provides security for the communication channel between the client applications and the apiman API Gateway. An incoming request to the API Gateway from a client initiates the policy chain, the policy is applied and the client is requested to supply a username and password.  The level of security provided by this policy can be enhanced if the policy is configured with SSL encryption.&lt;/p&gt;

&lt;p&gt;But, this policy level security only secures the left side of the diagram, that is the communication channel between the applications and the API Gateway. In this communication channel, the applications play the role of the client, and the API Gateway plays the role of the server.&lt;/p&gt;

&lt;p&gt;We also want to secure the right side of the diagram, where the API Gateway plays the role of a client, and the services play the role of the servers.&lt;/p&gt;

&lt;p&gt;(It‚Äôs also worth noting that while policy security protects the managed service, it does nothing to protect the unmanaged service as this service can be reached directly, without going through the API Gateway. This is illustrated by the red line in the diagram. So, while access to the managed service through the apiman API Gateway is secure, policy security does not secure the unmanaged service endpoint.)&lt;/p&gt;

&lt;h2 id=&quot;endpoint-level-security&quot;&gt;Endpoint Level Security&lt;/h2&gt;

&lt;p&gt;In contrast to policy level security, with endpoint security we are securing the right side of the diagram.&lt;/p&gt;

&lt;p&gt;A recent post by Marc Savy to the apiman blog &lt;a href=&quot;https://www.apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/2015/06/16/mtls-mutual-auth.html&quot;&gt;https://www.apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/2015/06/16/mtls-mutual-auth.html&lt;/a&gt; described how to configure Mutually Authenticated TLS (Transport Layer Security) between the API Gateway and the managed services. With Mutual TLS, bi-direction authentication is configured so that the identities of both the client and server are verified before a connection can be made.&lt;/p&gt;

&lt;p&gt;In setting up Mutual TLS, keystores, containing a node‚Äôs private key, and truststores, containing public certificates to govern the other nodes that the node should trust, were created. The API Gateway was configured in its apiman.properties file to reference the keystores and truststores.  The service was configured with mutual authentication by setting the API Security dropdown in the Implementation tab to MTLS/Two-Way-SSL. Finally, the service was programmed with mutual authentication enabled. With Mutual TLS configured, the communication channel on the right side of the diagram, from the API Gateway to the services, was made secure.&lt;/p&gt;

&lt;p&gt;We should also note that, unlike policy security, endpoint security also secures the services from attempts to bypass the API Gateway. With Mutual TLS, a two-way trust pattern is created. The API Gateway trusts the services and the services trust the API Gateway. The services, however, do not trust the client applications. As is shown by the large ‚ÄúX‚Äù character that indicates that an application cannot bypass the API Gateway and access the services directly.&lt;/p&gt;

&lt;p&gt;One last point that is important to remember is that the endpoint level of security applies to all requests made to the services, regardless of whatever policies are configured.&lt;/p&gt;

&lt;h2 id=&quot;compare-and-contrast&quot;&gt;Compare and Contrast&lt;/h2&gt;

&lt;p&gt;To summarize, the differences between policy level security and endpoint level security are:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Policy Level Security&lt;/th&gt;
      &lt;th&gt;End Point Level Security&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Secures communications between the applications (clients) and API Gateway (server)&lt;/td&gt;
      &lt;td&gt;Secures communications between the API Gateway (client) and services (servers)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Configured in an API Gateway policy&lt;/td&gt;
      &lt;td&gt;Configured for the API Gateway as a whole in apiman.properties and with key/certificates infrastructure&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Applied by the policy at runtime&lt;/td&gt;
      &lt;td&gt;Applied for all service requests, regardless of the policies configured for a service&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Does not secure the unmanaged service from access by unauthorized clients&lt;/td&gt;
      &lt;td&gt;Secures the unmanaged service endpoints from access by unauthorized clients&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;author-acknowledgements&quot;&gt;Author Acknowledgements&lt;/h2&gt;

&lt;p&gt;As always, the author would like to acknowledge Marc Savy, Eric Wittmann, and the apiman team for their review comments and suggestions on writing this article!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/2015/06/16/mtls-mutual-auth.html&quot;&gt;https://www.apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/2015/06/16/mtls-mutual-auth.html&lt;/a&gt; (written by Marc Savy)&lt;/li&gt;
  &lt;li&gt;https://dzone.com/articles/adding-basic-authentication&lt;/li&gt;
&lt;/ul&gt;
</description><category term="security" /><pubDate>Mon, 03 Aug 2015 11:00:00 +0000</pubDate>
				<link>https://apiman.io/blog/security/2015/08/03/policy-endpoint-security.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/security/2015/08/03/policy-endpoint-security.html</guid>
			</item><item>
				<title>apiman Policy and Endpoint Security</title><dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author><description>&lt;p&gt;In this, the fifth article in the series on apiman, JBoss‚Äô new API Management framework, we‚Äôll examine how apiman enables you to provide security for your managed APIs at the policy level, and and at the endpoint level for its managed and unmanaged endpoints.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;unintentionally-insecure&quot;&gt;Unintentionally Insecure?&lt;/h2&gt;

&lt;p&gt;If you read the first article in this series closely (https://dzone.com/articles/impatient-new-users) you might have noticed that in the course of creating an API whose endpoint was managed by the apiman API Gateway, we also inadvertently left that API in a very insecure state as unauthorized client apps could bypass the gateway and access the API directly.  We discussed how to configure authentication in a policy for the managed API endpoint in the most recent post in this series (https://dzone.com/articles/adding-basic-authentication). This authentication policy provides username/password security for clients as they access the managed API through the API Gateway, but it does not protect the API from unauthorized access attempts that bypass the Gateway completely. To make the API secure from unauthorized client apps, endpoint level security should also be configured.&lt;/p&gt;

&lt;p&gt;In this article, we‚Äôll examine both apiman policy level and endpoint level security, how they compare, and how they differ.&lt;/p&gt;

&lt;h2 id=&quot;complementary-types-of-security-provided-by-apiman&quot;&gt;Complementary Types of Security Provided by apiman&lt;/h2&gt;

&lt;p&gt;The best way to start our discussion of the different, but complementary types of security that we‚Äôll examine in this article is with a diagram. The nodes involved are the client apps that will access our APIs, the apiman API Gateway, and the servers that host our APIs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-08-03/apiman_security-redux.png&quot; alt=&quot;apiman logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs work our way through the diagram from left to right and start by taking a look at Policy Level Security.&lt;/p&gt;

&lt;h2 id=&quot;policy-level-security&quot;&gt;Policy Level Security&lt;/h2&gt;

&lt;p&gt;apiman includes several pre-defined policies OOTB. The policies provide support for controlling access to APIs based on the rate at which the APIs are invoked, the IP address of the client apps that access the APIs, authorization, and authentication. In the most recent article in this series, we showed how to configure an authentication policy. To keep things simple, we chose BASIC authentication. This BASIC Authentication policy provides security for the communication channel between the client apps and the apiman API Gateway. An incoming request to the API Gateway from a client initiates the policy chain, the policy is applied and the client is requested to supply a username and password.  The level of security provided by this policy can be enhanced if the policy is configured with SSL encryption.&lt;/p&gt;

&lt;p&gt;But, this policy level security only secures the left side of the diagram, that is the communication channel between the client apps and the API Gateway. In this communication channel, the client apps play the role of the client, and the API Gateway plays the role of the server.&lt;/p&gt;

&lt;p&gt;We also want to secure the right side of the diagram, where the API Gateway plays the role of a client, and the APIs play the role of the servers.&lt;/p&gt;

&lt;p&gt;(It‚Äôs also worth noting that while policy security protects the managed API, it does nothing to protect the unmanaged API as this API can be reached directly, without going through the API Gateway. This is illustrated by the red line in the diagram. So, while access to the managed API through the apiman API Gateway is secure, policy security does not secure the unmanaged API endpoint.)&lt;/p&gt;

&lt;h2 id=&quot;endpoint-level-security&quot;&gt;Endpoint Level Security&lt;/h2&gt;

&lt;p&gt;In contrast to policy level security, with endpoint security we are securing the right side of the diagram.&lt;/p&gt;

&lt;p&gt;A recent post by Marc Savy to the apiman blog &lt;a href=&quot;https://www.apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/2015/06/16/mtls-mutual-auth.html&quot;&gt;https://www.apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/2015/06/16/mtls-mutual-auth.html&lt;/a&gt; described how to configure Mutually Authenticated TLS (Transport Layer Security) between the API Gateway and the managed APIs. With Mutual TLS, bi-direction authentication is configured so that the identities of both the client and server are verified before a connection can be made.&lt;/p&gt;

&lt;p&gt;In setting up Mutual TLS, keystores, containing a node‚Äôs private key, and truststores, containing public certificates to govern the other nodes that the node should trust, were created. The API Gateway was configured in its apiman.properties file to reference the keystores and truststores.  The API was configured with mutual authentication by setting the API Security dropdown in the Implementation tab to MTLS/Two-Way-SSL. Finally, the API was programmed with mutual authentication enabled. With Mutual TLS configured, the communication channel on the right side of the diagram, from the API Gateway to the APIs, was made secure.&lt;/p&gt;

&lt;p&gt;We should also note that, unlike policy security, endpoint security also secures the APIs from attempts to bypass the API Gateway. With Mutual TLS, a two-way trust pattern is created. The API Gateway trusts the APIs and the APIs trust the API Gateway. The APIs, however, do not trust the client apps. As is shown by the large ‚ÄúX‚Äù character that indicates that a client app cannot bypass the API Gateway and access the APIs directly.&lt;/p&gt;

&lt;p&gt;One last point that is important to remember is that the endpoint level of security applies to all requests made to the APIs, regardless of whatever policies are configured.&lt;/p&gt;

&lt;h2 id=&quot;compare-and-contrast&quot;&gt;Compare and Contrast&lt;/h2&gt;

&lt;p&gt;To summarize, the differences between policy level security and endpoint level security are:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Policy Level Security&lt;/th&gt;
      &lt;th&gt;End Point Level Security&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Secures communications between the client apps (clients) and API Gateway (server)&lt;/td&gt;
      &lt;td&gt;Secures communications between the API Gateway (client) and APIs (servers)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Configured in an API Gateway policy&lt;/td&gt;
      &lt;td&gt;Configured for the API Gateway as a whole in apiman.properties and with key/certificates infrastructure&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Applied by the policy at runtime&lt;/td&gt;
      &lt;td&gt;Applied for all API requests, regardless of the policies configured for an API&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Does not secure the unmanaged API from access by unauthorized clients&lt;/td&gt;
      &lt;td&gt;Secures the unmanaged API endpoints from access by unauthorized clients&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;author-acknowledgements&quot;&gt;Author Acknowledgements&lt;/h2&gt;

&lt;p&gt;As always, the author would like to acknowledge Marc Savy, Eric Wittmann, and the apiman team for their review comments and suggestions on writing this article!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/2015/06/16/mtls-mutual-auth.html&quot;&gt;https://www.apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/2015/06/16/mtls-mutual-auth.html&lt;/a&gt; (written by Marc Savy)&lt;/li&gt;
  &lt;li&gt;https://dzone.com/articles/adding-basic-authentication&lt;/li&gt;
&lt;/ul&gt;
</description><category term="security" /><pubDate>Mon, 03 Aug 2015 11:00:00 +0000</pubDate>
				<link>https://apiman.io/blog/security/2015/08/03/policy-endpoint-security-redux.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/security/2015/08/03/policy-endpoint-security-redux.html</guid>
			</item><item>
				<title>Plugins - Not Just For Policies Anymore</title><dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author><description>&lt;p&gt;As you may know, apiman has long supported custom policies provided by users.  If you
aren‚Äôt familiar with apiman plugins, you can find more about them by &lt;a href=&quot;https://www.apiman.io/blog/plugins/policies/development/maven/2015/03/06/custom-policies.html&quot;&gt;clicking here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As of version 1.1.5.Final, plugins are now even more useful.  You can provide custom
implementations of various core apiman system components via plugins.  This allows users
to customize apiman easily, without any changes to the classpath and without rebuilding
the core apiman application.&lt;/p&gt;

&lt;p&gt;In this blog post I‚Äôll explain how it works.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;review-what-is-a-plugin&quot;&gt;Review: What is a plugin?&lt;/h2&gt;
&lt;p&gt;First, here are some good resources you can use to learn more about apiman plugins:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apiman.io/blog/plugins/policies/development/maven/2015/03/06/custom-policies.html&quot;&gt;Customizing JBoss apiman Through Policy Plugins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apiman.io/latest/developer-guide.html#_plugins&quot;&gt;apiman Developer Guide: Plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No patience to read those links?  That‚Äôs OK - I‚Äôll give you a quick breakdown.&lt;/p&gt;

&lt;p&gt;An apiman plugin is basically a WAR file with one additional required file.  The additional
file is &lt;code class=&quot;highlighter-rouge&quot;&gt;META-INF/apiman/plugin.json&lt;/code&gt; and it contains some meta-data about the plugin.  An
example of a plugin.json file (from the JSONP policy plugin):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;frameworkVersion&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;JSONP Policy Plugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;This plugin turns an endpoint into a JSONP compatible endpoint.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.1.5.Final&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We chose WAR as the plugin format because it allows all of the file types we need, it
is a well-known structure, and it‚Äôs easy to create (e.g. via maven).&lt;/p&gt;

&lt;p&gt;When contributing a custom apiman component via a plugin, all you need is the &lt;code class=&quot;highlighter-rouge&quot;&gt;plugin.json&lt;/code&gt;
file and the java class file(s) that implement the appropriate component interface.  Of
course, because a plugin is a WAR, you can also include any library dependencies your 
component might need.&lt;/p&gt;

&lt;h2 id=&quot;what-are-these-components-are-you-talking-about&quot;&gt;What are these components are you talking about?&lt;/h2&gt;
&lt;p&gt;apiman is made up of a number of components that work together to accomplish the goal of
API Management.  There are two primary pieces of the apiman story:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;API Manager&lt;/li&gt;
  &lt;li&gt;API Gateway&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these consists of its own components.  For example, the API Manager is made up of
the following (not necessarily an exhaustive list):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Storage Component&lt;/li&gt;
  &lt;li&gt;Query Component&lt;/li&gt;
  &lt;li&gt;IDM Component&lt;/li&gt;
  &lt;li&gt;Metrics Accessor Component (consumes metrics data)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the other hand, the API Gateway consists of a separate set of components, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Configuration Registry&lt;/li&gt;
  &lt;li&gt;Rate Limiting Component&lt;/li&gt;
  &lt;li&gt;Shared State Component&lt;/li&gt;
  &lt;li&gt;Metrics Component (produces metrics data)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, the apiman quickstart uses default values for all of these, resulting in
a stable, working system with the following characteristics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Stores API Manager data in a JDBC database&lt;/li&gt;
  &lt;li&gt;Records and queries metrics data via Elasticsearch&lt;/li&gt;
  &lt;li&gt;Stores Gateway configuration information in Infinispan&lt;/li&gt;
  &lt;li&gt;Uses infinispan to share rate limiting state across gateway nodes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are alternative configurations of apiman that you can use without needing to
resort to plugins.  For example, we provide Elasticsearch implementations of many of
the components mentioned above.  So you could easily switch from Infinispan to ES in
the Gateway, if you wanted.  However, if you wish to provide a custom implementation
of something, plugins are now the way to go!&lt;/p&gt;

&lt;h2 id=&quot;example-scenario&quot;&gt;Example Scenario&lt;/h2&gt;
&lt;p&gt;There is a lot you can do now that we support plugin components.  But it‚Äôs probably
easiest to explain and understand if we take a simple example scenario.&lt;/p&gt;

&lt;h3 id=&quot;use-mongodb-to-store-gateway-configuration-information&quot;&gt;Use mongodb to store Gateway configuration information&lt;/h3&gt;
&lt;p&gt;If you download the apiman quickstart, the default configuration is to use the built
in WildFly 8 infinispan subsystem to store the API Gateway configuration info.  This
includes all services published to the Gateway, and all applications registered with
it as well.  Perhaps you would rather that data be stored in mongodb?  Since we don‚Äôt
have a mongodb implementation of the Gateway Registry, you‚Äôll need to implement it
yourself and bundle it up into a plugin!&lt;/p&gt;

&lt;h3 id=&quot;create-a-apiman-gateway-mongodb-plugin&quot;&gt;Create a apiman-gateway-mongodb plugin&lt;/h3&gt;
&lt;p&gt;I won‚Äôt go through the entire process of creating an apiman plugin here, since it is
already well documented (and linked above).  You‚Äôll need a WAR maven project with a
&lt;code class=&quot;highlighter-rouge&quot;&gt;plugin.json&lt;/code&gt; file in the right place, which might look something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;frameworkVersion&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mongodb plugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;This plugin provides a mongodb implementation of the Gateway registry.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You will also need an implementation of the Gateway‚Äôs &lt;code class=&quot;highlighter-rouge&quot;&gt;io.apiman.gateway.engine.IRegistry&lt;/code&gt;
interface.  Let‚Äôs call it &lt;code class=&quot;highlighter-rouge&quot;&gt;MongoDbRegistry.java&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apiman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.apiman.gateway.engine.async.IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.apiman.gateway.engine.beans.Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.apiman.gateway.engine.beans.Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.apiman.gateway.engine.beans.ServiceContract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.apiman.gateway.engine.beans.ServiceRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * An implementation of the {@link IRegistry} interface using mongodb.
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MongoDbRegistry&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IRegistry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Constructor.
     * @param config
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MongoDbRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * @see io.apiman.gateway.engine.IRegistry#getContract(io.apiman.gateway.engine.beans.ServiceRequest, io.apiman.gateway.engine.async.IAsyncResultHandler)
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getContract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceContract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * @see io.apiman.gateway.engine.IRegistry#publishService(io.apiman.gateway.engine.beans.Service, io.apiman.gateway.engine.async.IAsyncResultHandler)
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;publishService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * @see io.apiman.gateway.engine.IRegistry#retireService(io.apiman.gateway.engine.beans.Service, io.apiman.gateway.engine.async.IAsyncResultHandler)
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;retireService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * @see io.apiman.gateway.engine.IRegistry#registerApplication(io.apiman.gateway.engine.beans.Application, io.apiman.gateway.engine.async.IAsyncResultHandler)
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registerApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * @see io.apiman.gateway.engine.IRegistry#unregisterApplication(io.apiman.gateway.engine.beans.Application, io.apiman.gateway.engine.async.IAsyncResultHandler)
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unregisterApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * @see io.apiman.gateway.engine.IRegistry#getService(java.lang.String, java.lang.String, java.lang.String, io.apiman.gateway.engine.async.IAsyncResultHandler)
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;organizationId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Obviously you will want to include any mongodb client libraries you need, and then
implement the actual functionality of the class.  I leave that as an exercise for the
reader.  Note that most of the Gateway components have asynchronous APIs.  If possible
you should attempt to use asynchronous techniques when providing implementations.&lt;/p&gt;

&lt;h3 id=&quot;switching-to-your-custom-implementation-in-apimanproperties&quot;&gt;Switching to your custom implementation in apiman.properties&lt;/h3&gt;
&lt;p&gt;Now you‚Äôve got a component you want to use, and it‚Äôs all nicely wrapped up in a shiny
new plugin.  Your next step is to actually use it!  Using a custom component is as
simple as referencing it in the &lt;code class=&quot;highlighter-rouge&quot;&gt;apiman.properties&lt;/code&gt; file.  You‚Äôll need to remove
this line first:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;apiman-gateway.registry=io.apiman.gateway.engine.ispn.InfinispanRegistry&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and then add something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;apiman-gateway.registry=plugin:GROUP_ID:ARTIFACT_ID:VERSION/org.example.apiman.gateway.MongoDbRegistry&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The format of the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;apiman-gateway.registry&lt;/code&gt; is very important - when 
using a plugin you must specify the maven information of your plugin so that 
apiman can locate and download it.  See the apiman documentation for additional
details about how plugins are loaded.&lt;/p&gt;

&lt;p&gt;Note that you can also provide configuration parameters to your component.  That
will obviously be helpful since it will probably need connection details.  So 
really your configuration might look something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;apiman-gateway.registry=plugin:GROUP_ID:ARTIFACT_ID:VERSION/org.example.apiman.gateway.MongoDbRegistry
apiman-gateway.registry.mongo.host=localhost
apiman-gateway.registry.mongo.port=27017
apiman-gateway.registry.mongo.username=sa
apiman-gateway.registry.mongo.password=sa123!
apiman-gateway.registry.mongo.database=apiman&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These configuration options will be passed to your component in its constructor if
your class has a &lt;code class=&quot;highlighter-rouge&quot;&gt;Map&amp;lt;String,String&amp;gt;&lt;/code&gt; constructor.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is a powerful new feature for extending and customizing apiman to better suit
your needs.  Of course we will want to continue offering the most popular component
implementations as a core part of apiman.  However there will always be many more
options than we can easily implement and support.  For this reason we wanted to 
provide an easy way for users (and the apiman community at large) to contribute.&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description><category term="api-manager" /><category term="api-gateway" /><category term="plugins" /><category term="development" /><category term="maven" /><pubDate>Fri, 24 Jul 2015 14:10:10 +0000</pubDate>
				<link>https://apiman.io/blog/api-manager/api-gateway/plugins/development/maven/2015/07/24/plugin-components.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/api-manager/api-gateway/plugins/development/maven/2015/07/24/plugin-components.html</guid>
			</item><item>
				<title>Plugins - Not Just For Policies Anymore</title><dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author><description>&lt;p&gt;As you may know, apiman has long supported custom policies provided by users.  If you
aren‚Äôt familiar with apiman plugins, you can find more about them by &lt;a href=&quot;https://www.apiman.io/blog/plugins/policies/development/maven/2015/03/06/custom-policies.html&quot;&gt;clicking here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As of version 1.1.5.Final, plugins are now even more useful.  You can provide custom
implementations of various core apiman system components via plugins.  This allows users
to customize apiman easily, without any changes to the classpath and without rebuilding
the core apiman application.&lt;/p&gt;

&lt;p&gt;In this blog post I‚Äôll explain how it works.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;review-what-is-a-plugin&quot;&gt;Review: What is a plugin?&lt;/h2&gt;
&lt;p&gt;First, here are some good resources you can use to learn more about apiman plugins:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apiman.io/blog/plugins/policies/development/maven/2015/03/06/custom-policies.html&quot;&gt;Customizing JBoss apiman Through Policy Plugins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apiman.io/latest/developer-guide.html#_plugins&quot;&gt;apiman Developer Guide: Plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No patience to read those links?  That‚Äôs OK - I‚Äôll give you a quick breakdown.&lt;/p&gt;

&lt;p&gt;An apiman plugin is basically a WAR file with one additional required file.  The additional
file is &lt;code class=&quot;highlighter-rouge&quot;&gt;META-INF/apiman/plugin.json&lt;/code&gt; and it contains some meta-data about the plugin.  An
example of a plugin.json file (from the JSONP policy plugin):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;frameworkVersion&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;JSONP Policy Plugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;This plugin turns an endpoint into a JSONP compatible endpoint.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.1.5.Final&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We chose WAR as the plugin format because it allows all of the file types we need, it
is a well-known structure, and it‚Äôs easy to create (e.g. via maven).&lt;/p&gt;

&lt;p&gt;When contributing a custom apiman component via a plugin, all you need is the &lt;code class=&quot;highlighter-rouge&quot;&gt;plugin.json&lt;/code&gt;
file and the java class file(s) that implement the appropriate component interface.  Of
course, because a plugin is a WAR, you can also include any library dependencies your 
component might need.&lt;/p&gt;

&lt;h2 id=&quot;what-are-these-components-are-you-talking-about&quot;&gt;What are these components are you talking about?&lt;/h2&gt;
&lt;p&gt;apiman is made up of a number of components that work together to accomplish the goal of
API Management.  There are two primary pieces of the apiman story:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;API Manager&lt;/li&gt;
  &lt;li&gt;API Gateway&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these consists of its own components.  For example, the API Manager is made up of
the following (not necessarily an exhaustive list):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Storage Component&lt;/li&gt;
  &lt;li&gt;Query Component&lt;/li&gt;
  &lt;li&gt;IDM Component&lt;/li&gt;
  &lt;li&gt;Metrics Accessor Component (consumes metrics data)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the other hand, the API Gateway consists of a separate set of components, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Configuration Registry&lt;/li&gt;
  &lt;li&gt;Rate Limiting Component&lt;/li&gt;
  &lt;li&gt;Shared State Component&lt;/li&gt;
  &lt;li&gt;Metrics Component (produces metrics data)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, the apiman quickstart uses default values for all of these, resulting in
a stable, working system with the following characteristics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Stores API Manager data in a JDBC database&lt;/li&gt;
  &lt;li&gt;Records and queries metrics data via Elasticsearch&lt;/li&gt;
  &lt;li&gt;Stores Gateway configuration information in Infinispan&lt;/li&gt;
  &lt;li&gt;Uses infinispan to share rate limiting state across gateway nodes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are alternative configurations of apiman that you can use without needing to
resort to plugins.  For example, we provide Elasticsearch implementations of many of
the components mentioned above.  So you could easily switch from Infinispan to ES in
the Gateway, if you wanted.  However, if you wish to provide a custom implementation
of something, plugins are now the way to go!&lt;/p&gt;

&lt;h2 id=&quot;example-scenario&quot;&gt;Example Scenario&lt;/h2&gt;
&lt;p&gt;There is a lot you can do now that we support plugin components.  But it‚Äôs probably
easiest to explain and understand if we take a simple example scenario.&lt;/p&gt;

&lt;h3 id=&quot;use-mongodb-to-store-gateway-configuration-information&quot;&gt;Use mongodb to store Gateway configuration information&lt;/h3&gt;
&lt;p&gt;If you download the apiman quickstart, the default configuration is to use the built
in WildFly 8 infinispan subsystem to store the API Gateway configuration info.  This
includes all APIs published to the Gateway, and all client apps registered with
it as well.  Perhaps you would rather that data be stored in mongodb?  Since we don‚Äôt
have a mongodb implementation of the Gateway Registry, you‚Äôll need to implement it
yourself and bundle it up into a plugin!&lt;/p&gt;

&lt;h3 id=&quot;create-a-apiman-gateway-mongodb-plugin&quot;&gt;Create a apiman-gateway-mongodb plugin&lt;/h3&gt;
&lt;p&gt;I won‚Äôt go through the entire process of creating an apiman plugin here, since it is
already well documented (and linked above).  You‚Äôll need a WAR maven project with a
&lt;code class=&quot;highlighter-rouge&quot;&gt;plugin.json&lt;/code&gt; file in the right place, which might look something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;frameworkVersion&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mongodb plugin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;This plugin provides a mongodb implementation of the Gateway registry.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You will also need an implementation of the Gateway‚Äôs &lt;code class=&quot;highlighter-rouge&quot;&gt;io.apiman.gateway.engine.IRegistry&lt;/code&gt;
interface.  Let‚Äôs call it &lt;code class=&quot;highlighter-rouge&quot;&gt;MongoDbRegistry.java&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apiman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.apiman.gateway.engine.async.IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.apiman.gateway.engine.beans.ClientApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.apiman.gateway.engine.beans.Api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.apiman.gateway.engine.beans.ApiContract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.apiman.gateway.engine.beans.ApiRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**
 * An implementation of the {@link IRegistry} interface using mongodb.
 */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MongoDbRegistry&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IRegistry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * Constructor.
     * @param config
     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MongoDbRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * @see io.apiman.gateway.engine.IRegistry#getContract(io.apiman.gateway.engine.beans.ApiRequest, io.apiman.gateway.engine.async.IAsyncResultHandler)
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getContract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiContract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * @see io.apiman.gateway.engine.IRegistry#publishApi(io.apiman.gateway.engine.beans.Api, io.apiman.gateway.engine.async.IAsyncResultHandler)
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;publishApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Api&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * @see io.apiman.gateway.engine.IRegistry#retireApi(io.apiman.gateway.engine.beans.Api, io.apiman.gateway.engine.async.IAsyncResultHandler)
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;retireApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Api&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * @see io.apiman.gateway.engine.IRegistry#registerClientApp(io.apiman.gateway.engine.beans.ClientApp, io.apiman.gateway.engine.async.IAsyncResultHandler)
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registerClientApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClientApp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * @see io.apiman.gateway.engine.IRegistry#unregisterClientApp(io.apiman.gateway.engine.beans.ClientApp, io.apiman.gateway.engine.async.IAsyncResultHandler)
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unregisterClientApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClientApp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**
     * @see io.apiman.gateway.engine.IRegistry#getApi(java.lang.String, java.lang.String, java.lang.String, io.apiman.gateway.engine.async.IAsyncResultHandler)
     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;organizationId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apiId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Obviously you will want to include any mongodb client libraries you need, and then
implement the actual functionality of the class.  I leave that as an exercise for the
reader.  Note that most of the Gateway components have asynchronous APIs.  If possible
you should attempt to use asynchronous techniques when providing implementations.&lt;/p&gt;

&lt;h3 id=&quot;switching-to-your-custom-implementation-in-apimanproperties&quot;&gt;Switching to your custom implementation in apiman.properties&lt;/h3&gt;
&lt;p&gt;Now you‚Äôve got a component you want to use, and it‚Äôs all nicely wrapped up in a shiny
new plugin.  Your next step is to actually use it!  Using a custom component is as
simple as referencing it in the &lt;code class=&quot;highlighter-rouge&quot;&gt;apiman.properties&lt;/code&gt; file.  You‚Äôll need to remove
this line first:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;apiman-gateway.registry=io.apiman.gateway.engine.ispn.InfinispanRegistry&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;and then add something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;apiman-gateway.registry=plugin:GROUP_ID:ARTIFACT_ID:VERSION/org.example.apiman.gateway.MongoDbRegistry&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The format of the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;apiman-gateway.registry&lt;/code&gt; is very important - when 
using a plugin you must specify the maven information of your plugin so that 
apiman can locate and download it.  See the apiman documentation for additional
details about how plugins are loaded.&lt;/p&gt;

&lt;p&gt;Note that you can also provide configuration parameters to your component.  That
will obviously be helpful since it will probably need connection details.  So 
really your configuration might look something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;apiman-gateway.registry=plugin:GROUP_ID:ARTIFACT_ID:VERSION/org.example.apiman.gateway.MongoDbRegistry
apiman-gateway.registry.mongo.host=localhost
apiman-gateway.registry.mongo.port=27017
apiman-gateway.registry.mongo.username=sa
apiman-gateway.registry.mongo.password=sa123!
apiman-gateway.registry.mongo.database=apiman&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These configuration options will be passed to your component in its constructor if
your class has a &lt;code class=&quot;highlighter-rouge&quot;&gt;Map&amp;lt;String,String&amp;gt;&lt;/code&gt; constructor.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is a powerful new feature for extending and customizing apiman to better suit
your needs.  Of course we will want to continue offering the most popular component
implementations as a core part of apiman.  However there will always be many more
options than we can easily implement and support.  For this reason we wanted to 
provide an easy way for users (and the apiman community at large) to contribute.&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description><category term="api-manager" /><category term="api-gateway" /><category term="plugins" /><category term="development" /><category term="maven" /><pubDate>Fri, 24 Jul 2015 14:10:10 +0000</pubDate>
				<link>https://apiman.io/blog/api-manager/api-gateway/plugins/development/maven/2015/07/24/plugin-components-redux.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/api-manager/api-gateway/plugins/development/maven/2015/07/24/plugin-components-redux.html</guid>
			</item><item>
				<title>Manage Fuse APIs with apiman</title><dc:creator>Stefan Bunciak</dc:creator>
				        <author>sbunciak@redhat.com</author><description>&lt;p&gt;This article aims to provide a short guide on how to get API Management capabilities provided by apiman to work with JBoss Fuse, a lightweight, flexible, integration platform that is based on &lt;a href=&quot;https://camel.apache.org&quot;&gt;Apache Camel&lt;/a&gt;, an implementation of many of the most commonly used enterprise integration patterns (EIP).&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;creating-api-provider-in-jboss-fuse&quot;&gt;Creating API provider in JBoss Fuse&lt;/h1&gt;

&lt;p&gt;The following few steps should quickly get you started with deploying applications into JBoss Fuse. For demonstration purposes I‚Äôm using a sample REST application (quickstart) shipped along with Fuse installation. For more information about developing applications for JBoss Fuse inspect the &lt;a href=&quot;https://www.jboss.org/products/fuse/developer-materials/#!project=fuse&quot;&gt;developer materials&lt;/a&gt; and other &lt;a href=&quot;https://www.jboss.org/products/fuse/resources/&quot;&gt;resources&lt;/a&gt; at jboss.org.&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;
&lt;p&gt;To obtain a distribution of JBoss Fuse please visit the JBoss Fuse &lt;a href=&quot;https://www.jboss.org/products/fuse/download/&quot;&gt;download page&lt;/a&gt;.
Installation of JBoss Fuse is very simple, as the only thing you need to do is to unzip the distribution, e.g.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;unzip jboss-fuse-full-6.2.0.redhat-133.zip&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You might also want to enable the default admin user by uncommenting the last line in &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;fuse_dir&amp;gt;/etc/users.properties&lt;/code&gt;. Without a user configured you won‚Äôt be able to log into Fuse management console.&lt;/p&gt;

&lt;h3 id=&quot;server-startup&quot;&gt;Server startup&lt;/h3&gt;

&lt;p&gt;To start Fuse simply execute the following command from &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;fuse_dir&amp;gt;/bin&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;./fuse&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once JBoss Fuse is loaded proceed by creating a new Fuse Fabric instance. To do that execute &lt;code class=&quot;highlighter-rouge&quot;&gt;fabric:create&lt;/code&gt; command from Fuse CLI:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;JBossFuse:karaf@root&amp;gt; fabric:create&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After Fuse Fabric is up and running, log into Hawt.io management console, it should be by default available at &lt;a href=&quot;http://localhost:8181&quot;&gt;http://localhost:8181&lt;/a&gt;. 
In Fabric perspective, under Containers tabs click on the &lt;em&gt;Create&lt;/em&gt; button to open the &lt;em&gt;Create New Container form&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-07-07/fabric.png&quot; alt=&quot;List of Fabric containers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the &lt;em&gt;Create New Container&lt;/em&gt; page fill in the name you wish to use for your container (e.g. my-rest-container) and be sure to select the ‚Äòrest‚Äô profile for it. This will ensure that Fabric pickups the REST Quickstart and deploys it to this container. Finish the operation by hitting the &lt;em&gt;Create and start container&lt;/em&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-07-07/container.png&quot; alt=&quot;Create Fabric Container&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The container should start automatically right after it has been created and the REST endpoint should become available. If not, select the appropriate container and hit Start. 
You can inspect all the APIs deployed to your Fuse Fabric instance by clicking on &lt;em&gt;APIs&lt;/em&gt; section under the &lt;em&gt;Services&lt;/em&gt; tab. 
Note the &lt;em&gt;Location&lt;/em&gt; field - that‚Äôs the &lt;strong&gt;base url&lt;/strong&gt; the for endpoint implementation. We will use it later in the apiman manager.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-07-07/apis.png&quot; alt=&quot;APIs deployed to Fuse Fabric&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is a default user preconfigured so you can verify if the application was successfully deployed. It‚Äôs available at &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;location&amp;gt;/customerservice/customers/123&lt;/code&gt; (e.g. &lt;a href=&quot;http://localhost:8182/cxf/crm/customerservice/customers/123&quot;&gt;http://localhost:8182/cxf/crm/customerservice/customers/123&lt;/a&gt;)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;[sbunciak@sbunciak ~]$ http http://localhost:8182/cxf/crm/customerservice/customers/123
HTTP/1.1 200 OK
Content-Type: application/xml
Date: Tue, 07 Jul 2015 22:17:13 GMT
Server: Jetty(8.1.17.v20150415)
Transfer-Encoding: chunked

&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:Customer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:ns0=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://rest.fabric.quickstarts.fabric8.io/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:id&amp;gt;&lt;/span&gt;123&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:id&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:name&amp;gt;&lt;/span&gt;John&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:name&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:Customer&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;configure-apiman-to-manage-fuse-endpoint&quot;&gt;Configure apiman to manage Fuse endpoint&lt;/h1&gt;

&lt;p&gt;To install the latest version of apiman follow this &lt;a href=&quot;httpsio/latest/download.html&quot;&gt;guide&lt;/a&gt;. The installation process is again very simple, all you need to do is to extract the apiman overlay zip on top of &lt;a href=&quot;https://www.wildfly.org/&quot;&gt;Wildly 8&lt;/a&gt; server.&lt;/p&gt;

&lt;p&gt;After completing the installation, start apiman by executing the following command from &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;wildfly&amp;gt;/bin&lt;/code&gt; folder:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;./standalone.sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; standalone-apiman.xml&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;quick-public-service-setup&quot;&gt;Quick public service setup&lt;/h3&gt;

&lt;p&gt;For demonstration purposes I‚Äôll be creating a Public Service, however in real life you might want to configure different plans, various contracts, etc. 
Please consult the apiman &lt;a href=&quot;https://www.apiman.io/latest/user-guide.html&quot;&gt;user guide&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;In order to manage APIs in apiman you need to create a new Organization to which your APIs will belong. 
You can do that easily in apiman manager, typically available at: &lt;a href=&quot;http://localhost:8080/apimanui&quot;&gt;http://localhost:8080/apimanui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once logged into the apiman manager, locate the Organizations sections on the initial page, select &lt;em&gt;Create a New Organization&lt;/em&gt; link, provide a name and hit &lt;em&gt;Create Organization&lt;/em&gt; button. This will take you to organization details page where you can create a new Service by clicking on &lt;em&gt;New Service&lt;/em&gt; button under &lt;em&gt;Services&lt;/em&gt; tab:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-07-07/service.png&quot; alt=&quot;Image: Create Service&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will be asked to provide a name and a version for this Service. Once the service is successfully created there are few things remaining before you can publish and start using it. 
First, you need to provide an implementation base url on the &lt;em&gt;Implementation&lt;/em&gt; tab. Use the base URL of the REST Quickstart and save your changes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-07-07/implementation.png&quot; alt=&quot;Image: Provide Endpoint Implementation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Second, you may want to apply some policies to this Public Service. To do that, go to the Policies tab and configure a policy of your choice. 
I used the Rate Limiting policy to limit usage of this service to 5 per minute:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-07-07/policy.png&quot; alt=&quot;Image: Assign policy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you are all set to make the service public by checking &lt;em&gt;Make this service public&lt;/em&gt; under &lt;em&gt;Plans&lt;/em&gt; tab, saving the changes and clicking the &lt;em&gt;Publish&lt;/em&gt; button (which should be now enabled).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-07-07/publish.png&quot; alt=&quot;Image: Publish Service&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After you have published the service, have a look at the &lt;em&gt;Endpoint&lt;/em&gt; tab to look up the URL to be used to invoke this public service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-07-07/endpoint.png&quot; alt=&quot;Image: Managed Service Endpoint&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;testing-your-setup&quot;&gt;Testing your setup&lt;/h1&gt;

&lt;p&gt;Depending on which policy you assinged to the Public Service you might experience different behavior. However, if you followed the tutorial and assigned the Rate Limiting policy after reaching the maximum number of allowed requests you will get an output similar to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First request should succeed:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;[sbunciak@sbunciak ~]$ http https://localhost:8443/apiman-gateway/CustomerOrganization/CrmRestService/1.0/customerservice/customers/123 --verify=no
HTTP/1.1 200 OK
Connection: keep-alive
Content-Type: application/xml
Date: Tue, 07 Jul 2015 21:01:02 GMT
Server: Jetty(8.1.17.v20150415)
Transfer-Encoding: chunked
X-Powered-By: Undertow/1
X-RateLimit-Limit: 5
X-RateLimit-Remaining: 4
X-RateLimit-Reset: 57

&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:Customer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:ns0=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://rest.fabric.quickstarts.fabric8.io/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:id&amp;gt;&lt;/span&gt;123&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:id&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:name&amp;gt;&lt;/span&gt;John&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:name&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:Customer&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Executing 5 consecutive requests should fail with &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP 429 Too Many Requests&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;sbunciak@sbunciak ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;http https://localhost:8443/apiman-gateway/CustomerOrganization/CrmRestService/1.0/customerservice/customers/123 &lt;span class=&quot;nt&quot;&gt;--verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no
HTTP/1.1 429 Too Many Requests
Connection: keep-alive
Content-Length: 176
Content-Type: application/json
Date: Tue, 07 Jul 2015 21:00:51 GMT
Server: WildFly/8
X-Policy-Failure-Code: 10005
X-Policy-Failure-Message: Rate limit exceeded.
X-Policy-Failure-Type: Other
X-Powered-By: Undertow/1
X-RateLimit-Limit: 5
X-RateLimit-Remaining: 0
X-RateLimit-Reset: 8

&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;failureCode&quot;&lt;/span&gt;: 10005, 
    &lt;span class=&quot;s2&quot;&gt;&quot;headers&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;X-RateLimit-Limit&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;5&quot;&lt;/span&gt;, 
        &lt;span class=&quot;s2&quot;&gt;&quot;X-RateLimit-Remaining&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;, 
        &lt;span class=&quot;s2&quot;&gt;&quot;X-RateLimit-Reset&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;8&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, 
    &lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;Rate limit exceeded.&quot;&lt;/span&gt;, 
    &lt;span class=&quot;s2&quot;&gt;&quot;responseCode&quot;&lt;/span&gt;: 429, 
    &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;Other&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description><category term="api" /><category term="management" /><category term="jboss" /><category term="fuse" /><pubDate>Tue, 07 Jul 2015 15:15:15 +0000</pubDate>
				<link>https://apiman.io/blog/api/management/jboss/fuse/2015/07/07/fuse-apis.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/api/management/jboss/fuse/2015/07/07/fuse-apis.html</guid>
			</item><item>
				<title>Manage Fuse APIs with apiman</title><dc:creator>Stefan Bunciak</dc:creator>
				        <author>sbunciak@redhat.com</author><description>&lt;p&gt;This article aims to provide a short guide on how to get API Management capabilities provided by apiman to work with JBoss Fuse, a lightweight, flexible, integration platform that is based on &lt;a href=&quot;https://camel.apache.org&quot;&gt;Apache Camel&lt;/a&gt;, an implementation of many of the most commonly used enterprise integration patterns (EIP).&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;creating-api-provider-in-jboss-fuse&quot;&gt;Creating API provider in JBoss Fuse&lt;/h1&gt;

&lt;p&gt;The following few steps should quickly get you started with deploying applications into JBoss Fuse. For demonstration purposes I‚Äôm using a sample REST application (quickstart) shipped along with Fuse installation. For more information about developing applications for JBoss Fuse inspect the &lt;a href=&quot;https://www.jboss.org/products/fuse/developer-materials/#!project=fuse&quot;&gt;developer materials&lt;/a&gt; and other &lt;a href=&quot;https://www.jboss.org/products/fuse/resources/&quot;&gt;resources&lt;/a&gt; at jboss.org.&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;
&lt;p&gt;To obtain a distribution of JBoss Fuse please visit the JBoss Fuse &lt;a href=&quot;https://www.jboss.org/products/fuse/download/&quot;&gt;download page&lt;/a&gt;.
Installation of JBoss Fuse is very simple, as the only thing you need to do is to unzip the distribution, e.g.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;unzip jboss-fuse-full-6.2.0.redhat-133.zip&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You might also want to enable the default admin user by uncommenting the last line in &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;fuse_dir&amp;gt;/etc/users.properties&lt;/code&gt;. Without a user configured you won‚Äôt be able to log into Fuse management console.&lt;/p&gt;

&lt;h3 id=&quot;server-startup&quot;&gt;Server startup&lt;/h3&gt;

&lt;p&gt;To start Fuse simply execute the following command from &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;fuse_dir&amp;gt;/bin&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;./fuse&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Once JBoss Fuse is loaded proceed by creating a new Fuse Fabric instance. To do that execute &lt;code class=&quot;highlighter-rouge&quot;&gt;fabric:create&lt;/code&gt; command from Fuse CLI:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;JBossFuse:karaf@root&amp;gt; fabric:create&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;After Fuse Fabric is up and running, log into Hawt.io management console, it should be by default available at &lt;a href=&quot;http://localhost:8181&quot;&gt;http://localhost:8181&lt;/a&gt;.
In Fabric perspective, under Containers tabs click on the &lt;em&gt;Create&lt;/em&gt; button to open the &lt;em&gt;Create New Container form&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-07-07/fabric.png&quot; alt=&quot;List of Fabric containers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the &lt;em&gt;Create New Container&lt;/em&gt; page fill in the name you wish to use for your container (e.g. my-rest-container) and be sure to select the ‚Äòrest‚Äô profile for it. This will ensure that Fabric pickups the REST Quickstart and deploys it to this container. Finish the operation by hitting the &lt;em&gt;Create and start container&lt;/em&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-07-07/container.png&quot; alt=&quot;Create Fabric Container&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The container should start automatically right after it has been created and the REST endpoint should become available. If not, select the appropriate container and hit Start. 
You can inspect all the APIs deployed to your Fuse Fabric instance by clicking on &lt;em&gt;APIs&lt;/em&gt; section under the &lt;em&gt;APIs&lt;/em&gt; tab. 
Note the &lt;em&gt;Location&lt;/em&gt; field - that‚Äôs the &lt;strong&gt;base url&lt;/strong&gt; the for endpoint implementation. We will use it later in the apiman manager.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-07-07/services.png&quot; alt=&quot;APIs deployed to Fuse Fabric&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is a default user preconfigured so you can verify if the application was successfully deployed. It‚Äôs available at &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;location&amp;gt;/customerservice/customers/123&lt;/code&gt; (e.g. &lt;a href=&quot;http://localhost:8182/cxf/crm/customerservice/customers/123&quot;&gt;http://localhost:8182/cxf/crm/customerservice/customers/123&lt;/a&gt;)&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;[sbunciak@sbunciak ~]$ http http://localhost:8182/cxf/crm/customerservice/customers/123
HTTP/1.1 200 OK
Content-Type: application/xml
Date: Tue, 07 Jul 2015 22:17:13 GMT
Server: Jetty(8.1.17.v20150415)
Transfer-Encoding: chunked

&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:Customer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:ns0=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://rest.fabric.quickstarts.fabric8.io/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:id&amp;gt;&lt;/span&gt;123&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:id&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:name&amp;gt;&lt;/span&gt;John&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:name&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:Customer&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;configure-apiman-to-manage-fuse-endpoint&quot;&gt;Configure apiman to manage Fuse endpoint&lt;/h1&gt;

&lt;p&gt;To install the latest version of apiman follow this &lt;a href=&quot;https://www.apiman.io/latest/download.html&quot;&gt;guide&lt;/a&gt;. The installation process is again very simple, all you need to do is to extract the apiman overlay zip on top of &lt;a href=&quot;https://www.wildfly.org/&quot;&gt;Wildly 8&lt;/a&gt; server.&lt;/p&gt;

&lt;p&gt;After completing the installation, start apiman by executing the following command from &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;wildfly&amp;gt;/bin&lt;/code&gt; folder:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;./standalone.sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; standalone-apiman.xml&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;quick-public-api-setup&quot;&gt;Quick public API setup&lt;/h3&gt;

&lt;p&gt;For demonstration purposes I‚Äôll be creating a Public API, however in real life you might want to configure different plans, various contracts, etc. 
Please consult the apiman &lt;a href=&quot;https://www.apiman.io/latest/user-guide.html&quot;&gt;user guide&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;In order to manage APIs in apiman you need to create a new Organization to which your APIs will belong. 
You can do that easily in apiman manager, typically available at: &lt;a href=&quot;http://localhost:8080/apimanui&quot;&gt;http://localhost:8080/apimanui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once logged into the apiman manager, locate the Organizations sections on the initial page, select &lt;em&gt;Create a New Organization&lt;/em&gt; link, provide a name and hit &lt;em&gt;Create Organization&lt;/em&gt; button. This will take you to organization details page where you can create a new API by clicking on &lt;em&gt;New API&lt;/em&gt; button under &lt;em&gt;APIs&lt;/em&gt; tab:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-07-07/api.png&quot; alt=&quot;Image: Create API&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will be asked to provide a name and a version for this API. Once the API is successfully created there are few things remaining before you can publish and start using it. 
First, you need to provide an implementation base url on the &lt;em&gt;Implementation&lt;/em&gt; tab. Use the base URL of the REST Quickstart and save your changes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-07-07/implementation.png&quot; alt=&quot;Image: Provide Endpoint Implementation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Second, you may want to apply some policies to this Public API. To do that, go to the Policies tab and configure a policy of your choice. 
I used the Rate Limiting policy to limit usage of this API to 5 per minute:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-07-07/policy.png&quot; alt=&quot;Image: Assign policy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you are all set to make the API public by checking &lt;em&gt;Make this API public&lt;/em&gt; under &lt;em&gt;Plans&lt;/em&gt; tab, saving the changes and clicking the &lt;em&gt;Publish&lt;/em&gt; button (which should be now enabled).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-07-07/publish.png&quot; alt=&quot;Image: Publish API&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After you have published the API, have a look at the &lt;em&gt;Endpoint&lt;/em&gt; tab to look up the URL to be used to invoke this public API:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-07-07/endpoint.png&quot; alt=&quot;Image: Managed API Endpoint&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;testing-your-setup&quot;&gt;Testing your setup&lt;/h1&gt;

&lt;p&gt;Depending on which policy you assinged to the Public API you might experience different behavior. However, if you followed the tutorial and assigned the Rate Limiting policy after reaching the maximum number of allowed requests you will get an output similar to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First request should succeed:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;[sbunciak@sbunciak ~]$ http https://localhost:8443/apiman-gateway/CustomerOrganization/CrmRestApi/1.0/customerservice/customers/123 --verify=no
HTTP/1.1 200 OK
Connection: keep-alive
Content-Type: application/xml
Date: Tue, 07 Jul 2015 21:01:02 GMT
Server: Jetty(8.1.17.v20150415)
Transfer-Encoding: chunked
X-Powered-By: Undertow/1
X-RateLimit-Limit: 5
X-RateLimit-Remaining: 4
X-RateLimit-Reset: 57

&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;yes&quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:Customer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:ns0=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://rest.fabric.quickstarts.fabric8.io/&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:id&amp;gt;&lt;/span&gt;123&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:id&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:name&amp;gt;&lt;/span&gt;John&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:name&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:Customer&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Executing 5 consecutive requests should fail with &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTP 429 Too Many Requests&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;sbunciak@sbunciak ~]&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;http https://localhost:8443/apiman-gateway/CustomerOrganization/CrmRestApi/1.0/customerservice/customers/123 &lt;span class=&quot;nt&quot;&gt;--verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no
HTTP/1.1 429 Too Many Requests
Connection: keep-alive
Content-Length: 176
Content-Type: application/json
Date: Tue, 07 Jul 2015 21:00:51 GMT
Server: WildFly/8
X-Policy-Failure-Code: 10005
X-Policy-Failure-Message: Rate limit exceeded.
X-Policy-Failure-Type: Other
X-Powered-By: Undertow/1
X-RateLimit-Limit: 5
X-RateLimit-Remaining: 0
X-RateLimit-Reset: 8

&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;failureCode&quot;&lt;/span&gt;: 10005, 
    &lt;span class=&quot;s2&quot;&gt;&quot;headers&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;X-RateLimit-Limit&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;5&quot;&lt;/span&gt;, 
        &lt;span class=&quot;s2&quot;&gt;&quot;X-RateLimit-Remaining&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;, 
        &lt;span class=&quot;s2&quot;&gt;&quot;X-RateLimit-Reset&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;8&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, 
    &lt;span class=&quot;s2&quot;&gt;&quot;message&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;Rate limit exceeded.&quot;&lt;/span&gt;, 
    &lt;span class=&quot;s2&quot;&gt;&quot;responseCode&quot;&lt;/span&gt;: 429, 
    &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;Other&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description><category term="api" /><category term="management" /><category term="jboss" /><category term="fuse" /><pubDate>Tue, 07 Jul 2015 15:15:15 +0000</pubDate>
				<link>https://apiman.io/blog/api/management/jboss/fuse/2015/07/07/fuse-apis-redux.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/api/management/jboss/fuse/2015/07/07/fuse-apis-redux.html</guid>
			</item><item>
				<title>At long last, Metrics R Us!</title><dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author><description>&lt;p&gt;A core feature of any good API Management solution is the recording of and reporting on
interesting metrics related to API requests.  Because apiman acts as a central Gateway
for all managed API traffic, it is the perfect location to record information about each
and every request.  This allows it to report on interesting data it has recorded, related
to response times, successful vs. failed requests, total number of requests broken down
by time, consumer id, or plan used.  As you can imagine, this is extremely valuable
information and it is a bit embarrassing that we haven‚Äôt offered this functionality until
now!&lt;/p&gt;

&lt;p&gt;But that gap is finally filled with version 1.1.4.Final.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;First let me give you just a high level overview of what this is all about.  Every time
the API Gateway gets a request from an API client, it will add a record in the metrics
system with a bunch of interesting fields.  These include but are not limited to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Request start and end times&lt;/li&gt;
  &lt;li&gt;Service start and end times (i.e. just the part of the request taken up by the back end service)&lt;/li&gt;
  &lt;li&gt;Resource path&lt;/li&gt;
  &lt;li&gt;Response type (success, failure, error)&lt;/li&gt;
  &lt;li&gt;Service info (org id, id, version)&lt;/li&gt;
  &lt;li&gt;Application info (org id, id, version)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of this information is recorded in the metrics storage system so that later on it
can be analyzed/mined for interesting trends.&lt;/p&gt;

&lt;p&gt;In the API Manager, we extract interesting reports from the recorded metrics data and
display it as graphs in the UI (as well as provide the data via a set of metrics
related REST endpoints in the API Manager‚Äôs own API).&lt;/p&gt;

&lt;h2 id=&quot;how-do-we-store-metrics&quot;&gt;How do we store metrics?&lt;/h2&gt;
&lt;p&gt;Out of the box, apiman stores the metrics information into an elasticsearch index.  This
elasticsearch instance is provided as part of the apiman distribution and is enabled and
running by default.  If you wish to use a different elasticsearch instance that‚Äôs of
course no problem - all it requires is some tweaking of settings in the apiman.properties
file.  I recommend having a look at the &lt;a href=&quot;https://www.apiman.io/latest/installation-guide.html&quot;&gt;Installation Guide&lt;/a&gt;
for more details.&lt;/p&gt;

&lt;p&gt;The intention is to support various metrics storage systems, not just elasticsearch.
For example, we have InfluxDB and Hawkular implementations in progres.  You can even
implement your own!  Custom metrics systems is likely a separate blog post, but note
that &lt;em&gt;storing&lt;/em&gt; metrics data into an alternate system is easy - simply implement the
&lt;em&gt;IMetrics&lt;/em&gt; interface:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apiman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IMetrics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
  * Records the metrics for a single request.  Most implementations will likely
  * asynchronously process this information.
  */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestMetric&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metric&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
  * Provides the component registry (before any call to {@link #record(RequestMetric)})
  * is made. Metrics can then access HTTP client components, etc.
  */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setComponentRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IComponentRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A little bit of configuration foo in the apiman.properties is all it takes to switch
from elasticsearch to your custom provider.&lt;/p&gt;

&lt;h2 id=&quot;metrics-data-from-the-api-managers-rest-api&quot;&gt;Metrics data from the API Manager‚Äôs REST API&lt;/h2&gt;
&lt;p&gt;There is no way to extract arbitrary metrics information from the metrics source unless
you hit the metrics storage directly.  For example, you could use Kibana to directly
view the apiman metrics information stored in elasticsearch.  In the future we will
be exploring ways to integrate the data visualization tools that come with each of the
providers we support (elasticsearch, hawkular, influxcb, etc).  However, we do provide
a set of REST endpoints you can use to extract common metrics.  These REST endpoints are
available as a part of the standard API Manager‚Äôs REST API.&lt;/p&gt;

&lt;p&gt;Please refer to the &lt;a href=&quot;https://www.apiman.io/latest/api-manager-restdocs.html&quot;&gt;API documentation&lt;/a&gt;
for the latest information, but at the time of this blog post the available metrics
endpoints are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;/organizations/&lt;ORG_ID&gt;/services/&lt;SVC_ID&gt;/versions/&lt;VERSION&gt;/metrics/usage&lt;/VERSION&gt;&lt;/SVC_ID&gt;&lt;/ORG_ID&gt;&lt;/li&gt;
  &lt;li&gt;/organizations/&lt;ORG_ID&gt;/services/&lt;SVC_ID&gt;/versions/&lt;VERSION&gt;/metrics/appUsage&lt;/VERSION&gt;&lt;/SVC_ID&gt;&lt;/ORG_ID&gt;&lt;/li&gt;
  &lt;li&gt;/organizations/&lt;ORG_ID&gt;/services/&lt;SVC_ID&gt;/versions/&lt;VERSION&gt;/metrics/planUsage&lt;/VERSION&gt;&lt;/SVC_ID&gt;&lt;/ORG_ID&gt;&lt;/li&gt;
  &lt;li&gt;/organizations/&lt;ORG_ID&gt;/services/&lt;SVC_ID&gt;/versions/&lt;VERSION&gt;/metrics/responseStats&lt;/VERSION&gt;&lt;/SVC_ID&gt;&lt;/ORG_ID&gt;&lt;/li&gt;
  &lt;li&gt;/organizations/&lt;ORG_ID&gt;/services/&lt;SVC_ID&gt;/versions/&lt;VERSION&gt;/metrics/summaryResponseStats&lt;/VERSION&gt;&lt;/SVC_ID&gt;&lt;/ORG_ID&gt;&lt;/li&gt;
  &lt;li&gt;/organizations/&lt;ORG_ID&gt;/services/&lt;SVC_ID&gt;/versions/&lt;VERSION&gt;/metrics/planResponseStats&lt;/VERSION&gt;&lt;/SVC_ID&gt;&lt;/ORG_ID&gt;&lt;/li&gt;
  &lt;li&gt;/organizations/&lt;ORG_ID&gt;/services/&lt;SVC_ID&gt;/versions/&lt;VERSION&gt;/metrics/appResponseStats&lt;/VERSION&gt;&lt;/SVC_ID&gt;&lt;/ORG_ID&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The ‚Äòusage‚Äô endpoints return information about the number of requests made.  The
‚ÄòresponseStats‚Äô endpoints are similar, but are broken down by response type (successful
vs. failed vs. error responses).  All endpoints require a time range (from and to).  The
&lt;em&gt;/usage&lt;/em&gt; and &lt;em&gt;/responseStats&lt;/em&gt; endpoints also require a time interval, because they both
return a histogram/time series dataset.&lt;/p&gt;

&lt;p&gt;Sensible limits are enforced on all these endpoints to discourage abuse.  For example,
don‚Äôt ask for a per-minute granularity time series dataset over a ten year data range.
The system won‚Äôt like that one bit.&lt;/p&gt;

&lt;h2 id=&quot;viewing-metrics-info-in-the-ui&quot;&gt;Viewing metrics info in the UI&lt;/h2&gt;
&lt;p&gt;The metrics information provided by the API is also available directly in the API Manager
UI.  For any published service, simply navigate to the &lt;em&gt;Metrics&lt;/em&gt; tab for that Service
(in the provider section of the UI).  The UI should be pretty easy to use - simply pick
a type of metric you want to see and a pre-configured time period!  Here is what the
usage metrics might look like for a typical service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-07-06/usage-metrics.png&quot; alt=&quot;Usage Metrics&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And here is what you might expect to find for typical response type metrics:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-07-06/response-type-metrics.png&quot; alt=&quot;Response Type Metrics&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As you can see, this is highly valuable information to have.  We only have a couple of
different categories of metrics exposed via the API and UI right now - so this is
your opportunity to come tell us what you‚Äôd like to see!  Join the apiman metrics
conversation on our &lt;a href=&quot;https://lists.jboss.org/mailman/listinfo/apiman-user&quot;&gt;mailing list&lt;/a&gt;
or &lt;a href=&quot;https://www.apiman.io/latest/chat.html&quot;&gt;IRC channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description><category term="api-manager" /><category term="service" /><category term="ui" /><category term="metrics" /><pubDate>Mon, 06 Jul 2015 15:10:22 +0000</pubDate>
				<link>https://apiman.io/blog/api-manager/service/ui/metrics/2015/07/06/metrics.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/api-manager/service/ui/metrics/2015/07/06/metrics.html</guid>
			</item><item>
				<title>At long last, Metrics R Us!</title><dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author><description>&lt;p&gt;A core feature of any good API Management solution is the recording of and reporting on
interesting metrics related to API requests.  Because apiman acts as a central Gateway
for all managed API traffic, it is the perfect location to record information about each
and every request.  This allows it to report on interesting data it has recorded, related
to response times, successful vs. failed requests, total number of requests broken down
by time, consumer id, or plan used.  As you can imagine, this is extremely valuable
information and it is a bit embarrassing that we haven‚Äôt offered this functionality until
now!&lt;/p&gt;

&lt;p&gt;But that gap is finally filled with version 1.1.4.Final.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;First let me give you just a high level overview of what this is all about.  Every time
the API Gateway gets a request from an API client, it will add a record in the metrics
system with a bunch of interesting fields.  These include but are not limited to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Request start and end times&lt;/li&gt;
  &lt;li&gt;API start and end times (i.e. just the part of the request taken up by the back end service)&lt;/li&gt;
  &lt;li&gt;Resource path&lt;/li&gt;
  &lt;li&gt;Response type (success, failure, error)&lt;/li&gt;
  &lt;li&gt;API info (org id, id, version)&lt;/li&gt;
  &lt;li&gt;Client app info (org id, id, version)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of this information is recorded in the metrics storage system so that later on it
can be analyzed/mined for interesting trends.&lt;/p&gt;

&lt;p&gt;In the API Manager, we extract interesting reports from the recorded metrics data and
display it as graphs in the UI (as well as provide the data via a set of metrics
related REST endpoints in the API Manager‚Äôs own API).&lt;/p&gt;

&lt;h2 id=&quot;how-do-we-store-metrics&quot;&gt;How do we store metrics?&lt;/h2&gt;
&lt;p&gt;Out of the box, apiman stores the metrics information into an elasticsearch index.  This
elasticsearch instance is provided as part of the apiman distribution and is enabled and
running by default.  If you wish to use a different elasticsearch instance that‚Äôs of
course no problem - all it requires is some tweaking of settings in the apiman.properties
file.  I recommend having a look at the &lt;a href=&quot;https://www.apiman.io/latest/installation-guide.html&quot;&gt;Installation Guide&lt;/a&gt;
for more details.&lt;/p&gt;

&lt;p&gt;The intention is to support various metrics storage systems, not just elasticsearch.
For example, we have InfluxDB and Hawkular implementations in progres.  You can even
implement your own!  Custom metrics systems is likely a separate blog post, but note
that &lt;em&gt;storing&lt;/em&gt; metrics data into an alternate system is easy - simply implement the
&lt;em&gt;IMetrics&lt;/em&gt; interface:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apiman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IMetrics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
  * Records the metrics for a single request.  Most implementations will likely
  * asynchronously process this information.
  */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestMetric&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metric&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**
  * Provides the component registry (before any call to {@link #record(RequestMetric)})
  * is made. Metrics can then access HTTP client components, etc.
  */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setComponentRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IComponentRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;A little bit of configuration foo in the apiman.properties is all it takes to switch
from elasticsearch to your custom provider.&lt;/p&gt;

&lt;h2 id=&quot;metrics-data-from-the-api-managers-rest-api&quot;&gt;Metrics data from the API Manager‚Äôs REST API&lt;/h2&gt;
&lt;p&gt;There is no way to extract arbitrary metrics information from the metrics source unless
you hit the metrics storage directly.  For example, you could use Kibana to directly
view the apiman metrics information stored in elasticsearch.  In the future we will
be exploring ways to integrate the data visualization tools that come with each of the
providers we support (elasticsearch, hawkular, influxcb, etc).  However, we do provide
a set of REST endpoints you can use to extract common metrics.  These REST endpoints are
available as a part of the standard API Manager‚Äôs REST API.&lt;/p&gt;

&lt;p&gt;Please refer to the &lt;a href=&quot;https://www.apiman.io/latest/api-manager-restdocs.html&quot;&gt;API documentation&lt;/a&gt;
for the latest information, but at the time of this blog post the available metrics
endpoints are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;/organizations/&lt;ORG_ID&gt;/apis/&lt;API_ID&gt;/versions/&lt;VERSION&gt;/metrics/usage&lt;/VERSION&gt;&lt;/API_ID&gt;&lt;/ORG_ID&gt;&lt;/li&gt;
  &lt;li&gt;/organizations/&lt;ORG_ID&gt;/apis/&lt;API_ID&gt;/versions/&lt;VERSION&gt;/metrics/appUsage&lt;/VERSION&gt;&lt;/API_ID&gt;&lt;/ORG_ID&gt;&lt;/li&gt;
  &lt;li&gt;/organizations/&lt;ORG_ID&gt;/apis/&lt;API_ID&gt;/versions/&lt;VERSION&gt;/metrics/planUsage&lt;/VERSION&gt;&lt;/API_ID&gt;&lt;/ORG_ID&gt;&lt;/li&gt;
  &lt;li&gt;/organizations/&lt;ORG_ID&gt;/apis/&lt;API_ID&gt;/versions/&lt;VERSION&gt;/metrics/responseStats&lt;/VERSION&gt;&lt;/API_ID&gt;&lt;/ORG_ID&gt;&lt;/li&gt;
  &lt;li&gt;/organizations/&lt;ORG_ID&gt;/apis/&lt;API_ID&gt;/versions/&lt;VERSION&gt;/metrics/summaryResponseStats&lt;/VERSION&gt;&lt;/API_ID&gt;&lt;/ORG_ID&gt;&lt;/li&gt;
  &lt;li&gt;/organizations/&lt;ORG_ID&gt;/apis/&lt;API_ID&gt;/versions/&lt;VERSION&gt;/metrics/planResponseStats&lt;/VERSION&gt;&lt;/API_ID&gt;&lt;/ORG_ID&gt;&lt;/li&gt;
  &lt;li&gt;/organizations/&lt;ORG_ID&gt;/apis/&lt;API_ID&gt;/versions/&lt;VERSION&gt;/metrics/appResponseStats&lt;/VERSION&gt;&lt;/API_ID&gt;&lt;/ORG_ID&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The ‚Äòusage‚Äô endpoints return information about the number of requests made.  The
‚ÄòresponseStats‚Äô endpoints are similar, but are broken down by response type (successful
vs. failed vs. error responses).  All endpoints require a time range (from and to).  The
&lt;em&gt;/usage&lt;/em&gt; and &lt;em&gt;/responseStats&lt;/em&gt; endpoints also require a time interval, because they both
return a histogram/time series dataset.&lt;/p&gt;

&lt;p&gt;Sensible limits are enforced on all these endpoints to discourage abuse.  For example,
don‚Äôt ask for a per-minute granularity time series dataset over a ten year data range.
The system won‚Äôt like that one bit.&lt;/p&gt;

&lt;h2 id=&quot;viewing-metrics-info-in-the-ui&quot;&gt;Viewing metrics info in the UI&lt;/h2&gt;
&lt;p&gt;The metrics information provided by the API is also available directly in the API Manager
UI.  For any published API, simply navigate to the &lt;em&gt;Metrics&lt;/em&gt; tab for that API
(in the provider section of the UI).  The UI should be pretty easy to use - simply pick
a type of metric you want to see and a pre-configured time period!  Here is what the
usage metrics might look like for a typical API:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-07-06/usage-metrics.png&quot; alt=&quot;Usage Metrics&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And here is what you might expect to find for typical response type metrics:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-07-06/response-type-metrics.png&quot; alt=&quot;Response Type Metrics&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As you can see, this is highly valuable information to have.  We only have a couple of
different categories of metrics exposed via the API and UI right now - so this is
your opportunity to come tell us what you‚Äôd like to see!  Join the apiman metrics
conversation on our &lt;a href=&quot;https://lists.jboss.org/mailman/listinfo/apiman-user&quot;&gt;mailing list&lt;/a&gt;
or &lt;a href=&quot;https://www.apiman.io/latest/chat.html&quot;&gt;IRC channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description><category term="api-manager" /><category term="api" /><category term="ui" /><category term="metrics" /><pubDate>Mon, 06 Jul 2015 15:10:22 +0000</pubDate>
				<link>https://apiman.io/blog/api-manager/api/ui/metrics/2015/07/06/metrics-redux.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/api-manager/api/ui/metrics/2015/07/06/metrics-redux.html</guid>
			</item><item>
				<title>CORS? Of Course!</title><dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author><description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;re looking to define &lt;a href=&quot;https://www.w3.org/TR/2014/REC-cors-20140116/&quot;&gt;CORS policies&lt;/a&gt; in your API Management layer, then we have an &lt;a href=&quot;https://github.com/apiman/apiman-plugins&quot;&gt;official plugin&lt;/a&gt; policy that should be perfect for the job.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For those &lt;a href=&quot;https://enable-cors.org/&quot;&gt;unfamiliar with CORS&lt;/a&gt;, it&amp;#8217;s a way of precisely defining who and how a remote origin may invoke a service&amp;#8217;s resources. Generally, due to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Same-origin_policy&quot;&gt;same-origin policy&lt;/a&gt;, a web browser will only allow the invocation of resources that reside on the same origin as the requesting page. This mitigates a range of malicious script attacks from interacting with the remote resources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, if we &lt;em&gt;want&lt;/em&gt; our resource to be callable by some other, or all, origins, then we need to define a CORS policy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Apiman plugins are referenced via their Maven coordinates, and can be installed most easily &lt;a href=&quot;https://www.apiman.io/blog/plugins/policies/development/maven/2015/03/06/custom-policies.html#installing-a-plugin-into-apiman&quot;&gt;via the apiman Admin UI&lt;/a&gt; (or &lt;a href=&quot;https://www.apiman.io/blog/rest/api/automation/2015/05/19/rest-api.html&quot;&gt;REST interfaces&lt;/a&gt; if you&amp;#8217;re looking to automate things).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the &lt;a href=&quot;https://github.com/apiman/apiman-plugins/tree/master/cors-policy&quot;&gt;CORS plugin&lt;/a&gt; &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;, the coordinates are as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;GAV&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Group&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;io.apiman.plugins&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Artifact&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;apiman-plugins-cors-policy&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Version&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.1.3.Final&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;lets-give-it-a-go&quot;&gt;Let&amp;#8217;s give it a go&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the purposes of this blogpost we&amp;#8217;ll contrive a scenario that allows us to demonstrate a variety of the plugin&amp;#8217;s functionality. However, if your precise use-case isn&amp;#8217;t covered here, you should still investigate the settings page, as a raft of configuration options are available that will likely achieve what you need.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;preparation&quot;&gt;Preparation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have the &lt;a href=&quot;https://www.apiman.io/latest/download.html&quot;&gt;apiman quickstart&lt;/a&gt; running &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_3&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_3&quot; title=&quot;View footnote.&quot;&gt;3&lt;/a&gt;]&lt;/sup&gt;, you next need to deploy the &lt;strong&gt;&lt;em&gt;echo-service&lt;/em&gt;&lt;/strong&gt; to act as the backend service for our demo. &lt;strong&gt;Substitute the path below&lt;/strong&gt; for the appropriate one corresponding to the version you downloaded.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;cd /tmp
git clone https://github.com/apiman/apiman-quickstarts.git
cd apiman-quickstarts/echo-service
git checkout 1.1.3.Final
mvn clean install
mvn wildfly:deploy&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Return to the &lt;a href=&quot;http://127.0.0.1:8080/apimanui&quot;&gt;apiman UI&lt;/a&gt; and log in &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_4&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_4&quot; title=&quot;View footnote.&quot;&gt;4&lt;/a&gt;]&lt;/sup&gt;. Create an &lt;strong&gt;Organization&lt;/strong&gt; called &lt;strong&gt;&lt;em&gt;Foo&lt;/em&gt;&lt;/strong&gt;, then create a &lt;strong&gt;Service&lt;/strong&gt; called &lt;strong&gt;&lt;em&gt;Bar&lt;/em&gt;&lt;/strong&gt;. Set your Service&amp;#8217;s implementation URL to be &lt;code&gt;&lt;a href=&quot;http://127.0.0.1:8080/apiman-echo&quot; class=&quot;bare&quot;&gt;http://127.0.0.1:8080/apiman-echo&lt;/a&gt;&lt;/code&gt;, and select &lt;strong&gt;&lt;em&gt;Rest&lt;/em&gt;&lt;/strong&gt; as the type. Move to the &lt;strong&gt;Plans&lt;/strong&gt; tab and tick &lt;strong&gt;Make this service public&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, move to the &lt;strong&gt;Policies&lt;/strong&gt; tab, click &lt;strong&gt;&lt;em&gt;Add Policy&lt;/em&gt;&lt;/strong&gt; and select &lt;strong&gt;CORS Policy&lt;/strong&gt; from the dropdown list.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;plugin-settings&quot;&gt;Plugin settings&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s configure the settings as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 55%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Option&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Value(s)&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Explanation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Terminate on CORS error&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ll not hit the backend if there&amp;#8217;s a CORS validation error. In some instances, a non-preflighted CORS request would otherwise cause a real invocation of the service whose results would be ignored by the user agent.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Access-Control-Allow-Origin&quot;&gt;Access-Control-Allow-Origin&lt;/a&gt;&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&quot;http://newcastle.local&quot; class=&quot;bare&quot;&gt;http://newcastle.local&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re going to use cURL to simulate a CORS request from this allowed origin.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Access-Control-Expose-Headers&quot;&gt;Access-Control-Expose-Headers&lt;/a&gt;&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Response-Counter&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default CORS will only allow a set of &lt;a href=&quot;http://www.w3.org/TR/cors/#simple-header&quot;&gt;simple headers&lt;/a&gt; to be exposed in a &lt;em&gt;response&lt;/em&gt; to the user agent, so we&amp;#8217;ll set this additional one we want to see.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Access-Control-Allow-Headers&quot;&gt;Access-Control-Allow-Headers&lt;/a&gt;&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;X-APIMAN-EXCELLENT&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default CORS only allows &lt;em&gt;requests&lt;/em&gt; to include a set of basic headers, and we want our service to be able to see the value of our &lt;em&gt;X-APIMAN-EXCELLENT&lt;/em&gt; header, so we specify it as allowed here.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Access-Control-Allow-Methods&quot;&gt;Access-Control-Allow-Methods&lt;/a&gt;&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;TRACE&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, only &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt; are allowed verbs. We want to use &lt;code&gt;TRACE&lt;/code&gt;, so we add it to the list.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Access-Control-Max-Age&quot;&gt;Access-Control-Max-Age&lt;/a&gt;&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;9001&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How long the browser should cache your CORS policy for (to avoid repeated preflight requests).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After saving you&amp;#8217;ll see it&amp;#8217;s description says something along the lines of:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Cross-origin requests from  1  origin(s) will be permitted upon satisfying method, header and credential constraints.  Denied requests will be terminated.  Preflight requests will be cached for 9001 delta seconds.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Assuming you&amp;#8217;ve saved everything, hit &lt;strong&gt;Publish&lt;/strong&gt; and we&amp;#8217;ll be ready to test.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;access-control-to-major-tom&quot;&gt;Access Control to Major Tom&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Generally, it&amp;#8217;s the job of the user agent to set the &lt;code&gt;Origin&lt;/code&gt; header, such as a browser or mobile client. However, we&amp;#8217;ll be using cURL to simulate a variety of scenarios so we can test things out without actually needing to set up a load of different domains.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;unwelcome-guests&quot;&gt;Unwelcome guests&lt;/h4&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;no-ticket-to-fly&quot;&gt;No ticket to fly&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In our first example, we&amp;#8217;ll set an &lt;code&gt;Origin&lt;/code&gt; that we didn&amp;#8217;t permit:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;curl -k -v -H 'Origin: http://panacalty.local' https://127.0.0.1:8443/apiman-gateway/Foo/Bar/1.0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s what comes back:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;{
   &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;CORS: Origin not permitted.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
   &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : {
      &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Access-Control-Expose-Headers&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Response-Counter&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
   },
   &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;responseCode&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;integer&quot;&gt;400&lt;/span&gt;,
   &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Authorization&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
   &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;failureCode&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;integer&quot;&gt;400&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that we were given the thumbs down without the service ever being hit; for most use cases this is a good thing, as it avoids unnecessary load on a service where the user agent is going to throw away the response anyway.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;not-got-the-header-for-it&quot;&gt;Not got the head(er) for it&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even if our origin is correct, we need to pass other checks, such as headers. In this preflighted example, we&amp;#8217;ll try to make a request with a header that we&amp;#8217;ve not allowed: &lt;code&gt;X-SECRET&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;curl -X OPTIONS -k -v -H 'Origin: http://newcastle.local' -H 'Access-Control-Request-Headers: X-SECRET' 'Access-Control-Request-Method: TRACE' https://127.0.0.1:8443/apiman-gateway/Foo/Bar/1.0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Correctly, CORS turned the prerequest down:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;{
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Authorization&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;failureCode&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;400&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;responseCode&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;400&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;CORS: Requested header not allowed&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
        &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Access-Control-Max-Age&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;9001&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The same goes for Request-Method (verb), and of course, whether the CORS request itself is valid.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;playing-by-the-rules&quot;&gt;Playing by the rules&lt;/h4&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
When &lt;code&gt;Host&lt;/code&gt; and &lt;code&gt;Origin&lt;/code&gt; are equal, a request will automatically be allowed, as it is a &lt;em&gt;non-CORS&lt;/em&gt; request. Some browsers still make the superfluous CORS requests anyway.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;keep-it-simple&quot;&gt;Keep it simple&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s set up a request that finally is playing by the parameters we configured earlier:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;curl -X GET -k -v -H 'Origin: http://newcastle.local' https://127.0.0.1:8443/apiman-gateway/Foo/Bar/1.0
&amp;gt; GET /apiman-gateway/Foo/Bar/1.0 HTTP/1.1
&amp;gt; User-Agent: curl/7.37.1
&amp;gt; Host: 127.0.0.1:8443
&amp;gt; Accept: */*
&amp;gt; Origin: http://newcastle.local
&amp;gt;
&amp;lt; HTTP/1.1 200 OK
&amp;lt; X-Powered-By: Undertow/1
&amp;lt; Server: WildFly/8
&amp;lt; Access-Control-Expose-Headers: Response-Counter
&amp;lt; Response-Counter: 1
&amp;lt; Date: Sat, 13 Jun 2015 16:06:32 GMT
&amp;lt; Connection: keep-alive
&amp;lt; Access-Control-Allow-Origin: http://newcastle.local
&amp;lt; Content-Type: application/json
&amp;lt; Content-Length: 345
&amp;lt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It works: excellent! Here&amp;#8217;s our response body:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;{
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/apiman-echo&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/apiman-echo&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : {
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;127.0.0.1:8080&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;User-Agent&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;curl/7.37.1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;*/*&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;keep-alive&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Cache-Control&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;no-cache&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Pragma&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;no-cache&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can see that the &lt;code&gt;Response-Counter&lt;/code&gt; header is in our list of headers that can be exposed. If we were building a Javascript XHR then the browser would allow you to see the &lt;code&gt;Response-Counter&lt;/code&gt; but not other non-standard fields such as &lt;code&gt;X-Powered-By&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;preflight-checks&quot;&gt;Preflight checks&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s do something a bit more complex that requires a &lt;strong&gt;preflight request&lt;/strong&gt;, which is essentially a pre-check to see whether our request is acceptable before attempting it for real. We&amp;#8217;ll set the headers &lt;code&gt;Access-Control-Request-Method&lt;/code&gt; to &lt;code&gt;PATCH&lt;/code&gt; and &lt;code&gt;Access-Control-Request-Headers&lt;/code&gt; to &lt;code&gt;X-APIMAN-EXCELLENT&lt;/code&gt;. Again, we&amp;#8217;re using a permitted origin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To simulate it using cURL, let&amp;#8217;s do:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;curl -X OPTIONS -k -v -H 'Origin: http://newcastle.local' -H 'Access-Control-Request-Method: PATCH' -H 'Access-Control-Request-Headers: X-APIMAN-EXCELLENT' https://127.0.0.1:8443/apiman-gateway/Foo/Bar/1.0
&amp;gt; OPTIONS /apiman-gateway/Foo/Bar/1.0 HTTP/1.1
&amp;gt; User-Agent: curl/7.37.1
&amp;gt; Host: 127.0.0.1:8443
&amp;gt; Accept: */*
&amp;gt; Origin: http://newcastle.local
&amp;gt; Access-Control-Request-Method: PATCH
&amp;gt; Access-Control-Request-Headers: X-APIMAN-EXCELLENT
&amp;gt;
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Access-Control-Allow-Headers: X-APIMAN-EXCELLENT
&amp;lt; Access-Control-Expose-Headers: Response-Counter
&amp;lt; Access-Control-Allow-Origin: http://newcastle.local
&amp;lt; Access-Control-Max-Age: 9001
&amp;lt; Access-Control-Allow-Methods: PATCH
&amp;lt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;liftoff&quot;&gt;Liftoff&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, the plugin gave us permission to continue on and make our real request with that origin, header and verb. In the real world, the browser would go ahead and do exactly that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the preflight requests never go through to the service itself, they are CORS specific and the response is generated on the gateway by the CORS policy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;in-conclusion&quot;&gt;In conclusion&amp;#8230;&amp;#8203;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We built up a CORS configuration and tested out its functionality. Thankfully, it was pretty easy!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. One of our official plugins, the rest of which can be viewed at &lt;a href=&quot;https://github.com/apiman/apiman-plugins/&quot; class=&quot;bare&quot;&gt;https://github.com/apiman/apiman-plugins/&lt;/a&gt;. You can build and deploy your plugins publicly or privately in a similar manner
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt;. Use the version corresponding to your selected release of apiman
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_3&quot;&gt;
&lt;a href=&quot;#_footnoteref_3&quot;&gt;3&lt;/a&gt;. For simplicity&amp;#8217;s sake, I suggest using the instructions in the &lt;em&gt;'Or simply try this&amp;#8230;&amp;#8203;'&lt;/em&gt; box
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_4&quot;&gt;
&lt;a href=&quot;#_footnoteref_4&quot;&gt;4&lt;/a&gt;. If you used the quickstart, the defaults are U: admin P: admin123!
&lt;/div&gt;
&lt;/div&gt;</description><category term="security" /><category term="plugin" /><category term="policy" /><category term="cors" /><pubDate>Thu, 02 Jul 2015 15:00:00 +0100</pubDate>
				<link>https://apiman.io/blog/security/plugin/policy/cors/2015/07/02/cors.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/security/plugin/policy/cors/2015/07/02/cors.html</guid>
			</item><item>
				<title>Cover yourself up! Protecting your services with mutual auth</title><dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author><description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last thing you want after carefully setting up your system with apiman is for someone to be able to call around the gateway and hit your services directly. The typical solution for this is to lock down your network so that the only publicly accessible part is the apiman gateway, whilst services are hidden in the private part of the network, which apiman can access, but not someone in the outside world. However, in some situations fine-grained network controls may not be available, such as the cloud; or, you may wish to have an additional layer of security to be reassured that no funny business is going on (such as imposters).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The class of solutions to this problem generally falls under the banner of &lt;strong&gt;mutual authentication&lt;/strong&gt;. One such mutual auth offering apiman supports is Mutually Authenticated TLS&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-is-mutual-transport-layer-security-mutual-tls&quot;&gt;What is mutual transport layer security (Mutual TLS)?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most developers are familiar with SSL/TLS; it facilitates authentication via certificates followed by the establishment of an encrypted channel between the parties. It is overwhelmingly used in a one-way configuration: the client (often a browser) connects to a server, inspects the certificates it presents, and makes a determination as to whether the server is trustworthy. The connection is only made if the client is satisfied that the server is who it claims to be. In general, the server makes no determination as to who the client is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, in a typical apiman setup the gateway is acting as the client and the services&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/sup&gt; act as the servers. Clearly, if we wish to prevent anyone other than approved clients from connecting directly to our services then unidirectional authentication is insufficient: we must ascertain the identities of &lt;em&gt;both&lt;/em&gt; client and server before establishing a connection. In essence, each party must present certificates that the other party trusts. This a great way to prevent anyone from side-stepping our gateway, and even better, it also stops any interlopers from sneaking into the system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Luckily, apiman makes this &lt;a href=&quot;https://www.apiman.io/latest/installation-guide.html#_how_to_enable_mtls_mutual_ssl_support_for_endpoint_security&quot;&gt;extremely easy to set this up&lt;/a&gt;, so let&amp;#8217;s dive in and explore what&amp;#8217;s possible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s assume 'node' refers generically to a participant in our system, either a gateway or a service.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two main elements we need to work with: &lt;strong&gt;keystores&lt;/strong&gt;, which contain a node&amp;#8217;s private key material, and &lt;strong&gt;truststores&lt;/strong&gt;, which contain public certificates instructing the node whom it should trust.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ideally, each node should have its own keystore, whose key material is signed by a &lt;strong&gt;trusted certificate authority&lt;/strong&gt;; a trusted party whose signature indicates that the holder of the certificate is trustworthy. In many organisations there is an internal certificate authority which will sign or issue certificates. If we add a CA&amp;#8217;s certificate to our node&amp;#8217;s keystores, then &lt;em&gt;any&lt;/em&gt; certificate issued by it will be trusted by virtue of the issuer&amp;#8217;s authority. This approach scales excellently, because we can issue an unlimited number of new certificates without needing to add them to our truststores.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It bears mentioning that any applications&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_3&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_3&quot; title=&quot;View footnote.&quot;&gt;3&lt;/a&gt;]&lt;/sup&gt; legitimately using our gateway will never be exposed to any mutual auth issues; they will establish a standard one-way authenticating TLS connection that is terminated at the gateway, with the gateway then establishing the two-way TLS connection to the service.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.apiman.io/blog/images/generated/gateway-mtls.svg&quot; alt=&quot;gateway mtls&quot; width=&quot;790&quot; height=&quot;466&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Simple mutual auth setup&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the services trust the gateway (and vice versa), but the services &lt;em&gt;do not&lt;/em&gt; trust the application. The application tries its luck and attempts to bypass the gateway, but it doesn&amp;#8217;t hold a trusted certificate, so it fails.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-keys-to-success&quot;&gt;The keys to success&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Remember, this is just a quick blog demonstration; you need to take extreme care with how you look after your key infrastructure to avoid a catastrophic security incident. If you&amp;#8217;re unsure, consult someone who knows what they&amp;#8217;re doing!
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;truststore&quot;&gt;Truststore&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s create a simple shared truststore that we&amp;#8217;ll use on all of our nodes. We&amp;#8217;re going to imagine that we have an internal root CA called &lt;code&gt;apimanCA&lt;/code&gt;, and that whomever controls it has taken &lt;a href=&quot;https://i.imgur.com/sYeorwQ.png&quot;&gt;appropriate security precautions&lt;/a&gt; to ensure no baddies get their certificates signed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;keytool -import -keystore shared_trust_store.jks -file apimanCA.cer -alias apimanCA&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s the easy bit done, now onto key wrangling.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;keystore&quot;&gt;Keystore&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each of our nodes needs its own keystore, which we can create using &lt;code&gt;keytool&lt;/code&gt;, followed by generating a &lt;em&gt;certificate signing request&lt;/em&gt; (CSR), which we can then send to our CA to be signed:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;keytool -keystore gateway_ks.jks -genkey -alias gateway -keyalg rsa
keytool -keystore gateway_ks.jks -certreq -alias gateway -keyalg rsa -file gateway.csr

keytool -keystore service_a_ks.jks -genkey -alias service_a -keyalg rsa
keytool -keystore service_a_ks.jks -certreq -alias service_a -keyalg rsa -file service_a.csr&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Do the same for &lt;em&gt;each of your services&lt;/em&gt;, and send off the &lt;code&gt;csr&lt;/code&gt; files to be signed by CA (internal or otherwise). They should come back as certificate replies in one of several formats, import them back into their &lt;em&gt;corresponding keystores&lt;/em&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;keytool -import -keystore gateway_ks.jks -file gateway.cer -alias gateway
keytool -import -keystore service_a_ks.jks -file service_a.cer -alias service_a&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;hooking-it-up&quot;&gt;Hooking it up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Your services may not use Java, so you&amp;#8217;ll need to find the appropriate solution for enabling mutual TLS in your language&amp;#8217;s ecosystem. It doesn&amp;#8217;t really matter, as long as you have the appropriate certificates hooked in and have set &lt;strong&gt;client authentication to required&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;gateway-to-heaven&quot;&gt;Gateway to Heaven&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s easy to set up the gateway, but you should be especially careful about what you twiddle with, as the security implications could be important. Let&amp;#8217;s edit &lt;code&gt;apiman.properties&lt;/code&gt; on our gateway(s) with a few simple settings to test things out:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;properties&quot;&gt;# ---------------------------------------------------------------------
# SSL/TLS settings for the gateway connector(s).
# ---------------------------------------------------------------------

# Trust store contains certificate(s) trusted by gateway.
apiman-gateway.connector-factory.tls.trustStore=/path/to/shared_trust_store.jks
apiman-gateway.connector-factory.tls.trustStorePassword=password

# Key store contains gateway's keys (including private components: keep it safe).
apiman-gateway.connector-factory.tls.keyStore=/path/to/gateway_ks.jks
apiman-gateway.connector-factory.tls.keyStorePassword=password
apiman-gateway.connector-factory.tls.keyPassword=password

# Whether certificate host checks should be bypassed. *Use with great care.*
apiman-gateway.connector-factory.tls.allowAnyHost=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last option is to make our testing easier by removing hostname checks on the certificates, but you should disable that in production. Have a look at &lt;a href=&quot;https://www.apiman.io/latest/installation-guide.html#_make_changes_to_apiman_properties_3&quot;&gt;our setup guide&lt;/a&gt; for a full list of options.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;service-is-everything&quot;&gt;Service is Everything&lt;/h3&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You must explicitly enable client authentication for any services you want protected by mutual TLS.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s a small Java example using Jetty to create a tiny service with mutual authentication enabled. We hook up our &lt;em&gt;keystore&lt;/em&gt; and &lt;em&gt;truststore&lt;/em&gt; with respective hard-to-guess passwords, and set &lt;code&gt;setNeedClientAuth(true)&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; main(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;... args) &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;Exception&lt;/span&gt; {
      Server server = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Server();
      server.setStopAtShutdown(&lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;);

      HttpConfiguration http_config = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HttpConfiguration();
      http_config.setSecureScheme(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
      http_config.setSecurePort(&lt;span class=&quot;integer&quot;&gt;8009&lt;/span&gt;);

      SslContextFactory sslContextFactory = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SslContextFactory();
      sslContextFactory.setKeyStorePath(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/tmp/keys/service_a_ks.jks&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
      sslContextFactory.setKeyStorePassword(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
      sslContextFactory.setKeyManagerPassword(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
      sslContextFactory.setTrustStorePath(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/tmp/keys/shared_trust_store.jks&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
      sslContextFactory.setTrustStorePassword(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
      &lt;span class=&quot;comment&quot;&gt;// Important: Require client auth&lt;/span&gt;
      sslContextFactory.setNeedClientAuth(&lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;);

      HttpConfiguration https_config = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HttpConfiguration(http_config);
      https_config.addCustomizer(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SecureRequestCustomizer());

      ServerConnector sslConnector = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ServerConnector(server, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SslConnectionFactory(
              sslContextFactory, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http/1.1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;), &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HttpConnectionFactory(https_config));
      sslConnector.setPort(&lt;span class=&quot;integer&quot;&gt;8009&lt;/span&gt;);
      server.addConnector(sslConnector);
      server.setHandler(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AbstractHandler() {

          &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; handle(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; target, Request baseRequest,
                  HttpServletRequest request, HttpServletResponse response) &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;IOException&lt;/span&gt;,
                  ServletException {
              response.setContentType(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;text/html;charset=utf-8&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
              response.setStatus(HttpServletResponse.SC_OK);
              baseRequest.setHandled(&lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;);
              response.getWriter().println(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;apiman saves the day, again!&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
          }
      });
      server.start();
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fire-it-up&quot;&gt;Fire it up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Restart everything, and you should be ready to test it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When creating a service that is protected by mutual TLS you should set the &lt;strong&gt;API Security&lt;/strong&gt; dropdown in the &lt;strong&gt;Implementation&lt;/strong&gt; tab to &lt;code&gt;MTLS/Two-Way-SSL&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;https://www.apiman.io/blog/images/2015-06-16/enable-mtls.png&quot; alt=&quot;enable mtls&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If things don&amp;#8217;t seem to be working quite how you expected, you&amp;#8217;ll probably notice that the error messages emitted are fairly vague. If you need more information to figure out what&amp;#8217;s going on then you can pass the flag &lt;code&gt;-Djavax.net.debug=all&lt;/code&gt;, which will print helpful debug info from &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/guides/security/jsse/ReadDebug.html&quot;&gt;Java&amp;#8217;s SSL subsystems&lt;/a&gt; onto the console.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;./bin/standalone.sh -Djavax.net.debug=all -c standalone-apiman.xml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mutually authenticated TLS is a good way to ensure both client and server are who they claim to be before connecting to one another. If you need to prevent unauthorized direct access to your services, this is an option worth considering.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. Also commonly referred to as MTLS, MSSL, 2WAY, client authenticated TLS/SSL, two-way SSL, amongst other names!
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt;. We refer to the set of APIs managed by apiman as services
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_3&quot;&gt;
&lt;a href=&quot;#_footnoteref_3&quot;&gt;3&lt;/a&gt;. Applications are the users of our services, like browsers, mobile apps, etc
&lt;/div&gt;
&lt;/div&gt;</description><category term="gateway" /><category term="security" /><category term="mutual-auth" /><category term="ssl" /><category term="mtls" /><pubDate>Tue, 16 Jun 2015 17:00:00 +0100</pubDate>
				<link>https://apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/2015/06/16/mtls-mutual-auth.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/2015/06/16/mtls-mutual-auth.html</guid>
			</item><item>
				<title>Microservices Architecture Day Appearance</title><dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author><description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I had the pleasure of presenting on apiman at the recent Microservices Architecture Developer Day, with our colleague Kurt delivering a short demo of our software running within &lt;a href=&quot;https://www.fabric8.io&quot;&gt;Fabric8&lt;/a&gt;. It was particularly enjoyable meeting developers who are interested in, or are already using, apiman - so, thank you for your insightful questions both during, and after, the presentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Given the packed schedule, there was a limited amount of time to explore apiman plus microservices, and hence this seems like a good opportunity to write a blog post expanding upon the themes I touched upon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, if you&amp;#8217;re interested in understanding the value API management can have in a microservices architecture; please, read on!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;services-services-everywhere&quot;&gt;Services, services, everywhere!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A &lt;a href=&quot;https://www.kubernetes.io&quot;&gt;microservices architecture&lt;/a&gt; encourages the decomposition of problems into small, isolated and reusable chunks; much in the same spirit as UNIX&amp;#8217;s &lt;em&gt;do one job and do it well&lt;/em&gt; philosophy. This brings with it a whole raft of benefits, for instance: we can scale each component independently, avoiding unnecessarily dragging along other components which just happen to reside in the same monolith; we can easily have a single team wholly responsible for a single microservice&amp;#8217;s lifecycle, simplifying debugging and allowing them to use their skills and technologies of choice; and, we can easily create new functionality via composition. However, this proliferation of heterogeneous services poses some challenges, a significant subset of which API Management is a key solution to.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;avoiding-reimplementation-of-cross-cutting-functionality&quot;&gt;Avoiding reimplementation of cross-cutting functionality&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A problem that can quickly become apparent is that key pieces of important common functionality are required that are difficult or undesirable to reimplement in every API. Good examples of this would be security concerns like authentication and authorization, or business concerns like rate-limiting, billing and auditing &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s quite clear why we would want to avoid this situation. Imagine we have hundreds of microservices we need to expose to the outside world; the nightmare scenario is that we have to implement complex and prone-to-change authentication and authorization schemes on &lt;em&gt;each&lt;/em&gt; of them. Quite aside from bloating and complicating our microservices, it is going to be extremely difficult to guarantee that each service has implemented all of this common functionality consistently and correctly - we could quite plausibly be leaving holes in our system simply by virtue of surface area.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead, we can drastically improve the situation by using apiman to relieve individual services of that burden; simply configure and manage those tasks in a single, well-known location. We register our APIs with apiman, apply appropriate policies, and route public traffic through the gateway. We leave apiman to deal with these common problems, and let the microservice&amp;#8217;s developers focus on their core task, rather than burning time on ancillary concerns.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fickle-business-requirements&quot;&gt;Fickle business requirements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Access to APIs often has business requirements which are independent of the core functionality the service itself offers. For instance, whilst a mapping application might only be interested in coordinates, its business requirements could dictate that we need to capture metrics; initiate contracts with, and issue keys to, API consumers; and, audit their interactions with the system. Quite aside from the microservices &lt;em&gt;faux pas&lt;/em&gt; of contaminating a service with external business logic, we generally want to avoid this situation, as business requirements tend to change rapidly in response to events which are unrelated to the service&amp;#8217;s purpose.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For instance, marketing decide that the service is so popular that they&amp;#8217;re going to offer two levels of access a &lt;em&gt;gold plan&lt;/em&gt; and a &lt;em&gt;silver plan&lt;/em&gt;; one of which allows 1000 requests per minute, the other 500. The developers trudge off and implement this in their service. Six months later, they decide they want to change this to bandwidth limits, and the &lt;em&gt;silver plan&lt;/em&gt; should be able to do only &lt;em&gt;GET&lt;/em&gt; requests. The developers of a variety of services are taken off their existing tasks to implement these changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Shifting business requirements are a natural part the software industry, however, the implementation burden is amplified in a microservices architecture. Thankfully, we can delegate that workload to our API Management solution, and even better, with the apiman UI it&amp;#8217;s possible for non-technical people to create and manage the entire process. This is excellent from both standpoints, as the developers can concentrate on their core tasks, and the business people can take direct ownership and responsibility for implementing their policies; the two domains are kept entirely separate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Naturally, there will be cases where the in-built policies don&amp;#8217;t meet your specific needs. Apiman was designed grounds-up with the assumption that many users would want to write custom policies, and as such, we&amp;#8217;ve &lt;a href=&quot;https://www.apiman.io/latest/developer-guide.html#_plugins&quot;&gt;written a number of guides&lt;/a&gt; &lt;a href=&quot;https://java.dzone.com/articles/customizing-jboss-apiman&quot;&gt;on the topic&lt;/a&gt;. It&amp;#8217;s extremely easy to create, install and version control your own policies, including UI components that make it trivially easy for &lt;a href=&quot;https://www.apiman.io/latest/user-guide.html#_plugins&quot;&gt;non-technical people to drive&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;clear-demarcation&quot;&gt;Clear demarcation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of all the microservices constituting an entire system, it is likely that only a subset of those should be exposed to the outside world. The rest are there to provide internal or compositional functionality. The apiman gateway can provide a natural boundary between public and private; only those services that are explicitly being offered through the gateway are visible, and the rest can be walled off (either at the network level, or via &lt;a href=&quot;https://www.apiman.io/latest/installation-guide.html#_how_to_enable_mtls_mutual_ssl_support_for_endpoint_security&quot;&gt;mutual authentication&lt;/a&gt; mechanisms).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;watching-the-world-go-by&quot;&gt;Watching the world go by&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we want to determine the value of a service to our organisation, then we need some objective metrics to determine &lt;em&gt;how&lt;/em&gt; it is being used and whether it is performing as well as we hoped. Ideally, metrics should be collected in a manner that is consistent amongst all services to ensure that comparisons can be made fairly. The apiman gateway is in a unique position to collect lots of interesting data; siting at the transit point between the outside world and the services being offered. We collect, amongst other things, timing information; round-trip latencies; detailed error information (error codes, error output); application, service and organisation IDs. These can be analysed to produce a rich set of information which you can use to characterise the behaviour (or misbehaviour) of your services, including how external applications are interacting with them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Metrics collection, analysis and visualisation is an area we&amp;#8217;re actively working hard on: in the community we&amp;#8217;re looking to provide interesting opportunities to tie in with popular open source data-sinks and visualisers, whilst in integrated environments, we look to play well with native metrics collection infrastructure.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;papers-please&quot;&gt;Papers, please&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You may have lots of services to offer, but unless people can find them, they won&amp;#8217;t know about how useful they are. Hence, it&amp;#8217;s important to have a well-known service registry through which internal and external consumers can find and consume your APIs. Developers can easily log into the apiman UI to browse and search for registered APIs, and we also make it easy to integrate into any other registry, such as Fabric8&amp;#8217;s.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;in-conclusion&quot;&gt;In conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;API Management will be at the heart of many successful microservices setups. It unifies common functionality; provides a place to discover, register and manage services; reduces the scope for costly errors and inconsistencies; and, provides a natural barrier between internal and external where it can collect valuable metrics and audit information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It was a pleasure to meet all of those developers who are interested in apiman - and it was particularly interesting to hear your use-cases. I would encourage you to keep giving us your feedback, as it directly impacts our features, priorities and schedule.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. See our &lt;a href=&quot;https://www.apiman.io/latest/user-guide.html#_typical_use_cases&quot;&gt;user guide&lt;/a&gt; and be sure to look at our range of &lt;a href=&quot;https://github.com/apiman/apiman-plugins&quot;&gt;official plugin policies&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category term="microservices" /><category term="conference" /><category term="talk" /><pubDate>Mon, 15 Jun 2015 21:30:00 +0100</pubDate>
				<link>https://apiman.io/blog/microservices/conference/talk/2015/06/15/apiman-msa-day.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/microservices/conference/talk/2015/06/15/apiman-msa-day.html</guid>
			</item><item>
				<title>Adding a BASIC Authentication Policy to a Managed Service in JBoss apiman</title><dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author><description>&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-06-11/1-apiman_logo.png&quot; alt=&quot;apiman logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this, the fourth article in the series on apiman, JBoss‚Äô new API Management framework, we‚Äôll examine how apiman enables you to not just manage services, but implement a layer of security to the services by adding an authentication requirement when clients access a managed service.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;securing-client-access-to-your-managed-services&quot;&gt;Securing Client Access to your Managed Services&lt;/h2&gt;

&lt;p&gt;As we‚Äôve seen in the previous articles in this series, apiman enables you to govern the usage of the services that it manages by defining policies in the Managament UI that are then applied at runtime by the API Gateway. The apiman API Gateway applies the policy rules that you define to requests that it proxies to the managed service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-06-11/apiman-2.png&quot; alt=&quot;apiman logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The OOTB policies that are packaged with apiman enable you to apply a variety of types of controls, including rate limiting (where access to a service is assigned a usage threshold) and black/whitelisting by IP address (where the client‚Äôs IP address governs their access to the service).&lt;/p&gt;

&lt;p&gt;However, managing a service with apiman does not automatically make that service secure. Happily, however, apiman provides a policy that enables you to easily set up authentication to control access to your managed service. (Note that this policy governs the clients‚Äô authenticated access to the managed service, and not establishing a secure connection where apiman authenticates the back-end services. In other words, in this article, we‚Äôre interested in adding authentication between the blue and pink boxes in the above diagram.)&lt;/p&gt;

&lt;h2 id=&quot;adding-a-basic-authentication-policy-to-a-managed-service&quot;&gt;Adding a BASIC Authentication Policy to a Managed Service&lt;/h2&gt;

&lt;p&gt;apiman is packaged with multiple pre-configured policies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Authorization - Access to services‚Äô resources is controlled by user roles.&lt;/li&gt;
  &lt;li&gt;BASIC Authentication - A username/password is required to access a service.&lt;/li&gt;
  &lt;li&gt;Ignored Resources - Paths to services‚Äô resources that will not be accessible. Requests to these service resource paths return a 404 (not found) error.&lt;/li&gt;
  &lt;li&gt;IP Blacklist - Clients with specific IP address will be blocked from accessing a service.&lt;/li&gt;
  &lt;li&gt;IP Whitelist - And, clients with specific IP address will not  be blocked from accessing a service.&lt;/li&gt;
  &lt;li&gt;Rate Limiting - Access to a service is limited by the number of requests in a defined time period. We demonstrated an example of a rate limiting policy in the first article in this series.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We‚Äôre interested in the BASIC Authentication Policy. Let‚Äôs take a closer look. The dialog to add a BASIC authentication policy to a service looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-06-11/apiman-3.png&quot; alt=&quot;apiman logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In creating the BASIC policy, we define an Authentication Realm (think of this as an area to be protected, within which usernames and passwords exist) and an optional HTTP header. The optional HTTP header is used to optionally pass the user‚Äôs principal to the back-end service through an HTTP header. This is useful if the back-end system needs to know the username of the user calling it (e.g. to do user-specific operation). The ‚ÄúTransport security required‚Äù checkbox, if enabled, will cause the policy to fail if a client tries to connect to the service over http. The Policy will only accept credentials over https.&lt;/p&gt;

&lt;p&gt;We‚Äôll keep the Identity Source simple and select ‚ÄúStatic Identities‚Äù and then define a user. Note that while this static approach is fine for testing purposes, you will want use one of the other Identity Source options (JBDS or LDAP) for a production environment as they can better handle a large number of users.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-06-11/apiman-4.png&quot; alt=&quot;apiman logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It‚Äôs important to remember that, in BASIC authentication, one of the factors that makes this, well, basic in nature, is that the username/password that you define are encoded (this is unencrypted base64 encoded text) when they are sent to the server. Since the text is not encrypted, it‚Äôs at risk of being copied and then used in an attack. For this reason, it‚Äôs safer to select the transport security option to configure SSL encryption.&lt;/p&gt;

&lt;p&gt;To illustrate, here‚Äôs Java code that can encode and then decode the username:password string:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; Base64.Encoder encoder &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Base64.getEncoder&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 String normalString &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;user1&quot;&lt;/span&gt; + &lt;span class=&quot;s2&quot;&gt;&quot;:&quot;&lt;/span&gt; + &lt;span class=&quot;s2&quot;&gt;&quot;password1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 String encodedString &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; encoder.encodeToString&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;normalString.getBytes&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;StandardCharsets.UTF_8&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 System.out.println &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;The encoded string is: &quot;&lt;/span&gt; + encodedString&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
             
 Decoder decoder &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Base64.getDecoder&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 byte[] unencodedStringArray &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; decoder.decode&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;encodedString&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 String unencodedString &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new String &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;unencodedStringArray&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 System.out.println &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;The unencoded string is: &quot;&lt;/span&gt; + unencodedString&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
   
 The encoded string is: dXNlcjE6cGFzc3dvcmQx  
 The unencoded string is: user1:password1  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So - unlike encrypted strings, your encoded username and password strings are not secure!&lt;/p&gt;

&lt;p&gt;## When a Request is made to the Service&lt;/p&gt;

&lt;p&gt;It‚Äôs interesting to see step-by-step what happens when a request is made to the service and the BASIC authentication policy is applied. Let‚Äôs take a look at the request and the responses. I used the ‚ÄúHttpFox‚Äù http analyzer (https://addons.mozilla.org/en-us/firefox/addon/httpfox/) to ‚Äúlisten in‚Äù on the requests sent to the server and the responses sent back.&lt;/p&gt;

&lt;p&gt;Here‚Äôs the first request made to the service, notice that a username/password is not included.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Request-Line&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; GET /apiman-gateway/serviceProducerOrg/echossl/1.0?apikey&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;6f8784cd-5754-47b0-9b8b-b2eb8c5b190f HTTP/1.1  
 Host     localhost:8443  
 User-Agent     Mozilla/5.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;X11&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; Linux x86_64&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; rv:24.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Gecko/20100101 Firefox/24.0  
 Accept     text/html,application/xhtml+xml,application/xml&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.9,&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.8  
 Accept-Language     en-US,en&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.5  
 Accept-Encoding     gzip, deflate  
 Cookie     &lt;span class=&quot;nv&quot;&gt;__utma&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;111872281.1348865079.1409020839.1411395889.1419258109.7&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;__utmz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;111872281.1409020839.1.1.utmcsr&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;direct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;|utmccn&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;direct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;|utmcmd&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;none&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s_fid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;72CCAD206D09146C-233B60F47DBEA290  
 Connection     keep-alive  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The response, as we expected, shows that the request has triggered an authentication failure. This is due to the authentication requirement that we defined and is being applied by the API Gateway. Note the 401 error code and the reference to BASIC authentication:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Status-Line&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     HTTP/1.1 401 Unauthorized  
 X-Powered-By     Undertow/1  
 Server     WildFly/8  
 X-Policy-Failure-Type     Authentication  
 Date     Wed, 03 Jun 2015 13:43:26 GMT  
 Connection     keep-alive  
 WWW-Authenticate     BASIC &lt;span class=&quot;nv&quot;&gt;realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myRealm&quot;&lt;/span&gt;  
 X-Policy-Failure-Code     10004  
 Content-Type     application/json  
 Content-Length     165  
 X-Policy-Failure-Message     BASIC authentication failed.  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The browser then automatically pops up a dialog for us to enter the username and password:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-06-11/apiman-5.png&quot; alt=&quot;apiman logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A request is then sent that includes the username and password encoded into a string. In this request, the encoded (but not encrypted) username and password are included:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Request-Line&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     GET /apiman-gateway/serviceProducerOrg/echossl/1.0?apikey&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;6f8784cd-5754-47b0-9b8b-b2eb8c5b190f HTTP/1.1  
 Host     localhost:8443  
 User-Agent     Mozilla/5.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;X11&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; Linux x86_64&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; rv:24.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Gecko/20100101 Firefox/24.0  
 Accept     text/html,application/xhtml+xml,application/xml&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.9,&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.8  
 Accept-Language     en-US,en&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.5  
 Accept-Encoding     gzip, deflate  
 Cookie     &lt;span class=&quot;nv&quot;&gt;__utma&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;111872281.1348865079.1409020839.1411395889.1419258109.7&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;__utmz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;111872281.1409020839.1.1.utmcsr&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;direct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;|utmccn&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;direct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;|utmcmd&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;none&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s_fid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;72CCAD206D09146C-233B60F47DBEA290  
 Connection     keep-alive  
 Authorization     Basic dXNlcjE6cGFzc3dvcmQx  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And, then we get the successful return code of 200 in a response:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Status-Line&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     HTTP/1.1 200 OK  
 Connection     keep-alive  
 X-Powered-By     Undertow/1  
 Server     WildFly/8  
 Content-Length     755  
 Content-Type     application/json  
 Date     Wed, 03 Jun 2015 13:43:34 GMT  
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h2&gt;

&lt;p&gt;Just because a service is managed doesn‚Äôt automatically make it secure. JBoss apiman provides you with multiple options to add an authentication requirement when clients access your managed service.&lt;/p&gt;

&lt;h2 id=&quot;authors-acknowledgements&quot;&gt;Author‚Äôs Acknowledgements&lt;/h2&gt;

&lt;p&gt;As always, the author would like to acknowledge Eric Wittmann and the apiman team for their  review comments and suggestions on writing this post, and for adding new features to apiman!&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;p&gt;apiman&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://www.apiman.io&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Previous articles in this series:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://java.dzone.com/articles/impatient-new-users&lt;/li&gt;
  &lt;li&gt;https://java.dzone.com/articles/customizing-jboss-apiman&lt;/li&gt;
  &lt;li&gt;https://java.dzone.com/articles/jboss-apiman-api-manager-rest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTTP Authentication: Basic and Digest Access Authentication&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://tools.ietf.org/html/rfc2617&lt;/li&gt;
&lt;/ul&gt;

</description><category term="authentication" /><category term="policy" /><pubDate>Thu, 11 Jun 2015 11:00:00 +0000</pubDate>
				<link>https://apiman.io/blog/authentication/policy/2015/06/11/basic-auth.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/authentication/policy/2015/06/11/basic-auth.html</guid>
			</item><item>
				<title>Adding a BASIC Authentication Policy to a Managed API in JBoss apiman</title><dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author><description>&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-06-11/1-apiman_logo.png&quot; alt=&quot;apiman logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this, the fourth article in the series on apiman, JBoss‚Äô new API Management framework, we‚Äôll examine how apiman enables you to not just manage APIs, but implement a layer of security to the APIs by adding an authentication requirement when client apps access a managed API.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;securing-client-app-access-to-your-managed-apis&quot;&gt;Securing Client App Access to your Managed APIs&lt;/h2&gt;

&lt;p&gt;As we‚Äôve seen in the previous articles in this series, apiman enables you to govern the usage of the APIs that it manages by defining policies in the Managament UI that are then applied at runtime by the API Gateway. The apiman API Gateway applies the policy rules that you define to requests that it proxies to the managed API:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-06-11/apiman-2.png&quot; alt=&quot;apiman logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The OOTB policies that are packaged with apiman enable you to apply a variety of types of controls, including rate limiting (where access to an API is assigned a usage threshold) and black/whitelisting by IP address (where the client app‚Äôs IP address governs their access to the API).&lt;/p&gt;

&lt;p&gt;However, managing an API with apiman does not automatically make that API secure. Happily, however, apiman provides a policy that enables you to easily set up authentication to control access to your managed API. (Note that this policy governs the client apps‚Äô authenticated access to the managed API, and not establishing a secure connection where apiman authenticates the back-end APIs. In other words, in this article, we‚Äôre interested in adding authentication between the blue and pink boxes in the above diagram.)&lt;/p&gt;

&lt;h2 id=&quot;adding-a-basic-authentication-policy-to-a-managed-api&quot;&gt;Adding a BASIC Authentication Policy to a Managed API&lt;/h2&gt;

&lt;p&gt;apiman is packaged with multiple pre-configured policies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Authorization - Access to APIs‚Äô resources is controlled by user roles.&lt;/li&gt;
  &lt;li&gt;BASIC Authentication - A username/password is required to access an API.&lt;/li&gt;
  &lt;li&gt;Ignored Resources - Paths to APIs‚Äô resources that will not be accessible. Requests to these API resource paths return a 404 (not found) error.&lt;/li&gt;
  &lt;li&gt;IP Blacklist - Client apps with specific IP address will be blocked from accessing an API.&lt;/li&gt;
  &lt;li&gt;IP Whitelist - And, client apps with specific IP address will not  be blocked from accessing an API.&lt;/li&gt;
  &lt;li&gt;Rate Limiting - Access to an API is limited by the number of requests in a defined time period. We demonstrated an example of a rate limiting policy in the first article in this series.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We‚Äôre interested in the BASIC Authentication Policy. Let‚Äôs take a closer look. The dialog to add a BASIC authentication policy to an API looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-06-11/apiman-3.png&quot; alt=&quot;apiman logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In creating the BASIC policy, we define an Authentication Realm (think of this as an area to be protected, within which usernames and passwords exist) and an optional HTTP header. The optional HTTP header is used to optionally pass the user‚Äôs principal to the back-end API through an HTTP header. This is useful if the back-end system needs to know the username of the user calling it (e.g. to do user-specific operation). The ‚ÄúTransport security required‚Äù checkbox, if enabled, will cause the policy to fail if a client app tries to connect to the API over http. The Policy will only accept credentials over https.&lt;/p&gt;

&lt;p&gt;We‚Äôll keep the Identity Source simple and select ‚ÄúStatic Identities‚Äù and then define a user. Note that while this static approach is fine for testing purposes, you will want use one of the other Identity Source options (JBDS or LDAP) for a production environment as they can better handle a large number of users.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-06-11/apiman-4.png&quot; alt=&quot;apiman logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It‚Äôs important to remember that, in BASIC authentication, one of the factors that makes this, well, basic in nature, is that the username/password that you define are encoded (this is unencrypted base64 encoded text) when they are sent to the server. Since the text is not encrypted, it‚Äôs at risk of being copied and then used in an attack. For this reason, it‚Äôs safer to select the transport security option to configure SSL encryption.&lt;/p&gt;

&lt;p&gt;To illustrate, here‚Äôs Java code that can encode and then decode the username:password string:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; Base64.Encoder encoder &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Base64.getEncoder&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 String normalString &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;user1&quot;&lt;/span&gt; + &lt;span class=&quot;s2&quot;&gt;&quot;:&quot;&lt;/span&gt; + &lt;span class=&quot;s2&quot;&gt;&quot;password1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 String encodedString &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; encoder.encodeToString&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;normalString.getBytes&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;StandardCharsets.UTF_8&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 System.out.println &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;The encoded string is: &quot;&lt;/span&gt; + encodedString&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
             
 Decoder decoder &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Base64.getDecoder&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 byte[] unencodedStringArray &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; decoder.decode&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;encodedString&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 String unencodedString &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new String &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;unencodedStringArray&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 System.out.println &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;The unencoded string is: &quot;&lt;/span&gt; + unencodedString&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
   
 The encoded string is: dXNlcjE6cGFzc3dvcmQx  
 The unencoded string is: user1:password1  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So - unlike encrypted strings, your encoded username and password strings are not secure!&lt;/p&gt;

&lt;p&gt;## When a Request is made to the API&lt;/p&gt;

&lt;p&gt;It‚Äôs interesting to see step-by-step what happens when a request is made to the API and the BASIC authentication policy is applied. Let‚Äôs take a look at the request and the responses. I used the ‚ÄúHttpFox‚Äù http analyzer (https://addons.mozilla.org/en-us/firefox/addon/httpfox/) to ‚Äúlisten in‚Äù on the requests sent to the server and the responses sent back.&lt;/p&gt;

&lt;p&gt;Here‚Äôs the first request made to the API, notice that a username/password is not included.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Request-Line&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; GET /apiman-gateway/apiProducerOrg/echossl/1.0?apikey&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;6f8784cd-5754-47b0-9b8b-b2eb8c5b190f HTTP/1.1  
 Host     localhost:8443  
 User-Agent     Mozilla/5.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;X11&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; Linux x86_64&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; rv:24.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Gecko/20100101 Firefox/24.0  
 Accept     text/html,application/xhtml+xml,application/xml&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.9,&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.8  
 Accept-Language     en-US,en&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.5  
 Accept-Encoding     gzip, deflate  
 Cookie     &lt;span class=&quot;nv&quot;&gt;__utma&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;111872281.1348865079.1409020839.1411395889.1419258109.7&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;__utmz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;111872281.1409020839.1.1.utmcsr&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;direct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;|utmccn&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;direct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;|utmcmd&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;none&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s_fid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;72CCAD206D09146C-233B60F47DBEA290  
 Connection     keep-alive  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The response, as we expected, shows that the request has triggered an authentication failure. This is due to the authentication requirement that we defined and is being applied by the API Gateway. Note the 401 error code and the reference to BASIC authentication:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Status-Line&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     HTTP/1.1 401 Unauthorized  
 X-Powered-By     Undertow/1  
 Server     WildFly/8  
 X-Policy-Failure-Type     Authentication  
 Date     Wed, 03 Jun 2015 13:43:26 GMT  
 Connection     keep-alive  
 WWW-Authenticate     BASIC &lt;span class=&quot;nv&quot;&gt;realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;myRealm&quot;&lt;/span&gt;  
 X-Policy-Failure-Code     10004  
 Content-Type     application/json  
 Content-Length     165  
 X-Policy-Failure-Message     BASIC authentication failed.  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The browser then automatically pops up a dialog for us to enter the username and password:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-06-11/apiman-5.png&quot; alt=&quot;apiman logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A request is then sent that includes the username and password encoded into a string. In this request, the encoded (but not encrypted) username and password are included:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Request-Line&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     GET /apiman-gateway/apiProducerOrg/echossl/1.0?apikey&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;6f8784cd-5754-47b0-9b8b-b2eb8c5b190f HTTP/1.1  
 Host     localhost:8443  
 User-Agent     Mozilla/5.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;X11&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; Linux x86_64&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; rv:24.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Gecko/20100101 Firefox/24.0  
 Accept     text/html,application/xhtml+xml,application/xml&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.9,&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.8  
 Accept-Language     en-US,en&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.5  
 Accept-Encoding     gzip, deflate  
 Cookie     &lt;span class=&quot;nv&quot;&gt;__utma&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;111872281.1348865079.1409020839.1411395889.1419258109.7&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;__utmz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;111872281.1409020839.1.1.utmcsr&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;direct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;|utmccn&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;direct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;|utmcmd&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;none&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s_fid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;72CCAD206D09146C-233B60F47DBEA290  
 Connection     keep-alive  
 Authorization     Basic dXNlcjE6cGFzc3dvcmQx  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And, then we get the successful return code of 200 in a response:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Status-Line&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     HTTP/1.1 200 OK  
 Connection     keep-alive  
 X-Powered-By     Undertow/1  
 Server     WildFly/8  
 Content-Length     755  
 Content-Type     application/json  
 Date     Wed, 03 Jun 2015 13:43:34 GMT  
 &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h2&gt;

&lt;p&gt;Just because an API is managed doesn‚Äôt automatically make it secure. JBoss apiman provides you with multiple options to add an authentication requirement when client apps access your managed API.&lt;/p&gt;

&lt;h2 id=&quot;authors-acknowledgements&quot;&gt;Author‚Äôs Acknowledgements&lt;/h2&gt;

&lt;p&gt;As always, the author would like to acknowledge Eric Wittmann and the apiman team for their  review comments and suggestions on writing this post, and for adding new features to apiman!&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;p&gt;apiman&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://www.apiman.io&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Previous articles in this series:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://java.dzone.com/articles/impatient-new-users&lt;/li&gt;
  &lt;li&gt;https://java.dzone.com/articles/customizing-jboss-apiman&lt;/li&gt;
  &lt;li&gt;https://java.dzone.com/articles/jboss-apiman-api-manager-rest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTTP Authentication: Basic and Digest Access Authentication&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;https://tools.ietf.org/html/rfc2617&lt;/li&gt;
&lt;/ul&gt;

</description><category term="authentication" /><category term="policy" /><pubDate>Thu, 11 Jun 2015 11:00:00 +0000</pubDate>
				<link>https://apiman.io/blog/authentication/policy/2015/06/11/basic-auth-redux.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/authentication/policy/2015/06/11/basic-auth-redux.html</guid>
			</item><item>
				<title>Keycloak and dagger: Securing your services with OAuth2</title><dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author><description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One great advantage of API Management is centralising auth concerns, thereby avoiding burdensome reimplementation issues and streamlining your security processes. The good news is that you can easily configure apiman to handle many common auth use-cases, such as OAuth2 with our popular Keycloak OAuth2 policy which I&amp;#8217;ll outline in this blogpost.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;preparation&quot;&gt;Preparation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this example, let&amp;#8217;s assume we&amp;#8217;re using apiman&amp;#8217;s &lt;a href=&quot;https://www.apiman.io/latest/download.html&quot;&gt;quickstart&lt;/a&gt; setup and have it running. I suggest using the &lt;em&gt;'Or simply try this&amp;#8230;&amp;#8203;'&lt;/em&gt; box.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After you have your apiman quickstart running (replace &lt;strong&gt;apiman-1.1.3.Final&lt;/strong&gt; in the path below with whatever version you downloaded), we can live deploy a handy &lt;strong&gt;echo service&lt;/strong&gt; into our environment so we have something to test against:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;cd /tmp
git clone https://github.com/apiman/apiman-quickstarts.git
cd apiman-quickstarts/echo-service
git checkout 1.1.3.Final
mvn clean install
mvn wildfly:deploy&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;installing-the-plugin&quot;&gt;Installing the Plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Those amongst you with some experience of apiman may have noticed that the OAuth2 policy doesn&amp;#8217;t appear in the standard list of policies in the manager UI; that&amp;#8217;s because the OAuth2 policy is an example of an &lt;strong&gt;apiman plugin&lt;/strong&gt;, all of which are shipped separately from apiman, but are trivially easy to install. All you need to know is the GAV of the plugin, which in this case is:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;GAV&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Group&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;io.apiman.plugins&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Artifact&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;apiman-plugins-keycloak-oauth-policy&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Version&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.1.3.Final&lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/sup&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When logged into &lt;a href=&quot;http://localhost:8080/apimanui/&quot;&gt;the apiman manager UI&lt;/a&gt; as an administrator (for the quickstart that&amp;#8217;s u:`admin`, p:`admin123!`), navigate to the &lt;strong&gt;manage plugins&lt;/strong&gt; page:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;https://www.apiman.io/latest/user-guide.html#_plugins&quot;&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-06-03/sysadmin-manage-plugins.png&quot; alt=&quot;System Administration&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Select &lt;strong&gt;add plugin&lt;/strong&gt;, fill in the details as above, and &lt;strong&gt;add plugin&lt;/strong&gt;. That&amp;#8217;s it!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;setting-up&quot;&gt;Setting Up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two essential components to our system. First, is the &lt;a href=&quot;https://keycloak.jboss.org&quot;&gt;Keycloak server&lt;/a&gt;, an all-in-one &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_sign-on&quot;&gt;SSO&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Identity_management&quot;&gt;IdM&lt;/a&gt;; we&amp;#8217;ll configure it to be our identity source and handle the issuance of OAuth2 bearer tokens. Second, is the apiman OAuth2 policy; we&amp;#8217;ll set it up to validate the tokens precisely to our requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s assume we&amp;#8217;re going to protect a very simple &lt;strong&gt;echo service&lt;/strong&gt;, which echoes back to the requestor the details of any request made to it. It is located at &lt;code&gt;&lt;a href=&quot;http://localhost:8080/apiman-echo&quot; class=&quot;bare&quot;&gt;http://localhost:8080/apiman-echo&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;keycloak-server&quot;&gt;Keycloak Server&lt;/h3&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
There are a huge number of configuration permutations with Keycloak, and the most suitable approach will vary according to your requirements. It is highly recommended to consult the &lt;a href=&quot;https://keycloak.jboss.org/docs.html&quot;&gt;Keycloak guides&lt;/a&gt; to determine your optimal setup, as for the sake of brevity we&amp;#8217;re only going to cover a couple of trivial preconfigured scenarios.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, log into the &lt;a href=&quot;http://localhost:8080/auth/admin&quot;&gt;Keycloak server&lt;/a&gt;. If you&amp;#8217;re following our walkthrough, the log-in details are identical to those mentioned earlier (&lt;code&gt;admin&lt;/code&gt;, &lt;code&gt;admin123!&lt;/code&gt;). You can see that there is already an &lt;strong&gt;apiman&lt;/strong&gt; realm defined, but we&amp;#8217;re going to create a new one, so navigate to &lt;strong&gt;Add Realm&lt;/strong&gt; (top right), and import and upload &lt;a href=&quot;https://www.apiman.io/blog/resources/2015-06-04/stottie.json&quot;&gt;this demonstration realm definition&lt;/a&gt;; it provides an extremely simple setup where we have:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A realm: &lt;code&gt;stottie&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A single user: &lt;code&gt;rincewind&lt;/code&gt;, with password: &lt;code&gt;apiman&lt;/code&gt; and a realm role: &lt;code&gt;echomeister&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And, a client: &lt;code&gt;apiman&lt;/code&gt;, which is allowed direct grants via Keycloak&amp;#8217;s &lt;a href=&quot;https://keycloak.github.io/docs/userguide/keycloak-server/html/direct-access-grants.html&quot;&gt;RESTful Direct Access Grants API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s quickly test requesting ourselves an OpenID Connect OAuth2 token:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;curl -X POST http://127.0.0.1:8080/auth/realms/stottie/protocol/openid-connect/token  -H &amp;quot;Content-Type: application/x-www-form-urlencoded&amp;quot; -d &amp;quot;username=rincewind&amp;quot; -d 'password=apiman' -d 'grant_type=password' -d 'client_id=apiman'&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This should return some JSON similar to the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;{
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;access_token&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;eyJhbGciOiJSUzI1NiJ9...&amp;lt;SNIP&amp;gt;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;expires_in&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;300&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;refresh_expires_in&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1800&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;refresh_token&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;eyJhbGcg...&amp;lt;SNIP&amp;gt;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;not-before-policy&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;session-state&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;69974623-be8b-49d7-840a-0330c6bdde21&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the OAuth2 token we&amp;#8217;re interested in is contained within the &lt;code&gt;access_token&lt;/code&gt; field, with useful ancillary information about token validity and refreshing. If we base64 decode the token, we can see a lot interesting information, including the &lt;code&gt;echomiester&lt;/code&gt; realm role defined on &lt;code&gt;rincewind&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;{
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;jti&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;c89b8cf7-84ef-4f02-9954-f8d3d4321473&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1433414538&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;nbf&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;iat&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1433414238&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;iss&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://127.0.0.1:8080/auth/realms/stottie&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;aud&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;apiman&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;de4af322-85b2-4dbe-8d53-6a2ee29e4080&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;azp&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;apiman&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;session_state&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;69974623-be8b-49d7-840a-0330c6bdde21&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;client_session&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;b5bd36a0-d576-4593-be7b-4648612c25b8&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;allowed-origins&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [],
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;realm_access&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
        &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [
            &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;echomeister&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
        ]
    },
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;resource_access&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
        &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
            &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [
                &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;view-profile&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;manage-account&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
            ]
        }
    },
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;preferred_username&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;rincewind&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This demonstrates one OAuth2&amp;#8217;s most useful attributes: all the information required to validate a request is contained within the token itself.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;apiman-oauth2-policy&quot;&gt;Apiman OAuth2 Policy&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, log into apiman, and &lt;strong&gt;Create a New Organization&lt;/strong&gt;; let&amp;#8217;s call it &lt;strong&gt;&lt;em&gt;Newcastle&lt;/em&gt;&lt;/strong&gt;. Select the &lt;strong&gt;Services&lt;/strong&gt; tab, and add a &lt;strong&gt;New Service&lt;/strong&gt;; we&amp;#8217;ll name this one &lt;strong&gt;&lt;em&gt;EchoService&lt;/em&gt;&lt;/strong&gt; and then &lt;strong&gt;Create Service&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Select the &lt;strong&gt;Implementation&lt;/strong&gt; tab, and set the endpoint to our echo service, &lt;code&gt;&lt;a href=&quot;http://localhost:8080/apiman-echo&quot; class=&quot;bare&quot;&gt;http://localhost:8080/apiman-echo&lt;/a&gt;&lt;/code&gt;. Save and move onto the &lt;strong&gt;Plans&lt;/strong&gt; tab, where you should opt to &lt;strong&gt;Make this service public&lt;/strong&gt;. After saving, we can move onto the &lt;strong&gt;Policies&lt;/strong&gt; tab, where the interesting stuff starts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Navigate to &lt;strong&gt;Add Policy&lt;/strong&gt;, and select &lt;strong&gt;Keycloak OAuth Policy&lt;/strong&gt; from the drop-down list. A substantial set of options are available for your perusal, but for the purposes of this blog demo we&amp;#8217;ll set the following:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Option&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Value&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Details&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Realm&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://127.0.0.1:8080/auth/realms/stottie&quot; class=&quot;bare&quot;&gt;http://127.0.0.1:8080/auth/realms/stottie&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;The path to our realm &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/sup&gt;. Note that in older versions of Keycloak (pre &lt;code&gt;1.2.0&lt;/code&gt;), the realm will just be the &lt;strong&gt;stottie&lt;/strong&gt; (no path).&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Keycloak Realm Certificate&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Base64 encoded cert&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Paste your &lt;a href=&quot;http://localhost:8080/auth/admin/master/console/#/realms/stottie/keys-settings&quot;&gt;Keycloak realm certificate&lt;/a&gt;.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Forward Authorization Roles&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Forward Realm Roles, and set &lt;em&gt;Forward Realm Roles?&lt;/em&gt; to &lt;strong&gt;true&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;If we decide to use the authorization policy later, we&amp;#8217;ll forward the realm roles contained within the token (i.e. &lt;code&gt;echomeister&lt;/code&gt;). If we don&amp;#8217;t need the granularity of roles, you can still just validate the token.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Select &lt;strong&gt;Add Policy&lt;/strong&gt;, and then &lt;strong&gt;Publish&lt;/strong&gt; the service. You can see its endpoint information in the &lt;strong&gt;Endpoint&lt;/strong&gt; tab, it should be similar to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://localhost:8443/apiman-gateway/Newcastle/EchoService/1.0&quot; class=&quot;bare&quot;&gt;https://localhost:8443/apiman-gateway/Newcastle/EchoService/1.0&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;testing-authentication&quot;&gt;Testing Authentication&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s test our setup with cURL to see whether our request is &lt;em&gt;denied&lt;/em&gt; if we don&amp;#8217;t use a token:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;[msavy@mmbp tmp]$ curl -k  https://127.0.0.1:8443/apiman-gateway/Newcastle/EchoService/1.0
{
    &amp;quot;type&amp;quot;: &amp;quot;Authentication&amp;quot;,
    &amp;quot;failureCode&amp;quot;: 11005,
    &amp;quot;responseCode&amp;quot;: 401,
    &amp;quot;message&amp;quot;: &amp;quot;OAuth2 'Authorization' header or 'access_token' query parameter must be provided.&amp;quot;,
    &amp;quot;headers&amp;quot;: {}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Excellent, it all seems to be working! Notice that we&amp;#8217;re using self-signed certificates for this demo, so the &lt;code&gt;-k&lt;/code&gt; flag will skip certificate validation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, let&amp;#8217;s do a request with a token. There are two ways to attach your bearer token to a request. Either:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Authorization&lt;/code&gt; header, as &lt;code&gt;Authorization: Bearer &amp;lt;token&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;access_token&lt;/code&gt; query parameter, as &lt;code&gt;&lt;a href=&quot;http://example.org/the/path/?access_token=&quot;&gt;token&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, let&amp;#8217;s retrieve a fresh token from Keycloak, and extract the &lt;code&gt;access_token&lt;/code&gt; field from the json using &lt;code&gt;jq&lt;/code&gt; &lt;sup class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_3&quot; class=&quot;footnote&quot; href=&quot;#_footnotedef_3&quot; title=&quot;View footnote.&quot;&gt;3&lt;/a&gt;]&lt;/sup&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;curl -X POST http://127.0.0.1:8080/auth/realms/stottie/protocol/openid-connect/token  -H &quot;Content-Type: application/x-www-form-urlencoded&quot; -d 'username=rincewind' -d 'password=apiman' -d 'grant_type=password' -d 'client_id=apiman' | jq -r '.access_token'&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Second, we&amp;#8217;ll take the token and attach it to our request to the service&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;[msavy@mmbp tmp]$ curl -k -H &quot;Authorization: Bearer eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiJiNDY1YW...&quot; https://127.0.0.1:8443/apiman-gateway/Newcastle/EchoService/1.0
{
  &quot;method&quot; : &quot;GET&quot;,
  &quot;resource&quot; : &quot;/apiman-echo&quot;,
  &quot;uri&quot; : &quot;/apiman-echo&quot;,
  &quot;headers&quot; : {
    &quot;Authorization&quot; : &quot;Bearer eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiJiNDY1YWMzNi1hMTczLTRjOWMtYWJjZS00MzE2MJ...&quot;,
    &quot;Host&quot; : &quot;127.0.0.1:8080&quot;,
    &quot;User-Agent&quot; : &quot;curl/7.37.1&quot;,
    &quot;Accept&quot; : &quot;*/*&quot;,
    &quot;Connection&quot; : &quot;keep-alive&quot;,
    &quot;Cache-Control&quot; : &quot;no-cache&quot;,
    &quot;Pragma&quot; : &quot;no-cache&quot;
  },
  &quot;bodyLength&quot; : null,
  &quot;bodySha1&quot; : null,
  &quot;counter&quot; : 1
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Great, it worked! We can see EchoService has now been reached, meaning our OAuth2 token was validated successfully, and it sent us back a response which includes the bearer token we used (you can strip this out in the options).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;re feeling lazy, here&amp;#8217;s &lt;a href=&quot;https://gist.github.com/msavy/9390bfcd497f3c683a1c&quot;&gt;an all-in-one script&lt;/a&gt; to do it for you.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;adding-authorization&quot;&gt;Adding Authorization&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re going to develop our example a little bit further. At present, we simply have a binary approach where we either allow or disallow based upon which realm the token was issued from. If we want a more granular approach where we can discriminate upon roles, then we need to add another element: &lt;strong&gt;Authorization&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The more observant readers will note that we have already added two of the required elements when we imported the realm into Keycloak; namely, a user &lt;code&gt;rincewind&lt;/code&gt; and a realm role &lt;code&gt;echomeister&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we navigate back to the &lt;strong&gt;EchoService&lt;/strong&gt; service in the apiman UI, we can create a &lt;strong&gt;New Version&lt;/strong&gt;. We&amp;#8217;ll call it &lt;strong&gt;&lt;em&gt;2.0&lt;/em&gt;&lt;/strong&gt; and clone the previous configuration. Moving over to the &lt;strong&gt;Policies&lt;/strong&gt; tab again, we &lt;strong&gt;Add Policy&lt;/strong&gt; and select &lt;strong&gt;Authorization Policy&lt;/strong&gt; from the drop-down.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re going to add two rules:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all stretch&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3333%;&quot;&gt;
&lt;col style=&quot;width: 33.3334%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;To access resource&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;using verb/action&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;the user must have role&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;/rincewind/.*&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;echomeister&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;/secret/.*&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div class=&quot;content&quot;&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;overlord&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our example user has the first role, but not the second. &lt;strong&gt;Add&lt;/strong&gt; the policy and &lt;strong&gt;Publish&lt;/strong&gt; the service again. Our endpoint will now reflect the changed version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will probably need to issue a new bearer token, which you can achieve by repeating the previous shell command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;[msavy@mmbp tmp]$ curl -k -H &amp;quot;Authorization: Bearer eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiJmODAyZjFmMy1kN2JmLTQ0YjQtODA2N...&amp;quot; \
 https://127.0.0.1:8443/apiman-gateway/Newcastle/EchoService/2.0/rincewind/wizard
{
  &amp;quot;method&amp;quot; : &amp;quot;GET&amp;quot;,
  &amp;quot;resource&amp;quot; : &amp;quot;/apiman-echo/rincewind/wizard&amp;quot;,
  &amp;quot;uri&amp;quot; : &amp;quot;/apiman-echo/rincewind/wizard&amp;quot;,
  &amp;quot;headers&amp;quot; : {
    &amp;quot;Authorization&amp;quot; : &amp;quot;Bearer eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiJmODAyZjFmMy1kN2JmLTQ0YjQtODA2N...&amp;quot;,
    &amp;quot;Host&amp;quot; : &amp;quot;127.0.0.1:8080&amp;quot;,
    &amp;quot;User-Agent&amp;quot; : &amp;quot;curl/7.37.1&amp;quot;,
    &amp;quot;Accept&amp;quot; : &amp;quot;*/*&amp;quot;,
    &amp;quot;Connection&amp;quot; : &amp;quot;keep-alive&amp;quot;,
    &amp;quot;Cache-Control&amp;quot; : &amp;quot;no-cache&amp;quot;,
    &amp;quot;Pragma&amp;quot; : &amp;quot;no-cache&amp;quot;
  },
  &amp;quot;bodyLength&amp;quot; : null,
  &amp;quot;bodySha1&amp;quot; : null,
  &amp;quot;counter&amp;quot; : 19
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As our user &lt;code&gt;rincewind&lt;/code&gt; has the role &lt;code&gt;echomeister&lt;/code&gt;, his request went through successfully.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, if we try to access a resource for which he doesn&amp;#8217;t hold the appropriate role, we see an error message:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;[msavy@mmbp tmp]$ curl -k -H &amp;quot;Authorization: Bearer eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiJmODAyZjFmMy1kN2JmLTQ0YjQtODA2N...&amp;quot; \
 https://127.0.0.1:8443/apiman-gateway/Newcastle/EchoService/2.0/secret/not/allowed

{
    &amp;quot;type&amp;quot;: &amp;quot;Authorization&amp;quot;,
    &amp;quot;failureCode&amp;quot;: 10009,
    &amp;quot;responseCode&amp;quot;: 0,
    &amp;quot;message&amp;quot;: &amp;quot;The user is not authorized to make this request (a required role is missing).&amp;quot;,
    &amp;quot;headers&amp;quot;: {}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&amp;#8230;&amp;#8203;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We protected an apiman service using OAuth2; with examples of both simple authentication and role-based authorization. It should be easy to design your own role-based auth setups in combination with Keycloak.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt;. Use the version corresponding to your selected release of apiman
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt;. Ensure you use whatever the valid ISS value is for your Keycloak realm. One quick way to find this is by decoding an access_token looking at what Keycloak has set for the &lt;code&gt;iss&lt;/code&gt; field
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnotedef_3&quot;&gt;
&lt;a href=&quot;#_footnoteref_3&quot;&gt;3&lt;/a&gt;. We&amp;#8217;re going to use &lt;code&gt;jq&lt;/code&gt; to select the &lt;code&gt;access_token&lt;/code&gt; field in our JSON, so if you don&amp;#8217;t have &lt;code&gt;jq&lt;/code&gt; installed you can use your package manager to get it: OS X Brew &lt;code&gt;brew install jq&lt;/code&gt;; On Fedora &lt;code&gt;sudo yum install jq&lt;/code&gt;; On Debian &lt;code&gt;sudo apt-get install jq&lt;/code&gt;
&lt;/div&gt;
&lt;/div&gt;</description><category term="gateway" /><category term="security" /><category term="oauth2" /><category term="keycloak" /><category term="authentication" /><category term="authorization" /><pubDate>Tue, 09 Jun 2015 13:25:28 +0100</pubDate>
				<link>https://apiman.io/blog/gateway/security/oauth2/keycloak/authentication/authorization/2015/06/09/keycloak-oauth2.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/gateway/security/oauth2/keycloak/authentication/authorization/2015/06/09/keycloak-oauth2.html</guid>
			</item><item>
				<title>Setting up your apiman development environment</title><dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author><description>&lt;p&gt;For those of you who might be interested in hacking away at some core apiman code,
I thought it might be nice to create a reasonably comprehensive step-by-step
guide.  For the most part everything is straightforward, but there are a copule
of tricks you can use to get up and running fast and to be able to easily
iterate on any changes you make.&lt;/p&gt;

&lt;p&gt;Read on if this sounds like something you want to do!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;what-will-this-post-cover&quot;&gt;What will this post cover?&lt;/h2&gt;
&lt;p&gt;Here is a high level overview of the steps we‚Äôll take to getting a working
apiman development environment.  First, here are my basic assumptions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You are a java developer and have JDK7 or higher installed&lt;/li&gt;
  &lt;li&gt;You are familiar with maven and have it installed&lt;/li&gt;
  &lt;li&gt;You know git and have it installed&lt;/li&gt;
  &lt;li&gt;You want to use the Eclipse IDE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Assuming you meet all of the above requirements, you should have no trouble
with this guide!  Here is what this post will cover:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Getting the apiman source code&lt;/li&gt;
  &lt;li&gt;Downloading and running Eclipse&lt;/li&gt;
  &lt;li&gt;Configuring Eclipse for apiman development&lt;/li&gt;
  &lt;li&gt;Importing the apiman source code into Eclipse&lt;/li&gt;
  &lt;li&gt;Running Development versions of the apiman components&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;getting-the-apiman-source-code&quot;&gt;Getting the apiman source code&lt;/h2&gt;
&lt;p&gt;The first thing you (obviously) need to do is download the apiman project
source code.  All of the code is in github, of course.  You can find the
code here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apiman/apiman&quot;&gt;https://github.com/apiman/apiman&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ‚Äòapiman‚Äô github organization has a couple of additional repositories as
well.  For example the quickstarts and plugins each have their own repos.
But let‚Äôs stick with the core code for this post.&lt;/p&gt;

&lt;p&gt;If you want to follow best practice, you should ‚Äúfork‚Äù the apiman repository
on github, then clone your forked copy.  Once you have used the github UI
to fork the repository, you would do something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git clone git@github.com:&amp;lt;YOUR-GITHUB-ID&amp;gt;/apiman.git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I also recommend adding the upstream github repository as another remote
so that you can easily pull in upstream changes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git remote add upstream git@github.com:apiman/apiman.git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;downloading-and-running-eclipse&quot;&gt;Downloading and running Eclipse&lt;/h2&gt;
&lt;p&gt;Alright - you‚Äôve got the apiman code cloned on your local hard drive
somewhere.  The next step is to download Eclipse (if you don‚Äôt already
have it installed).  This can be done here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.eclipse.org/downloads/&quot;&gt;https://www.eclipse.org/downloads/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I like to download the ‚ÄúEclipse IDE for Java EE Developers‚Äù version
because it comes with a lot of extra stuff I like to use.  But you should
be fine with the basic version as well.  I‚Äôm going to use the EE version
as I write this guide!&lt;/p&gt;

&lt;p&gt;Once you‚Äôve completed the download, just unpack it and run Eclipse.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-06-04/eclipse-fresh.png&quot; alt=&quot;Fresh Eclipse&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;configuring-eclipse-for-apiman-development&quot;&gt;Configuring Eclipse for apiman development&lt;/h2&gt;
&lt;p&gt;Great!  You‚Äôve got Eclipse running.  Now let‚Äôs make a minor change
to it specific to apiman development.  Go ahead and import the apiman code
formatter specification.  You can find this file in the apiman code
repository here:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;apiman/tools/src/eclipse/apiman-eclipse-formatter.xml&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Import that file in the Eclipse Preferences dialog here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-06-04/eclipse-formatter.png&quot; alt=&quot;Eclipse Preferences&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;importing-the-apiman-source-code-into-eclipse&quot;&gt;Importing the apiman source code into Eclipse&lt;/h2&gt;
&lt;p&gt;OK now we‚Äôre ready to import the apiman source code into Eclipse.  Because
apiman uses maven as its build system, and because Eclipse has maven support
built-in via m2e, this should be a snap.  Simply go to &lt;em&gt;File-&amp;gt;Import&lt;/em&gt; and
choose &lt;em&gt;Maven/Existing Maven Projects&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-06-04/import-apiman.png&quot; alt=&quot;Import apiman&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-06-04/import-apiman-2.png&quot; alt=&quot;Import apiman Confirm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Importing the projects into Eclipse may take some time, and Eclipse may
yell at you about unresolved m2e plugins and whatnot.  Make sensible choices
(e.g. resolve later) and go about your life.  Go get a cup of coffee, the
build will probably take a few minutes.&lt;/p&gt;

&lt;p&gt;It is possible you will run into a problem where the &lt;em&gt;apiman-manager-ui-hawtio&lt;/em&gt;
project gets into a build loop.  This can be corrected by disabling the
maven builder for that one project only.  Do this by right-click on that
project and choosing properties:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-06-04/project-properties.png&quot; alt=&quot;Project Properties&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Typically this will leave you with a bunch of annoying warnings in Eclipse,
most of which will be HTML Problems.  I will leave it as an exercise to the
reader about how to disable those.&lt;/p&gt;

&lt;p&gt;IMPORTANT:  you should have 0 java errors at this point!&lt;/p&gt;

&lt;h2 id=&quot;running-development-versions-of-the-apiman-components&quot;&gt;Running Development versions of the apiman components&lt;/h2&gt;
&lt;p&gt;Everything should now be loaded into Eclipse.  Now all you need is a quick
way to run everything.  Of course you can &lt;em&gt;always&lt;/em&gt; do a full rebuild via
maven and use the ‚Äúinstall-all-wildfly8‚Äù profile:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cd ~/git/apiman
mvn clean install -Pinstall-all-wildfly8&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That will result in a full apiman environment installed in WildFly 8.  If you
use this approach you can run apiman here:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cd ~/git/apiman/tools/server-all/target/wildfly-8.2.0.Final
./bin/standalone.sh --debug&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then you can connect a remote debugger to WildFly and debug apiman from Eclipse.&lt;/p&gt;

&lt;p&gt;But a quicker way to run the various apiman components exists.&lt;/p&gt;

&lt;p&gt;As you may or may not know, apiman consists of two components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The API Manager (RESTful services + UI)&lt;/li&gt;
  &lt;li&gt;The API Gateway&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can run/test these pieces together or separately.  Let‚Äôs first explore
the API Manager.&lt;/p&gt;

&lt;h3 id=&quot;launching-a-dev-version-of-the-api-manager-rest-services&quot;&gt;Launching a Dev version of the API Manager REST services&lt;/h3&gt;
&lt;p&gt;This is actually really easy:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open up the java class &lt;em&gt;ManagerApiDevServer&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Debug As-&amp;gt;Java Application&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Easy as that!  It should fire up an instance of Jetty with the apiman API
Manager backend (RESTful web services) deployed.  You can test this by going
here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:7070/apiman/system/status&quot;&gt;http://localhost:7070/apiman/system/status&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Log in using username &lt;em&gt;admin&lt;/em&gt; and password &lt;em&gt;admin&lt;/em&gt;.  Oh by the way, did I mention
that it runs on port 7070?  That‚Äôs important!&lt;/p&gt;

&lt;h3 id=&quot;using-gulp-to-make-ui-changes&quot;&gt;Using gulp to make UI changes&lt;/h3&gt;
&lt;p&gt;We use angularjs and typescript as the basis for the UI.  In order to develop
UI code you‚Äôll need to use gulp.  We have documented how to do this here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apiman/apiman/blob/master/manager/ui/hawtio/README.md&quot;&gt;https://github.com/apiman/apiman/blob/master/manager/ui/hawtio/README.md&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Give that a quick read!  When it asks you to configure your new copy of the
config.js file, it should look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;err&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;APIMAN_CONFIG_DATA&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;apiman&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.1.0-SNAPSHOT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;builtOn&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2015-01-01&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;logoutUrl&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;logout&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ui&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;api&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;endpoint&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:7070/apiman&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;auth&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;basic&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;basic&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you get it all set up properly you should be able to point your browser here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:2772/api-manager/dash&quot;&gt;http://localhost:2772/api-manager/dash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now whenever you make changes to any of the apiman angularjs code, the browser
will automatically refresh and show you the changes!&lt;/p&gt;

&lt;h3 id=&quot;launching-a-dev-version-of-the-api-gateway&quot;&gt;Launching a dev version of the API Gateway&lt;/h3&gt;
&lt;p&gt;This one is easy as well.  Just open up the &lt;em&gt;GatewayDevServer&lt;/em&gt; java class
and debug it as an application (just like the API Manager above!)‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;wrapup&quot;&gt;Wrapup&lt;/h2&gt;
&lt;p&gt;Whew!  That took longer than I thought.  Please let me know if you run into
any snags.  There are probably lots of improvements you could explore, such as
using JRebel to never have to restart the API Manager or API Gateway java
processes again.&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description><category term="eclipse" /><category term="development" /><category term="maven" /><pubDate>Thu, 04 Jun 2015 09:04:45 +0000</pubDate>
				<link>https://apiman.io/blog/eclipse/development/maven/2015/06/04/dev-environment.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/eclipse/development/maven/2015/06/04/dev-environment.html</guid>
			</item><item>
				<title>Setting up your apiman development environment</title><dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author><description>&lt;p&gt;For those of you who might be interested in hacking away at some core apiman code,
I thought it might be nice to create a reasonably comprehensive step-by-step
guide.  For the most part everything is straightforward, but there are a copule
of tricks you can use to get up and running fast and to be able to easily
iterate on any changes you make.&lt;/p&gt;

&lt;p&gt;Read on if this sounds like something you want to do!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;what-will-this-post-cover&quot;&gt;What will this post cover?&lt;/h2&gt;
&lt;p&gt;Here is a high level overview of the steps we‚Äôll take to getting a working
apiman development environment.  First, here are my basic assumptions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You are a java developer and have JDK7 or higher installed&lt;/li&gt;
  &lt;li&gt;You are familiar with maven and have it installed&lt;/li&gt;
  &lt;li&gt;You know git and have it installed&lt;/li&gt;
  &lt;li&gt;You want to use the Eclipse IDE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Assuming you meet all of the above requirements, you should have no trouble
with this guide!  Here is what this post will cover:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Getting the apiman source code&lt;/li&gt;
  &lt;li&gt;Downloading and running Eclipse&lt;/li&gt;
  &lt;li&gt;Configuring Eclipse for apiman development&lt;/li&gt;
  &lt;li&gt;Importing the apiman source code into Eclipse&lt;/li&gt;
  &lt;li&gt;Running Development versions of the apiman components&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;getting-the-apiman-source-code&quot;&gt;Getting the apiman source code&lt;/h2&gt;
&lt;p&gt;The first thing you (obviously) need to do is download the apiman project
source code.  All of the code is in github, of course.  You can find the
code here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apiman/apiman&quot;&gt;https://github.com/apiman/apiman&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ‚Äòapiman‚Äô github organization has a couple of additional repositories as
well.  For example the quickstarts and plugins each have their own repos.
But let‚Äôs stick with the core code for this post.&lt;/p&gt;

&lt;p&gt;If you want to follow best practice, you should ‚Äúfork‚Äù the apiman repository
on github, then clone your forked copy.  Once you have used the github UI
to fork the repository, you would do something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git clone git@github.com:&amp;lt;YOUR-GITHUB-ID&amp;gt;/apiman.git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I also recommend adding the upstream github repository as another remote
so that you can easily pull in upstream changes:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git remote add upstream git@github.com:apiman/apiman.git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;downloading-and-running-eclipse&quot;&gt;Downloading and running Eclipse&lt;/h2&gt;
&lt;p&gt;Alright - you‚Äôve got the apiman code cloned on your local hard drive
somewhere.  The next step is to download Eclipse (if you don‚Äôt already
have it installed).  This can be done here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.eclipse.org/downloads/&quot;&gt;https://www.eclipse.org/downloads/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I like to download the ‚ÄúEclipse IDE for Java EE Developers‚Äù version
because it comes with a lot of extra stuff I like to use.  But you should
be fine with the basic version as well.  I‚Äôm going to use the EE version
as I write this guide!&lt;/p&gt;

&lt;p&gt;Once you‚Äôve completed the download, just unpack it and run Eclipse.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-06-04/eclipse-fresh.png&quot; alt=&quot;Fresh Eclipse&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;configuring-eclipse-for-apiman-development&quot;&gt;Configuring Eclipse for apiman development&lt;/h2&gt;
&lt;p&gt;Great!  You‚Äôve got Eclipse running.  Now let‚Äôs make a minor change
to it specific to apiman development.  Go ahead and import the apiman code
formatter specification.  You can find this file in the apiman code
repository here:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;apiman/tools/src/eclipse/apiman-eclipse-formatter.xml&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Import that file in the Eclipse Preferences dialog here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-06-04/eclipse-formatter.png&quot; alt=&quot;Eclipse Preferences&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;importing-the-apiman-source-code-into-eclipse&quot;&gt;Importing the apiman source code into Eclipse&lt;/h2&gt;
&lt;p&gt;OK now we‚Äôre ready to import the apiman source code into Eclipse.  Because
apiman uses maven as its build system, and because Eclipse has maven support
built-in via m2e, this should be a snap.  Simply go to &lt;em&gt;File-&amp;gt;Import&lt;/em&gt; and
choose &lt;em&gt;Maven/Existing Maven Projects&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-06-04/import-apiman.png&quot; alt=&quot;Import apiman&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-06-04/import-apiman-2.png&quot; alt=&quot;Import apiman Confirm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Importing the projects into Eclipse may take some time, and Eclipse may
yell at you about unresolved m2e plugins and whatnot.  Make sensible choices
(e.g. resolve later) and go about your life.  Go get a cup of coffee, the
build will probably take a few minutes.&lt;/p&gt;

&lt;p&gt;It is possible you will run into a problem where the &lt;em&gt;apiman-manager-ui-hawtio&lt;/em&gt;
project gets into a build loop.  This can be corrected by disabling the
maven builder for that one project only.  Do this by right-click on that
project and choosing properties:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-06-04/project-properties.png&quot; alt=&quot;Project Properties&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Typically this will leave you with a bunch of annoying warnings in Eclipse,
most of which will be HTML Problems.  I will leave it as an exercise to the
reader about how to disable those.&lt;/p&gt;

&lt;p&gt;IMPORTANT:  you should have 0 java errors at this point!&lt;/p&gt;

&lt;h2 id=&quot;running-development-versions-of-the-apiman-components&quot;&gt;Running Development versions of the apiman components&lt;/h2&gt;
&lt;p&gt;Everything should now be loaded into Eclipse.  Now all you need is a quick
way to run everything.  Of course you can &lt;em&gt;always&lt;/em&gt; do a full rebuild via
maven and use the ‚Äúinstall-all-wildfly8‚Äù profile:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cd ~/git/apiman
mvn clean install -Pinstall-all-wildfly8&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That will result in a full apiman environment installed in WildFly 8.  If you
use this approach you can run apiman here:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cd ~/git/apiman/tools/server-all/target/wildfly-8.2.0.Final
./bin/standalone.sh --debug&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then you can connect a remote debugger to WildFly and debug apiman from Eclipse.&lt;/p&gt;

&lt;p&gt;But a quicker way to run the various apiman components exists.&lt;/p&gt;

&lt;p&gt;As you may or may not know, apiman consists of two components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The API Manager (RESTful APIs + UI)&lt;/li&gt;
  &lt;li&gt;The API Gateway&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can run/test these pieces together or separately.  Let‚Äôs first explore
the API Manager.&lt;/p&gt;

&lt;h3 id=&quot;launching-a-dev-version-of-the-api-manager-rest-apis&quot;&gt;Launching a Dev version of the API Manager REST APIs&lt;/h3&gt;
&lt;p&gt;This is actually really easy:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open up the java class &lt;em&gt;ManagerApiDevServer&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Debug As-&amp;gt;Java Application&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Easy as that!  It should fire up an instance of Jetty with the apiman API
Manager backend (RESTful APIs) deployed.  You can test this by going
here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:7070/apiman/system/status&quot;&gt;http://localhost:7070/apiman/system/status&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Log in using username &lt;em&gt;admin&lt;/em&gt; and password &lt;em&gt;admin&lt;/em&gt;.  Oh by the way, did I mention
that it runs on port 7070?  That‚Äôs important!&lt;/p&gt;

&lt;h3 id=&quot;using-gulp-to-make-ui-changes&quot;&gt;Using gulp to make UI changes&lt;/h3&gt;
&lt;p&gt;We use angularjs and typescript as the basis for the UI.  In order to develop
UI code you‚Äôll need to use gulp.  We have documented how to do this here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apiman/apiman/blob/master/manager/ui/hawtio/README.md&quot;&gt;https://github.com/apiman/apiman/blob/master/manager/ui/hawtio/README.md&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Give that a quick read!  When it asks you to configure your new copy of the
config.js file, it should look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;err&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;APIMAN_CONFIG_DATA&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;apiman&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.2.0-SNAPSHOT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;builtOn&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2015-01-01&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;logoutUrl&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;logout&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ui&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;apiman&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;metrics&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;api&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;endpoint&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;http://localhost:8080/apiman&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;auth&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;basic&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;basic&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;password&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;admin123!&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you get it all set up properly you should be able to point your browser here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:2772/api-manager/dash&quot;&gt;http://localhost:2772/api-manager/dash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now whenever you make changes to any of the apiman angularjs code, the browser
will automatically refresh and show you the changes!&lt;/p&gt;

&lt;h3 id=&quot;launching-a-dev-version-of-the-api-gateway&quot;&gt;Launching a dev version of the API Gateway&lt;/h3&gt;
&lt;p&gt;This one is easy as well.  Just open up the &lt;em&gt;GatewayDevServer&lt;/em&gt; java class
and debug it as an application (just like the API Manager above!)‚Ä¶&lt;/p&gt;

&lt;h2 id=&quot;wrapup&quot;&gt;Wrapup&lt;/h2&gt;
&lt;p&gt;Whew!  That took longer than I thought.  Please let me know if you run into
any snags.  There are probably lots of improvements you could explore, such as
using JRebel to never have to restart the API Manager or API Gateway java
processes again.&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description><category term="eclipse" /><category term="development" /><category term="maven" /><pubDate>Thu, 04 Jun 2015 09:04:45 +0000</pubDate>
				<link>https://apiman.io/blog/eclipse/development/maven/2015/06/04/dev-environment-redux.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/eclipse/development/maven/2015/06/04/dev-environment-redux.html</guid>
			</item><item>
				<title>We got the moves like swagger!</title><dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author><description>&lt;p&gt;One of the weaknesses we‚Äôve had in apiman until now is that service providers didn‚Äôt have
any way to document how to consume their services.  Well that has all changed with version
1.1.3.Final.  Now you can upload a Swagger spec document for your service.  If you do,
consumers will be able to browse your service documentation directly in the apiman UI.&lt;/p&gt;

&lt;p&gt;I think we can all agree that this is a welcome change and really improves the usability
of the system, particularly from the perspective of the application developer (aka the
service consumer).&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;adding-a-service-definition&quot;&gt;Adding a Service Definition&lt;/h2&gt;
&lt;p&gt;As a service provider, the only thing you need to do is add a service definition to your
service.  This is simple - just navigate to the new ‚ÄúDefinition‚Äù tab in your service.
There you will be able to copy/paste or drag/drop a Swagger spec.  Make sure you set the
definition type to Swagger (JSON), and don‚Äôt forget to click Save!&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-swagger-spec&quot;&gt;What is a Swagger spec?&lt;/h2&gt;
&lt;p&gt;So maybe not everyone knows what Swagger is.  Swagger is a way to formally describe a
RESTful web service.  A Swagger spec is a JSON document that describes everything
about your RESTful API, including (but not limited to):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;API meta-data such as Name and Description&lt;/li&gt;
  &lt;li&gt;Resource Paths and the Operations/Methods they support&lt;/li&gt;
  &lt;li&gt;Input/Output types&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information I recommend navigating to the &lt;a href=&quot;https://swagger.io/&quot;&gt;Swagger Project&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-does-this-help-my-consumers&quot;&gt;How does this help my consumers?&lt;/h2&gt;
&lt;p&gt;Once you‚Äôve got a Swagger spec created and added to your service, your service
consumers will be able to browse live documentation right from the apiman UI.  This
information will be available via a new ‚ÄúView Service Definition‚Äù link available on
the consumer‚Äôs ‚ÄúService Details‚Äù page (the same page that consumers are shown when
they have searched for a service).  Here‚Äôs an example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-06-02/api-details.png&quot; alt=&quot;Service Details&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A service consumer can see that there is a service definition they can click on, which
will give them a ton of information about how to use the service.  In the future, we
plan to allow consumers to do all sorts of interesting things with the Swagger spec.
For example, we can help consumers generate a client SDK in a variety of languages.
We can also allow them to simulate API calls right from the apiman UI - so they can
see what to expect.  But for right now, we simply show live documentation about the
service as described by the Swagger spec definition:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-06-02/api-definition.png&quot; alt=&quot;Service Definition&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As always, thanks for making it to the end of my ramblings!&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description><category term="api-manager" /><category term="swagger" /><category term="api" /><category term="ui" /><pubDate>Tue, 02 Jun 2015 09:04:45 +0000</pubDate>
				<link>https://apiman.io/blog/api-manager/swagger/api/ui/2015/06/02/swagger.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/api-manager/swagger/api/ui/2015/06/02/swagger.html</guid>
			</item><item>
				<title>We got the moves like swagger!</title><dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author><description>&lt;p&gt;One of the weaknesses we‚Äôve had in apiman until now is that API providers didn‚Äôt have
any way to document how to consume their APIs.  Well that has all changed with version
1.1.3.Final.  Now you can upload a Swagger spec document for your API.  If you do,
consumers will be able to browse your API documentation directly in the apiman UI.&lt;/p&gt;

&lt;p&gt;I think we can all agree that this is a welcome change and really improves the usability
of the system, particularly from the perspective of the client app developer (aka the
API consumer).&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;adding-an-api-definition&quot;&gt;Adding an API Definition&lt;/h2&gt;
&lt;p&gt;As an API provider, the only thing you need to do is add an API definition to your
API.  This is simple - just navigate to the new ‚ÄúDefinition‚Äù tab in your API.
There you will be able to copy/paste or drag/drop a Swagger spec.  Make sure you set the
definition type to Swagger (JSON), and don‚Äôt forget to click Save!&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-swagger-spec&quot;&gt;What is a Swagger spec?&lt;/h2&gt;
&lt;p&gt;So maybe not everyone knows what Swagger is.  Swagger is a way to formally describe a
RESTful API.  A Swagger spec is a JSON document that describes everything
about your RESTful API, including (but not limited to):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;API meta-data such as Name and Description&lt;/li&gt;
  &lt;li&gt;Resource Paths and the Operations/Methods they support&lt;/li&gt;
  &lt;li&gt;Input/Output types&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information I recommend navigating to the &lt;a href=&quot;https://swagger.io/&quot;&gt;Swagger Project&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-does-this-help-my-consumers&quot;&gt;How does this help my consumers?&lt;/h2&gt;
&lt;p&gt;Once you‚Äôve got a Swagger spec created and added to your API, your API
consumers will be able to browse live documentation right from the apiman UI.  This
information will be available via a new ‚ÄúView API Definition‚Äù link available on
the consumer‚Äôs ‚ÄúAPI Details‚Äù page (the same page that consumers are shown when
they have searched for an API).  Here‚Äôs an example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-06-02/api-details.png&quot; alt=&quot;API Details&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An API consumer can see that there is an API definition they can click on, which
will give them a ton of information about how to use the API.  In the future, we
plan to allow consumers to do all sorts of interesting things with the Swagger spec.
For example, we can help consumers generate a client SDK in a variety of languages.
We can also allow them to simulate API calls right from the apiman UI - so they can
see what to expect.  But for right now, we simply show live documentation about the
API as described by the Swagger spec definition:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-06-02/api-definition.png&quot; alt=&quot;API Definition&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As always, thanks for making it to the end of my ramblings!&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description><category term="api-manager" /><category term="swagger" /><category term="api" /><category term="ui" /><pubDate>Tue, 02 Jun 2015 09:04:45 +0000</pubDate>
				<link>https://apiman.io/blog/api-manager/swagger/api/ui/2015/06/02/swagger-redux.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/api-manager/swagger/api/ui/2015/06/02/swagger-redux.html</guid>
			</item><item>
				<title>The JBoss apiman API Manager REST services API</title><dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author><description>&lt;p&gt;In this, the third article in our series on apiman, JBoss‚Äô new open source API Management framework, we‚Äôll examine apiman‚Äôs API Manager REST services API. apiman‚Äôs Management UI utilizes this API in the implementation for all of its user-visible features, and you can also use the same API to automate tasks with apiman.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;It‚Äôs inevitable that, after you work with a product‚Äôs UI for a while that you encounter tasks that are better suited to a scripting or batch interface. For example, if you have to perform a similar task for a large of related data items, the time that it can require to perform these tasks through an interactive UI can be prohibitive. Also, it‚Äôs easy for repetitive tasks to become error prone as you can lose focus, even if you are working in a well designed and easy to use interface such as apiman.&lt;/p&gt;

&lt;p&gt;One solution to this problem is to augment the UI with a command line or scripting interface. This can lead to a whole separate set of issues if the new interface is built on a different set of underlying routines than the UI. A better approach to allow access to the same routines in which the UI is constructed. This approach removes any duplication, and also enables you to replicate manual UI based tasks with automated or scripted tools.&lt;/p&gt;

&lt;p&gt;JBoss apiman follows this second approach with its REST interface.  All the services provided by apiman in its Management UI are directly supported in the API Manager REST services API. You can also directly access these same services through the REST API.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;Like a lot of things with JBoss open source software, installing the REST API is easy. In fact, if you have apiman installed, then you already have the REST API installed. (You can‚Äôt get much easier than that!)&lt;/p&gt;

&lt;p&gt;We covered installing apiman in the first article in this series (see: https://java.dzone.com/articles/impatient-new-users), so we won‚Äôt repeat that information here. A minimal set of install instructions are always available on the apiman site (https://www.apiman.io/latest/). The current set of instructions as of this writing are:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir ~/apiman-1.1.2.Final  
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/apiman-1.1.2.Final  
wget https://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip  
wget https://downloads.jboss.org/apiman/1.1.2.Final/apiman-distro-wildfly8-1.1.2.Final-overlay.zip  
unzip wildfly-8.2.0.Final.zip  
unzip &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; apiman-distro-wildfly8-1.1.2.Final-overlay.zip &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; wildfly-8.2.0.Final  
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;wildfly-8.2.0.Final  
./bin/standalone.sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; standalone-apiman.xml  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that our apiman server is up and running, we can start to access the API Manager REST services API. However, before we start placing calls to services through the REST API, let‚Äôs take a look at how the API is organized.&lt;/p&gt;

&lt;h2 id=&quot;the-organization-of-the-api&quot;&gt;The Organization of the API&lt;/h2&gt;

&lt;p&gt;The documentation for the apiman REST API is available (for free, of course), here: https://www.apiman.io/latest/api-manager-restdocs.html&lt;/p&gt;

&lt;p&gt;The services and their endpoints represented in the API are divided into these groups:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;actions - The actions endpoint (http://localhost:8080/apiman/actions/) enables you to execute actions for apiman entities (such as plans, services, applications, etc.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;system/status - The system/status endpoint (http://localhost:8080/apiman/system/status) enables you to query the current state of the apiman system.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;currentuser - The currentuser endpoint (http://localhost:8080/apiman/currentuser/info) enables you to obtain or update information about the current user. This information is related to the user‚Äôs applications, services, organizations, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;gateways - The gateways endpoint (http://localhost:8080/apiman/gateways/) enables you to obtain information about an API Gateway, and to delete or create new gateways.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;organizations - The organizations endpoint (http://localhost:8080/apiman/organizations/) enables you to obtain information about existing organizations and to create new organizations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;permissions - The permissions endpoint (http://localhost:8080/apiman/permissions/) enables you to obtain information about user‚Äôs permissions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;plugins - The plugins endpoint (http://localhost:8080/apiman/plugins/) enables you to obtain information about installed plugins, and to install new plugins.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;policyDefs - The policyDefs endpoint (http://localhost:8080/apiman/policyDefs/) enables you to obtain information about existing policy definitions, and to define new policy definitions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;roles - The roles endpoint (http://localhost:8080/apiman/roles/) enables you to obtain information about existing roles, update roles, and delete roles.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;search - The search endpoint (http://localhost:8080/apiman/search/) enables you to search for applications, organizations, or services.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;users - The users endpoint (http://localhost:8080/apiman/users/) enables you to search for information about users, including their applications and services.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Within each group, GET operations are defined to return information, and GET and POST operations are defined to make changes to apiman elements. Data passed to and returned from services through the API is in the form of JSON along with a return code.&lt;/p&gt;

&lt;h2 id=&quot;accessing-services-in-the-api-manager-rest-services-api&quot;&gt;Accessing Services in the API Manager REST services API&lt;/h2&gt;

&lt;p&gt;The best way to learn about the API Manager REST services API is to see it in action. Since these are REST services, it‚Äôs easy to access them. For example, we should be able to access the system status service with a simple GET operation at this endpoint:&lt;/p&gt;

&lt;p&gt;http://localhost:8080/apiman/system/status&lt;/p&gt;

&lt;p&gt;Let‚Äôs try this with curl. If we execute the following command, we should see the current system status:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -X GET http://localhost:8080/apiman/system/status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Well, that error is not exactly what we expected. There was no output.&lt;/p&gt;

&lt;p&gt;What went wrong? What‚Äôs missing? The answer is that our call to the service was missing authorization. In the same way that a user must login and be authorized to use the apiman Management UI, calls to the REST API must be authorized.&lt;/p&gt;

&lt;p&gt;For our example, we‚Äôll keep things simple and stick to using basic authorization. (We‚Äôll take a more extensive look at apiman and security in a later article in this series.)&lt;/p&gt;

&lt;p&gt;In order to resolve this failure, we have to send a properly encoded basic authorization header with every request you make. In Java8, we can generate a key by base64 encoding this string for the OOTB admin username and password: admin:admin123! with this statememt:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;base64encode(concat('admin', ':', 'admin123!'))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This yields a key with a value of: YWRtaW46YWRtaW4xMjMh&lt;/p&gt;

&lt;p&gt;Now, let‚Äôs try that curl command again, but this time, we‚Äôll include the key in the authorization header:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -H &quot;Authorization: Basic YWRtaW46YWRtaW4xMjMh&quot;
http://localhost:8080/apiman/system/status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the result is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{&quot;up&quot;:true,&quot;version&quot;:&quot;1.1.2-SNAPSHOT&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we mentioned earlier in this article, the responses returned by calls to the REST API are in in the form of JSON. In the case of our call to the http://localhost:8080/apiman/system/status endpoint, the expected format of the response is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let‚Äôs carry on by looking at a more extensive example, where we use the REST API to automate a task that would be tedious if performed in the apiman Management UI.&lt;/p&gt;

&lt;h2 id=&quot;a-larger-example&quot;&gt;A Larger Example&lt;/h2&gt;

&lt;p&gt;Let‚Äôs say that you want to create multiple new organizations. You could of course manually enter these into the apiman Management UI. But, if you have a large number of organizations, for example, one for each of the countries in the EU, or each of the states in the USA, this would be a tedious and error prone task. This is an ideal candidate task for automation with the REST API.&lt;/p&gt;

&lt;p&gt;The coding for this example is simple. All you have to do is account for the encoding of the authorization to access the API Manager REST services API, and pass the information related to each organization that you create to this endpoint: http://localhost:8080/apiman/organizations&lt;/p&gt;

&lt;p&gt;Here‚Äôs an example program with an ice hockey flavor - the highlights are noted below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apimanExample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.OutputStreamWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.net.HttpURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.net.URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.nio.charset.StandardCharsets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimplePutOrg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  

        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalSix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Boston&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Chicago&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Detroit&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Montreal&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;New York&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Toronto&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;  
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Bruins&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BlackHawks&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Red Wings&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Canadiens&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Rangers&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Maple Leafs&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
        &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Creating new apiman org for: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalSix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalSix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;  
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Return code = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createNewOrg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;originalSix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalSix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]));&lt;/span&gt;  
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createNewOrg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newOrgName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newOrgDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost:8080/apiman/organizations&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;HttpURLConnection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  

        &lt;span class=&quot;n&quot;&gt;Base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Encoder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;admin:admin123!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encodedString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encodeToString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normalString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StandardCharsets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UTF_8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  

        &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRequestProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Basic &quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encodedString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDoOutput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRequestProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRequestProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Accept&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  

        &lt;span class=&quot;n&quot;&gt;OutputStreamWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;osw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputStreamWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;osw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{\&quot;name\&quot;:\&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newOrgName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; a new org\&quot;,\&quot;description\&quot;:\&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newOrgDescription&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;osw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;osw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResponseCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Code highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lines 13-16: Here‚Äôs where we define the test data. For this example, we‚Äôll use the National Hockey League‚Äôs ‚Äúoriginal 6‚Äù teams.&lt;/li&gt;
  &lt;li&gt;Line 24: Here‚Äôs the URL for the service to which we‚Äôll connect to create the new organizations.&lt;/li&gt;
  &lt;li&gt;Lines 27-29 - Here‚Äôs where we set up the encoding for the BASIC authorization.&lt;/li&gt;
  &lt;li&gt;Lines 31-35 - And here‚Äôs where we create the HttpURLConnection that we will use to connect to the service.&lt;/li&gt;
  &lt;li&gt;Line 32: Note that we will be performing a POST operation.&lt;/li&gt;
  &lt;li&gt;Lines 37-40 - And finally, here‚Äôs where we connect to the service and send our POST requests to create the new organizations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we run this example, the following output indicates that the calls to the service through the REST API were successful, based on the return code of 200:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Creating new apiman org for: Boston:Bruins  
Return code = 200  
Creating new apiman org for: Chicago:BlackHawks  
Return code = 200  
Creating new apiman org for: Detroit:Red Wings  
Return code = 200  
Creating new apiman org for: Montreal:Canadiens  
Return code = 200  
Creating new apiman org for: New York:Rangers  
Return code = 200  
Creating new apiman org for: Toronto:Maple Leafs  
Return code = 200  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And - here‚Äôs the server output that tracks the creation of the new organizations:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;21:17:53,205 INFO [stdout] (default task-19) Created organization Boston a new org: OrganizationBean [id=Bostonaneworg, name=Boston a new org, description=Bruins, createdBy=admin, createdOn=Sun May 17 21:17:53 GMT-05:00 2015, modifiedBy=admin, modifiedOn=Sun May 17 21:17:53 GMT-05:00 2015]  
21:17:53,233 INFO [stdout] (default task-21) Created organization Chicago a new org: OrganizationBean [id=Chicagoaneworg, name=Chicago a new org, description=BlackHawks, createdBy=admin, createdOn=Sun May 17 21:17:53 GMT-05:00 2015, modifiedBy=admin, modifiedOn=Sun May 17 21:17:53 GMT-05:00 2015]  
21:17:53,253 INFO [stdout] (default task-23) Created organization Detroit a new org: OrganizationBean [id=Detroitaneworg, name=Detroit a new org, description=Red Wings, createdBy=admin, createdOn=Sun May 17 21:17:53 GMT-05:00 2015, modifiedBy=admin, modifiedOn=Sun May 17 21:17:53 GMT-05:00 2015]  
21:17:53,275 INFO [stdout] (default task-25) Created organization Montreal a new org: OrganizationBean [id=Montrealaneworg, name=Montreal a new org, description=Canadiens, createdBy=admin, createdOn=Sun May 17 21:17:53 GMT-05:00 2015, modifiedBy=admin, modifiedOn=Sun May 17 21:17:53 GMT-05:00 2015]  
21:17:53,295 INFO [stdout] (default task-27) Created organization New York a new org: OrganizationBean [id=NewYorkaneworg, name=New York a new org, description=Rangers, createdBy=admin, createdOn=Sun May 17 21:17:53 GMT-05:00 2015, modifiedBy=admin, modifiedOn=Sun May 17 21:17:53 GMT-05:00 2015]  
21:17:53,316 INFO [stdout] (default task-29) Created organization Toronto a new org: OrganizationBean [id=Torontoaneworg, name=Toronto a new org, description=Maple Leafs, createdBy=admin, createdOn=Sun May 17 21:17:53 GMT-05:00 2015, modifiedBy=admin, modifiedOn=Sun May 17 21:17:53 GMT-05:00 2015]  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And finally, here are the organizations as displayed in the apiman Management UI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-05-19/new-organizations.png&quot; alt=&quot;new organizations&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(It‚Äôs been a tough year for Boston Bruins‚Äô fans. It‚Äôs nice to see the team listed first, even if it‚Äôs just an alphabetic list.  ;-)&lt;/p&gt;

&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h2&gt;

&lt;p&gt;The architecture of the apiman Management UI is that the UI is built on top of a REST API. This architecture makes it possible for you to directly access the services exposed by the API, and enables you to automate the tasks that you perform in the UI.&lt;/p&gt;
</description><category term="rest" /><category term="api" /><category term="automation" /><pubDate>Tue, 19 May 2015 11:00:00 +0000</pubDate>
				<link>https://apiman.io/blog/rest/api/automation/2015/05/19/rest-api.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/rest/api/automation/2015/05/19/rest-api.html</guid>
			</item><item>
				<title>The JBoss apiman API Manager REST API</title><dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author><description>&lt;p&gt;In this, the third article in our series on apiman, JBoss‚Äô new open source API Management framework, we‚Äôll examine apiman‚Äôs API Manager REST API. apiman‚Äôs Management UI utilizes this API in the implementation for all of its user-visible features, and you can also use the same API to automate tasks with apiman.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;It‚Äôs inevitable that, after you work with a product‚Äôs UI for a while that you encounter tasks that are better suited to a scripting or batch interface. For example, if you have to perform a similar task for a large of related data items, the time that it can require to perform these tasks through an interactive UI can be prohibitive. Also, it‚Äôs easy for repetitive tasks to become error prone as you can lose focus, even if you are working in a well designed and easy to use interface such as apiman.&lt;/p&gt;

&lt;p&gt;One solution to this problem is to augment the UI with a command line or scripting interface. This can lead to a whole separate set of issues if the new interface is built on a different set of underlying routines than the UI. A better approach to allow access to the same routines in which the UI is constructed. This approach removes any duplication, and also enables you to replicate manual UI based tasks with automated or scripted tools.&lt;/p&gt;

&lt;p&gt;JBoss apiman follows this second approach with its REST interface.  All the services provided by apiman in its Management UI are directly supported in the API Manager REST API. You can also directly access these same services through the REST API.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;Like a lot of things with JBoss open source software, installing the REST API is easy. In fact, if you have apiman installed, then you already have the REST API installed. (You can‚Äôt get much easier than that!)&lt;/p&gt;

&lt;p&gt;We covered installing apiman in the first article in this series (see: https://java.dzone.com/articles/impatient-new-users), so we won‚Äôt repeat that information here. A minimal set of install instructions are always available on the apiman site (https://www.apiman.io/latest/). The current set of instructions as of this writing are:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir ~/apiman-1.1.2.Final  
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/apiman-1.1.2.Final  
wget https://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip  
wget https://downloads.jboss.org/apiman/1.1.2.Final/apiman-distro-wildfly8-1.1.2.Final-overlay.zip  
unzip wildfly-8.2.0.Final.zip  
unzip &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; apiman-distro-wildfly8-1.1.2.Final-overlay.zip &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; wildfly-8.2.0.Final  
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;wildfly-8.2.0.Final  
./bin/standalone.sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; standalone-apiman.xml  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now that our apiman server is up and running, we can start to access the API Manager REST API. However, before we start placing calls to APIs through the REST API, let‚Äôs take a look at how the API is organized.&lt;/p&gt;

&lt;h2 id=&quot;the-organization-of-the-api&quot;&gt;The Organization of the API&lt;/h2&gt;

&lt;p&gt;The documentation for the apiman REST API is available (for free, of course), here: https://www.apiman.io/latest/api-manager-restdocs.html&lt;/p&gt;

&lt;p&gt;The services and their endpoints represented in the API are divided into these groups:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;actions - The actions endpoint (http://localhost:8080/apiman/actions/) enables you to execute actions for apiman entities (such as plans, APIs, applications, etc.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;system/status - The system/status endpoint (http://localhost:8080/apiman/system/status) enables you to query the current state of the apiman system.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;currentuser - The currentuser endpoint (http://localhost:8080/apiman/currentuser/info) enables you to obtain or update information about the current user. This information is related to the user‚Äôs applications, APIs, organizations, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;gateways - The gateways endpoint (http://localhost:8080/apiman/gateways/) enables you to obtain information about an API Gateway, and to delete or create new gateways.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;organizations - The organizations endpoint (http://localhost:8080/apiman/organizations/) enables you to obtain information about existing organizations and to create new organizations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;permissions - The permissions endpoint (http://localhost:8080/apiman/permissions/) enables you to obtain information about user‚Äôs permissions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;plugins - The plugins endpoint (http://localhost:8080/apiman/plugins/) enables you to obtain information about installed plugins, and to install new plugins.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;policyDefs - The policyDefs endpoint (http://localhost:8080/apiman/policyDefs/) enables you to obtain information about existing policy definitions, and to define new policy definitions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;roles - The roles endpoint (http://localhost:8080/apiman/roles/) enables you to obtain information about existing roles, update roles, and delete roles.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;search - The search endpoint (http://localhost:8080/apiman/search/) enables you to search for applications, organizations, or APIs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;users - The users endpoint (http://localhost:8080/apiman/users/) enables you to search for information about users, including their applications and APIs.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Within each group, GET operations are defined to return information, and GET and POST operations are defined to make changes to apiman elements. Data passed to and returned from services through the API is in the form of JSON along with a return code.&lt;/p&gt;

&lt;h2 id=&quot;accessing-apis-in-the-api-manager-rest-api&quot;&gt;Accessing APIs in the API Manager REST API&lt;/h2&gt;

&lt;p&gt;The best way to learn about the API Manager REST API is to see it in action. Since these are REST APIs, it‚Äôs easy to access them. For example, we should be able to access the system status service with a simple GET operation at this endpoint:&lt;/p&gt;

&lt;p&gt;http://localhost:8080/apiman/system/status&lt;/p&gt;

&lt;p&gt;Let‚Äôs try this with curl. If we execute the following command, we should see the current system status:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;curl -X GET http://localhost:8080/apiman/system/status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Well, that error is not exactly what we expected. There was no output.&lt;/p&gt;

&lt;p&gt;What went wrong? What‚Äôs missing? The answer is that our call to the API was missing authorization. In the same way that a user must login and be authorized to use the apiman Management UI, calls to the REST API must be authorized.&lt;/p&gt;

&lt;p&gt;For our example, we‚Äôll keep things simple and stick to using basic authorization. (We‚Äôll take a more extensive look at apiman and security in a later article in this series.)&lt;/p&gt;

&lt;p&gt;In order to resolve this failure, we have to send a properly encoded basic authorization header with every request you make. In Java8, we can generate a key by base64 encoding this string for the OOTB admin username and password: admin:admin123! with this statememt:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;base64encode(concat('admin', ':', 'admin123!'))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This yields a key with a value of: YWRtaW46YWRtaW4xMjMh&lt;/p&gt;

&lt;p&gt;Now, let‚Äôs try that curl command again, but this time, we‚Äôll include the key in the authorization header:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ curl -H &quot;Authorization: Basic YWRtaW46YWRtaW4xMjMh&quot;
http://localhost:8080/apiman/system/status
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And the result is:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{&quot;up&quot;:true,&quot;version&quot;:&quot;1.1.2-SNAPSHOT&quot;}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As we mentioned earlier in this article, the responses returned by calls to the REST API are in in the form of JSON. In the case of our call to the http://localhost:8080/apiman/system/status endpoint, the expected format of the response is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;up&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;boolean&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let‚Äôs carry on by looking at a more extensive example, where we use the REST API to automate a task that would be tedious if performed in the apiman Management UI.&lt;/p&gt;

&lt;h2 id=&quot;a-larger-example&quot;&gt;A Larger Example&lt;/h2&gt;

&lt;p&gt;Let‚Äôs say that you want to create multiple new organizations. You could of course manually enter these into the apiman Management UI. But, if you have a large number of organizations, for example, one for each of the countries in the EU, or each of the states in the USA, this would be a tedious and error prone task. This is an ideal candidate task for automation with the REST API.&lt;/p&gt;

&lt;p&gt;The coding for this example is simple. All you have to do is account for the encoding of the authorization to access the API Manager REST API, and pass the information related to each organization that you create to this endpoint: http://localhost:8080/apiman/organizations&lt;/p&gt;

&lt;p&gt;Here‚Äôs an example program with an ice hockey flavor - the highlights are noted below:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apimanExample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.OutputStreamWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.net.HttpURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.net.URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.nio.charset.StandardCharsets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimplePutOrg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  

        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalSix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Boston&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Chicago&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Detroit&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Montreal&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;New York&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Toronto&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;  
            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Bruins&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;BlackHawks&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Red Wings&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Canadiens&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Rangers&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Maple Leafs&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
        &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Creating new apiman org for: &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalSix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalSix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;  
            &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Return code = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createNewOrg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;originalSix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalSix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]));&lt;/span&gt;  
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createNewOrg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newOrgName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newOrgDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://localhost:8080/apiman/organizations&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;HttpURLConnection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  

        &lt;span class=&quot;n&quot;&gt;Base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Encoder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;admin:admin123!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encodedString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encodeToString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normalString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StandardCharsets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UTF_8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  

        &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRequestProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Authorization&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Basic &quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encodedString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDoOutput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRequestProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRequestProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Accept&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;application/json&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  

        &lt;span class=&quot;n&quot;&gt;OutputStreamWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;osw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OutputStreamWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;osw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{\&quot;name\&quot;:\&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newOrgName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; a new org\&quot;,\&quot;description\&quot;:\&quot;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newOrgDescription&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;\&quot;}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;osw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
        &lt;span class=&quot;n&quot;&gt;osw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResponseCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Code highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lines 13-16: Here‚Äôs where we define the test data. For this example, we‚Äôll use the National Hockey League‚Äôs ‚Äúoriginal 6‚Äù teams.&lt;/li&gt;
  &lt;li&gt;Line 24: Here‚Äôs the URL for the service to which we‚Äôll connect to create the new organizations.&lt;/li&gt;
  &lt;li&gt;Lines 27-29 - Here‚Äôs where we set up the encoding for the BASIC authorization.&lt;/li&gt;
  &lt;li&gt;Lines 31-35 - And here‚Äôs where we create the HttpURLConnection that we will use to connect to the service.&lt;/li&gt;
  &lt;li&gt;Line 32: Note that we will be performing a POST operation.&lt;/li&gt;
  &lt;li&gt;Lines 37-40 - And finally, here‚Äôs where we connect to the service and send our POST requests to create the new organizations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we run this example, the following output indicates that the calls to the service through the REST API were successful, based on the return code of 200:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Creating new apiman org for: Boston:Bruins  
Return code = 200  
Creating new apiman org for: Chicago:BlackHawks  
Return code = 200  
Creating new apiman org for: Detroit:Red Wings  
Return code = 200  
Creating new apiman org for: Montreal:Canadiens  
Return code = 200  
Creating new apiman org for: New York:Rangers  
Return code = 200  
Creating new apiman org for: Toronto:Maple Leafs  
Return code = 200  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And - here‚Äôs the server output that tracks the creation of the new organizations:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;21:17:53,205 INFO [stdout] (default task-19) Created organization Boston a new org: OrganizationBean [id=Bostonaneworg, name=Boston a new org, description=Bruins, createdBy=admin, createdOn=Sun May 17 21:17:53 GMT-05:00 2015, modifiedBy=admin, modifiedOn=Sun May 17 21:17:53 GMT-05:00 2015]  
21:17:53,233 INFO [stdout] (default task-21) Created organization Chicago a new org: OrganizationBean [id=Chicagoaneworg, name=Chicago a new org, description=BlackHawks, createdBy=admin, createdOn=Sun May 17 21:17:53 GMT-05:00 2015, modifiedBy=admin, modifiedOn=Sun May 17 21:17:53 GMT-05:00 2015]  
21:17:53,253 INFO [stdout] (default task-23) Created organization Detroit a new org: OrganizationBean [id=Detroitaneworg, name=Detroit a new org, description=Red Wings, createdBy=admin, createdOn=Sun May 17 21:17:53 GMT-05:00 2015, modifiedBy=admin, modifiedOn=Sun May 17 21:17:53 GMT-05:00 2015]  
21:17:53,275 INFO [stdout] (default task-25) Created organization Montreal a new org: OrganizationBean [id=Montrealaneworg, name=Montreal a new org, description=Canadiens, createdBy=admin, createdOn=Sun May 17 21:17:53 GMT-05:00 2015, modifiedBy=admin, modifiedOn=Sun May 17 21:17:53 GMT-05:00 2015]  
21:17:53,295 INFO [stdout] (default task-27) Created organization New York a new org: OrganizationBean [id=NewYorkaneworg, name=New York a new org, description=Rangers, createdBy=admin, createdOn=Sun May 17 21:17:53 GMT-05:00 2015, modifiedBy=admin, modifiedOn=Sun May 17 21:17:53 GMT-05:00 2015]  
21:17:53,316 INFO [stdout] (default task-29) Created organization Toronto a new org: OrganizationBean [id=Torontoaneworg, name=Toronto a new org, description=Maple Leafs, createdBy=admin, createdOn=Sun May 17 21:17:53 GMT-05:00 2015, modifiedBy=admin, modifiedOn=Sun May 17 21:17:53 GMT-05:00 2015]  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And finally, here are the organizations as displayed in the apiman Management UI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-05-19/new-organizations.png&quot; alt=&quot;new organizations&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(It‚Äôs been a tough year for Boston Bruins‚Äô fans. It‚Äôs nice to see the team listed first, even if it‚Äôs just an alphabetic list.  ;-)&lt;/p&gt;

&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h2&gt;

&lt;p&gt;The architecture of the apiman Management UI is that the UI is built on top of a REST API. This architecture makes it possible for you to directly access the services exposed by the API, and enables you to automate the tasks that you perform in the UI.&lt;/p&gt;
</description><category term="rest" /><category term="api" /><category term="automation" /><pubDate>Tue, 19 May 2015 11:00:00 +0000</pubDate>
				<link>https://apiman.io/blog/rest/api/automation/2015/05/19/rest-api-redux.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/rest/api/automation/2015/05/19/rest-api-redux.html</guid>
			</item><item>
				<title>A great way to test your custom apiman policy!</title><dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author><description>&lt;p&gt;If you have tried creating your own custom apiman policy, you may have had a little bit of
difficulty creating useful junit tests for it.  Many policies require various apiman
runtime components to be available.  It can be super annoying trying to use something like
mockito to create mock versions of everything your policy needs.  Even for simple policies
you really just want a quick and effective way to test the implementation within a
reasonably ‚Äúreal world‚Äù harness.&lt;/p&gt;

&lt;p&gt;Well you‚Äôve probably guessed by now that I‚Äôm about to show you how it‚Äôs done!  (OK fine,
how it &lt;em&gt;will&lt;/em&gt; be done in the next release of apiman - 1.1.3.Final)&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;In this post I‚Äôll explain (and show!) you how to write a unit test for your apiman
policy, using the new Policy Tester junit framework we‚Äôve created.&lt;/p&gt;

&lt;h2 id=&quot;first-you-need-a-custom-policy&quot;&gt;First you need a custom policy!&lt;/h2&gt;

&lt;p&gt;If you haven‚Äôt created a custom apiman policy yet, have a look at the
&lt;a href=&quot;https://www.apiman.io/latest/developer-guide.html#_plugins&quot;&gt;Developer Guide&lt;/a&gt; to
learn how.&lt;/p&gt;

&lt;p&gt;So for example, let‚Äôs say you‚Äôve created your own simple custom policy class and it
looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MySimplePolicy&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPolicy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConfigurationParseException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPolicyContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;IPolicyChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-MTP-Header&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-Fail-Test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;IPolicyFailureFactoryComponent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failureFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IPolicyFailureFactoryComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doFailure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;failureFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createFailure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PolicyFailureType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Failure&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doApply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPolicyContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;IPolicyChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-MTP-Response-Header&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Goodbye World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doApply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;ok-ive-got-a-policy-how-do-i-test-it&quot;&gt;OK I‚Äôve got a policy, how do I test it?&lt;/h2&gt;

&lt;p&gt;Now that you‚Äôve got your policy, you need a quick and effective way to test it.  I also
think it‚Äôs important for your test to run quickly and for you to be able to easily set
breakpoints to debug the code.  We explored using &lt;a href=&quot;https://arquillian.org/&quot;&gt;Arquillian&lt;/a&gt;
to configure and publish a service with the custom policy to a running WildFly server.
It actually works remarkably well, but the overhead of firing up a WildFly server just
to test a single policy seemed excessive.  That work will likely lead into a separate
testing effort focused on testing larger integration scenarios.&lt;/p&gt;

&lt;p&gt;OK enough - let‚Äôs get to the test!  The first thing you need is to pull the Policy
Tester dependency into your project‚Äôs pom.xml:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.apiman&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;apiman-test-policies&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.1.2-SNAPSHOT&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Great - now just create a new junit test and make sure it extends the &lt;code class=&quot;highlighter-rouge&quot;&gt;ApimanPolicyTest&lt;/code&gt;
base test class.  In that junit test you‚Äôll need to sprinkle in a few annotations
provided by the apiman Policy Testing framework.  At a minimum you will need to
include the &lt;code class=&quot;highlighter-rouge&quot;&gt;@TestingPolicy&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt; annotations.  Both of these annotations
can be specified at either the &lt;em&gt;Class&lt;/em&gt; or &lt;em&gt;Method&lt;/em&gt; level. The former tells the testing
framework which policy is being tested.  The latter describes the policy configuration
that should be used for the test.&lt;/p&gt;

&lt;p&gt;Just look at the example, already:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@TestingPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MySimplePolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyTestPolicyTest1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApimanPolicyTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Send a test HTTP request to the service (resulting in executing the policy).&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PolicyTestResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PolicyTestRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PolicyTestRequestType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/some/resource&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-Test-Name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;testGet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Now do some assertions on the result!&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;EchoResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EchoResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/some/resource&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testGet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-Test-Name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Assert the request header that was added by the policy&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-MTP-Header&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Assert the response header was added by the policy&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Goodbye World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-MTP-Response-Header&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;so-whats-going-on-here&quot;&gt;So what‚Äôs going on here?&lt;/h2&gt;

&lt;p&gt;Let me tell you!  For each test method in your junit test, we‚Äôll actually spin up a fully
functional apiman API Gateway.  We‚Äôll also publish a test service that‚Äôs configured with
your custom policy (and using the policy configuration you specified in the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt;
annotation).  After that, it‚Äôs a simple matter of sending one or more simulated HTTP
requests to the gateway.  You do that by sending a &lt;code class=&quot;highlighter-rouge&quot;&gt;PolicyTestRequest&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;send&lt;/code&gt; method.
Easy peasy!&lt;/p&gt;

&lt;p&gt;Note that it‚Äôs pretty easy to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;PolicyTestRequest&lt;/code&gt; - there‚Äôs a nice little fluent
builder you can use to create it.  The builder allows you to set the HTTP verb, the resource
path, and any HTTP headers.&lt;/p&gt;

&lt;h2 id=&quot;what-about-the-back-end-apiservice&quot;&gt;What about the back-end API/service?&lt;/h2&gt;

&lt;p&gt;Yeah that‚Äôs a good point.  Assuming your policy doesn‚Äôt produce a failure, the API Gateway
we‚Äôre using for the test needs to ‚Äúinvoke‚Äù a back-end service and return the result.  We
simulate this rather than actually going out and making a REST request.  By default, we
create a simple Echo back-end service which bundles up all the information in the REST
request (including anything your policy may have added to the request) and builds a JSON
response that includes all that information.  This is handy because it allows you to
verify that, for example, any HTTP headers your policy added to the request actually
made it through to the back-end service.&lt;/p&gt;

&lt;p&gt;Now are you ready for an advanced topic?  If not I understand, you can just hit the Back
button on your browser!&lt;/p&gt;

&lt;p&gt;Still here?  Great!  Another thing you can do is actually provide your own simulated
back-end service.  This is necessary sometimes when your policy does something
specific with, for example, the service response payload.  You may actually need your
test to respond in a certain way.  To accomplish this all you need to do is use the
&lt;code class=&quot;highlighter-rouge&quot;&gt;@BackEndService&lt;/code&gt; annotation, providing a &lt;em&gt;Class&lt;/em&gt; that implements the
&lt;code class=&quot;highlighter-rouge&quot;&gt;IPolicyTestBackEndService&lt;/code&gt; interface.  You do that, and we‚Äôll use your simulated
back end service for the test instead of the echo service!  :)&lt;/p&gt;

&lt;p&gt;What would that look like?  Something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@TestingPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MySimplePolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyTestPolicyTest1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApimanPolicyTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@BackEndService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyCustomBackEndServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Send a test HTTP request to the service (resulting in executing the policy).&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PolicyTestResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PolicyTestRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PolicyTestRequestType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/some/resource&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-Test-Name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;testGet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Now do some assertions on the result!&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MyCustomBackEndServiceResponseBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyCustomBackEndServiceResponseBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Do some more assertions here using the entity from above!&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And then perhaps your custom back end implementation class might look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyCustomBackEndServiceImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPolicyTestBackEndService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PolicyTestBackEndServiceResponse&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Create a valid service response for this request, and then configure it.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ServiceResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ServiceResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;serviceResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;serviceResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OK&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;serviceResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Date&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;serviceResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Server&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;apiman.policy-test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;serviceResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Let's respond with a classic &quot;Hello World&quot; for the response body&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PolicyTestBackEndServiceResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PolicyTestBackEndServiceResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Alright - if you made it this far thanks for reading!!&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description><category term="policy" /><category term="junit" /><category term="testing" /><pubDate>Sat, 09 May 2015 09:07:45 +0000</pubDate>
				<link>https://apiman.io/blog/policy/junit/testing/2015/05/09/policy-testing.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/policy/junit/testing/2015/05/09/policy-testing.html</guid>
			</item><item>
				<title>A great way to test your custom apiman policy!</title><dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author><description>&lt;p&gt;If you have tried creating your own custom apiman policy, you may have had a little bit of
difficulty creating useful junit tests for it.  Many policies require various apiman
runtime components to be available.  It can be super annoying trying to use something like
mockito to create mock versions of everything your policy needs.  Even for simple policies
you really just want a quick and effective way to test the implementation within a
reasonably ‚Äúreal world‚Äù harness.&lt;/p&gt;

&lt;p&gt;Well you‚Äôve probably guessed by now that I‚Äôm about to show you how it‚Äôs done!  (OK fine,
how it &lt;em&gt;will&lt;/em&gt; be done in the next release of apiman - 1.1.3.Final)&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;In this post I‚Äôll explain (and show!) you how to write a unit test for your apiman
policy, using the new Policy Tester junit framework we‚Äôve created.&lt;/p&gt;

&lt;h2 id=&quot;first-you-need-a-custom-policy&quot;&gt;First you need a custom policy!&lt;/h2&gt;

&lt;p&gt;If you haven‚Äôt created a custom apiman policy yet, have a look at the
&lt;a href=&quot;https://www.apiman.io/latest/developer-guide.html#_plugins&quot;&gt;Developer Guide&lt;/a&gt; to
learn how.&lt;/p&gt;

&lt;p&gt;So for example, let‚Äôs say you‚Äôve created your own simple custom policy class and it
looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MySimplePolicy&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPolicy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConfigurationParseException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPolicyContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;IPolicyChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-MTP-Header&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-Fail-Test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;IPolicyFailureFactoryComponent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failureFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IPolicyFailureFactoryComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doFailure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;failureFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createFailure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PolicyFailureType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Failure&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doApply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPolicyContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;IPolicyChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-MTP-Response-Header&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Goodbye World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doApply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;ok-ive-got-a-policy-how-do-i-test-it&quot;&gt;OK I‚Äôve got a policy, how do I test it?&lt;/h2&gt;

&lt;p&gt;Now that you‚Äôve got your policy, you need a quick and effective way to test it.  I also
think it‚Äôs important for your test to run quickly and for you to be able to easily set
breakpoints to debug the code.  We explored using &lt;a href=&quot;https://arquillian.org/&quot;&gt;Arquillian&lt;/a&gt;
to configure and publish an API with the custom policy to a running WildFly server.
It actually works remarkably well, but the overhead of firing up a WildFly server just
to test a single policy seemed excessive.  That work will likely lead into a separate
testing effort focused on testing larger integration scenarios.&lt;/p&gt;

&lt;p&gt;OK enough - let‚Äôs get to the test!  The first thing you need is to pull the Policy
Tester dependency into your project‚Äôs pom.xml:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.apiman&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;apiman-test-policies&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.1.2-SNAPSHOT&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Great - now just create a new junit test and make sure it extends the &lt;code class=&quot;highlighter-rouge&quot;&gt;ApimanPolicyTest&lt;/code&gt;
base test class.  In that junit test you‚Äôll need to sprinkle in a few annotations
provided by the apiman Policy Testing framework.  At a minimum you will need to
include the &lt;code class=&quot;highlighter-rouge&quot;&gt;@TestingPolicy&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt; annotations.  Both of these annotations
can be specified at either the &lt;em&gt;Class&lt;/em&gt; or &lt;em&gt;Method&lt;/em&gt; level. The former tells the testing
framework which policy is being tested.  The latter describes the policy configuration
that should be used for the test.&lt;/p&gt;

&lt;p&gt;Just look at the example, already:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@TestingPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MySimplePolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyTestPolicyTest1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApimanPolicyTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Send a test HTTP request to the API (resulting in executing the policy).&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PolicyTestResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PolicyTestRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PolicyTestRequestType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/some/resource&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-Test-Name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;testGet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Now do some assertions on the result!&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;EchoResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EchoResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;GET&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/some/resource&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;testGet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-Test-Name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Assert the request header that was added by the policy&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-MTP-Header&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Assert the response header was added by the policy&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Goodbye World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-MTP-Response-Header&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;so-whats-going-on-here&quot;&gt;So what‚Äôs going on here?&lt;/h2&gt;

&lt;p&gt;Let me tell you!  For each test method in your junit test, we‚Äôll actually spin up a fully
functional apiman API Gateway.  We‚Äôll also publish a test API that‚Äôs configured with
your custom policy (and using the policy configuration you specified in the &lt;code class=&quot;highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt;
annotation).  After that, it‚Äôs a simple matter of sending one or more simulated HTTP
requests to the gateway.  You do that by sending a &lt;code class=&quot;highlighter-rouge&quot;&gt;PolicyTestRequest&lt;/code&gt; to the &lt;code class=&quot;highlighter-rouge&quot;&gt;send&lt;/code&gt; method.
Easy peasy!&lt;/p&gt;

&lt;p&gt;Note that it‚Äôs pretty easy to create a &lt;code class=&quot;highlighter-rouge&quot;&gt;PolicyTestRequest&lt;/code&gt; - there‚Äôs a nice little fluent
builder you can use to create it.  The builder allows you to set the HTTP verb, the resource
path, and any HTTP headers.&lt;/p&gt;

&lt;h2 id=&quot;what-about-the-back-end-api&quot;&gt;What about the back-end API?&lt;/h2&gt;

&lt;p&gt;Yeah that‚Äôs a good point.  Assuming your policy doesn‚Äôt produce a failure, the API Gateway
we‚Äôre using for the test needs to ‚Äúinvoke‚Äù a back-end API and return the result.  We
simulate this rather than actually going out and making a REST request.  By default, we
create a simple Echo back-end API which bundles up all the information in the REST
request (including anything your policy may have added to the request) and builds a JSON
response that includes all that information.  This is handy because it allows you to
verify that, for example, any HTTP headers your policy added to the request actually
made it through to the back-end API.&lt;/p&gt;

&lt;p&gt;Now are you ready for an advanced topic?  If not I understand, you can just hit the Back
button on your browser!&lt;/p&gt;

&lt;p&gt;Still here?  Great!  Another thing you can do is actually provide your own simulated
back-end API.  This is necessary sometimes when your policy does something
specific with, for example, the API response payload.  You may actually need your
test to respond in a certain way.  To accomplish this all you need to do is use the
&lt;code class=&quot;highlighter-rouge&quot;&gt;@BackEndApi&lt;/code&gt; annotation, providing a &lt;em&gt;Class&lt;/em&gt; that implements the
&lt;code class=&quot;highlighter-rouge&quot;&gt;IPolicyTestBackEndApi&lt;/code&gt; interface.  You do that, and we‚Äôll use your simulated
back end API for the test instead of the echo API!  :)&lt;/p&gt;

&lt;p&gt;What would that look like?  Something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@TestingPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MySimplePolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyTestPolicyTest1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApimanPolicyTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@BackEndApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyCustomBackEndApiImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Send a test HTTP request to the API (resulting in executing the policy).&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PolicyTestResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PolicyTestRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PolicyTestRequestType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/some/resource&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;X-Test-Name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;testGet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Now do some assertions on the result!&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MyCustomBackEndApiResponseBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyCustomBackEndApiResponseBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Do some more assertions here using the entity from above!&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And then perhaps your custom back end implementation class might look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyCustomBackEndApiImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPolicyTestBackEndApi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PolicyTestBackEndApiResponse&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Create a valid API response for this request, and then configure it.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ApiResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apiResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApiResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;apiResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;apiResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OK&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;apiResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Date&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;apiResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Server&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;apiman.policy-test&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;apiResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;text/plain&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Let's respond with a classic &quot;Hello World&quot; for the response body&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PolicyTestBackEndApiResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PolicyTestBackEndApiResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;apiResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Alright - if you made it this far thanks for reading!!&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description><category term="policy" /><category term="junit" /><category term="testing" /><pubDate>Sat, 09 May 2015 09:07:45 +0000</pubDate>
				<link>https://apiman.io/blog/policy/junit/testing/2015/05/09/policy-testing-redux.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/policy/junit/testing/2015/05/09/policy-testing-redux.html</guid>
			</item><item>
				<title>Authorization: good god, what is it good for?</title><dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author><description>&lt;p&gt;Quite a bit, actually.  :)&lt;/p&gt;

&lt;p&gt;I want to talk about how Authorization currently works in apiman, because it‚Äôs
a little bit more loosely coupled than you might expect.  Note that at some
point in the future we‚Äôre going to be renovating how policies are defined and
configured in the API Manager UI.  But until then, you can refer to this blog
post for an overview of how to configure Authorization!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I won‚Äôt bury the lead - the key to getting Authorization to work is understanding
that it &lt;em&gt;only&lt;/em&gt; works together with Authentication.  First you must add and
configure a compatible &lt;em&gt;Authentication&lt;/em&gt; policy, which will be responsible for
extracting the user‚Äôs roles and passing them along to the Authorization policy.&lt;/p&gt;

&lt;h2 id=&quot;define-your-terms-sir&quot;&gt;Define your terms, sir!&lt;/h2&gt;
&lt;p&gt;Let‚Äôs make sure we‚Äôre on the same page with respect to terminology, shall we?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Authentication&lt;/strong&gt;: the act of validating that a user is who she claims to be, by checking provided credentials against some source of identity.  Examples include BASIC Authentication and OAuth2.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Authorization&lt;/strong&gt;: the act of ensuring that the authenticated user has &lt;em&gt;permission&lt;/em&gt; to perform the requested action or view the requested data.  Typically involves checking that the user possesses one or more required roles.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-does-this-work-in-apiman&quot;&gt;How does this work in apiman?&lt;/h2&gt;

&lt;p&gt;I‚Äôm glad you asked.  In apiman we have split these two functions out into separate policies.  This allows us to use the same Authorization policy regardless of what type of Authentication is being used.&lt;/p&gt;

&lt;p&gt;Basically you need to do the following two things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add and configure an Authentication policy such as the BASIC Authentication Policy or the Keycloak OAuth2 Authentication Policy&lt;/li&gt;
  &lt;li&gt;Add and configure an Authorization Policy.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That‚Äôs it in a nutshell!&lt;/p&gt;

&lt;h2 id=&quot;give-me-more-details&quot;&gt;Give me more details!&lt;/h2&gt;

&lt;p&gt;OK, OK.  If you‚Äôre reading this you probably know the apiman basics - how to create Organizations and Services and whatnot.  If not, I would recommend you check out the &lt;a href=&quot;https://www.apiman.io/latest/user-guide.html&quot;&gt;User Guide&lt;/a&gt; or the &lt;a href=&quot;https://www.apiman.io/latest/tutorials.html&quot;&gt;Tutorials&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you have a service that you want to configure, go ahead and add a new policy.  Choose, for example, the &lt;em&gt;BASIC Authentication Policy&lt;/em&gt; and configure it as seen in the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-05-08/basic-auth-config.png&quot; alt=&quot;Example BASIC Authentication configuration&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you‚Äôve added that policy, you can add the Authorization Policy - make sure they are in the proper order, since the Authentication policy must execute first.  Configure the Authorization Policy however you like, using roles appropriate for your users.  For example, it might look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-05-08/authorization-config.png&quot; alt=&quot;Example Authorization configuration&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once all is said and done, you should have two (at least) policies configured for your service.  It might look something like this in the UI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-05-08/auth-policies.png&quot; alt=&quot;Example policy list&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you follow those steps, everything should work out alright for you!  The Authorization Policy is capable of being quite fine-grained.  You can configure role based access via custom resource location regular expressions and HTTP verb(s).  If all you want is a global required role to access your API, that‚Äôs easy too:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Resource Path&lt;/strong&gt;: /.*&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Verb/action&lt;/strong&gt;: *&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Required Role&lt;/strong&gt;: &lt;your-role&gt;&lt;/your-role&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good luck and come find us on the mailing list or IRC if you have any trouble!&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description><category term="authorization" /><category term="authentication" /><category term="policy" /><pubDate>Fri, 08 May 2015 13:15:15 +0000</pubDate>
				<link>https://apiman.io/blog/authorization/authentication/policy/2015/05/08/authorization.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/authorization/authentication/policy/2015/05/08/authorization.html</guid>
			</item><item>
				<title>Authorization: good god, what is it good for?</title><dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author><description>&lt;p&gt;Quite a bit, actually.  :)&lt;/p&gt;

&lt;p&gt;I want to talk about how Authorization currently works in apiman, because it‚Äôs
a little bit more loosely coupled than you might expect.  Note that at some
point in the future we‚Äôre going to be renovating how policies are defined and
configured in the API Manager UI.  But until then, you can refer to this blog
post for an overview of how to configure Authorization!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I won‚Äôt bury the lead - the key to getting Authorization to work is understanding
that it &lt;em&gt;only&lt;/em&gt; works together with Authentication.  First you must add and
configure a compatible &lt;em&gt;Authentication&lt;/em&gt; policy, which will be responsible for
extracting the user‚Äôs roles and passing them along to the Authorization policy.&lt;/p&gt;

&lt;h2 id=&quot;define-your-terms-sir&quot;&gt;Define your terms, sir!&lt;/h2&gt;
&lt;p&gt;Let‚Äôs make sure we‚Äôre on the same page with respect to terminology, shall we?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Authentication&lt;/strong&gt;: the act of validating that a user is who she claims to be, by checking provided credentials against some source of identity.  Examples include BASIC Authentication and OAuth2.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Authorization&lt;/strong&gt;: the act of ensuring that the authenticated user has &lt;em&gt;permission&lt;/em&gt; to perform the requested action or view the requested data.  Typically involves checking that the user possesses one or more required roles.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-does-this-work-in-apiman&quot;&gt;How does this work in apiman?&lt;/h2&gt;

&lt;p&gt;I‚Äôm glad you asked.  In apiman we have split these two functions out into separate policies.  This allows us to use the same Authorization policy regardless of what type of Authentication is being used.&lt;/p&gt;

&lt;p&gt;Basically you need to do the following two things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add and configure an Authentication policy such as the BASIC Authentication Policy or the Keycloak OAuth2 Authentication Policy&lt;/li&gt;
  &lt;li&gt;Add and configure an Authorization Policy.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That‚Äôs it in a nutshell!&lt;/p&gt;

&lt;h2 id=&quot;give-me-more-details&quot;&gt;Give me more details!&lt;/h2&gt;

&lt;p&gt;OK, OK.  If you‚Äôre reading this you probably know the apiman basics - how to create Organizations and APIs and whatnot.  If not, I would recommend you check out the &lt;a href=&quot;https://www.apiman.io/latest/user-guide.html&quot;&gt;User Guide&lt;/a&gt; or the &lt;a href=&quot;https://www.apiman.io/latest/tutorials.html&quot;&gt;Tutorials&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you have an API that you want to configure, go ahead and add a new policy.  Choose, for example, the &lt;em&gt;BASIC Authentication Policy&lt;/em&gt; and configure it as seen in the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-05-08/basic-auth-config.png&quot; alt=&quot;Example BASIC Authentication configuration&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you‚Äôve added that policy, you can add the Authorization Policy - make sure they are in the proper order, since the Authentication policy must execute first.  Configure the Authorization Policy however you like, using roles appropriate for your users.  For example, it might look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-05-08/authorization-config.png&quot; alt=&quot;Example Authorization configuration&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once all is said and done, you should have two (at least) policies configured for your API.  It might look something like this in the UI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-05-08/auth-policies.png&quot; alt=&quot;Example policy list&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you follow those steps, everything should work out alright for you!  The Authorization Policy is capable of being quite fine-grained.  You can configure role based access via custom resource location regular expressions and HTTP verb(s).  If all you want is a global required role to access your API, that‚Äôs easy too:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Resource Path&lt;/strong&gt;: /.*&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Verb/action&lt;/strong&gt;: *&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Required Role&lt;/strong&gt;: &lt;your-role&gt;&lt;/your-role&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good luck and come find us on the mailing list or IRC if you have any trouble!&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description><category term="authorization" /><category term="authentication" /><category term="policy" /><pubDate>Fri, 08 May 2015 13:15:15 +0000</pubDate>
				<link>https://apiman.io/blog/authorization/authentication/policy/2015/05/08/authorization-redux.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/authorization/authentication/policy/2015/05/08/authorization-redux.html</guid>
			</item><item>
				<title>Customizing JBoss apiman Through Policy Plugins</title><dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author><description>&lt;p&gt;This is the second in a series of articles exploring API management with JBoss apiman. The first article
was a general introduction to apiman for impatient users where in only 10 minutes we installed apiman,
created users and organizations, and services, policies, contracts, and applications. In this article,
we‚Äôll take the first step toward customizing apiman by creating new plugins to implement service policies.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The major new feature added to release 1.0.2 of apiman &lt;a href=&quot;https://www.apiman.io/&quot;&gt;https://www.apiman.io/&lt;/a&gt; is the ability to extend its features through a custom plugin framework. Since policies perform the most important apiman runtime operations, plugins that enable you to create new policies are the first type of plugins to be supported.&lt;/p&gt;

&lt;p&gt;In this article, we‚Äôll examine all the steps that you must perform to create a new policy plugin, and then import it into apiman and configure a service to put it into use.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;For this article, we‚Äôll assume that you have completed all the steps in the first article in this series. The first article guides even the most impatient user through installing and using apiman.&lt;/p&gt;

&lt;h2 id=&quot;accessing-the-example-plugins&quot;&gt;Accessing the Example Plugins&lt;/h2&gt;

&lt;p&gt;Like all JBoss software, apiman provides functioning example code that you can use as a starting point for your own plugins. The easiest way to create and package an apiman is as a standard maven project packaged as a .war file.&lt;/p&gt;

&lt;p&gt;To download a copy of the example plugins, execute this git command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/apiman/apiman-plugins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When the git clone operation completes, you‚Äôll have the source code for multiple example plugins. The exact set of plugins that you have downloaded may change, depending on when you download them, as more examples are always being added. For the purposes of this article, we‚Äôll focus on the ‚Äúconfig-policy‚Äù example plugin. This plugin demonstrates how a plugin can be used to set the value of properties in a message being processed by a service. Specifically, this plugin defines properties in the request and response headers and enables you to set their values to ‚Äútrue.‚Äù&lt;/p&gt;

&lt;h2 id=&quot;requirements-for-a-plugin-implementation&quot;&gt;Requirements for a Plugin Implementation&lt;/h2&gt;

&lt;p&gt;The easiest way that an apiman policy plugin can be build and packaged is as a standard maven project packaged as a .war file. There are just a few modifications that are required to convert a .war into a plugin.&lt;/p&gt;

&lt;p&gt;Let‚Äôs take a closer look at the files and directories that comprise the apiman config-policy plugin, and the changes that are needed to implement a plugin:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚îú---pom.xml
‚îî---src
‚îî---main
‚îú---apiman
‚îÇ  ‚îú---plugin.json
‚îÇ  ‚îî---policyDefs
‚îÇ    ‚îú---config-policyDef.json
‚îÇ    ‚îî---schemas
‚îÇ  ‚îî---config-policyDef.schema
‚îî---java
‚îî---io
‚îî---apiman
‚îî---plugins
‚îî---config_policy
‚îú---ConfigBean.java
‚îî---ConfigPolicy.java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The most obvious difference is the addition of the ‚Äúapiman‚Äù directory. This directory is used to contain the configuration files for the plugin. (In other words, the files that make the project a plugin.) The only project-wide configuration change that you have to make is to modify the plugin‚Äôs maven pom.xml file to include the apiman directory when the project is built. The following lines are added to the plugin‚Äôs pom.xml file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;resource&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;directory&amp;gt;&lt;/span&gt;src/main/apiman&lt;span class=&quot;nt&quot;&gt;&amp;lt;/directory&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;targetPath&amp;gt;&lt;/span&gt;META-INF/apiman&lt;span class=&quot;nt&quot;&gt;&amp;lt;/targetPath&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;filtering&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filtering&amp;gt;&lt;/span&gt;  
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/resource&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The result of these statements in the pom.xml file is that the contents of the apiman directory are included in the project build‚Äôs META-INF directory. (We‚Äôll take a look at this later when we build the plugin project.) Setting filtering to true enables maven property expansion during the creation of the plugin war file.
Configuration files for the plugin are contained in the apiman directory. The primary configuration file is the ‚Äúplugin.json‚Äù file. This file is required for all apiman plugins, regardless of the plugin type. The meta-data contained in this file describes the plugin and is displayed in the API Manager UI.&lt;/p&gt;

&lt;p&gt;Since our example is contributing a policy, it must contain a JSON file that defines the policy. This JSON file is contained in the apiman/policyDefs directory and is named ‚Äúconfig-policyDef.json.‚Äù This file defines the following fields for the policy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;id&lt;/em&gt; - A unique identifier for the policy&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;name&lt;/em&gt; - A user friendly (in other words, a human readable) name for the policy. This policy name is displayed in the API Manager UI&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;description&lt;/em&gt; - A description of the policy&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;policyImpl&lt;/em&gt; - This is the fully qualified classname name of the Java class that actually implements the policy. This value must be properly formatted to include information about the plugin, including placeholders for maven properties, for example, project version.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;icon&lt;/em&gt; - This is the name of a Font Awesome icon &lt;a href=&quot;https://fortawesome.github.io/Font-Awesome/&quot;&gt;https://fortawesome.github.io/Font-Awesome/&lt;/a&gt; that is displayed for the Policy in the API Manager UI.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;formType&lt;/em&gt; - The type of policy configuration UI form. Our example uses JsonSchema.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;form&lt;/em&gt; - This is a relative path to the policy configuration UI form contained in the plugin. Our examples uses the JSON Schema that defines the configuration data format. (More on this file in a minute.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our example, the config-policyDef.json looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;config-policy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Config Policy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A policy used to showcase policy configuration.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;policyImpl&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;plugin:${project.groupId}:${project.artifactId}:${project.version}:${project.packaging}/io.apiman.plugins.config_policy.ConfigPolicy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;icon&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sliders&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;formType&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;JsonSchema&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;form&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;schemas/config-policyDef.schema&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We mentioned that since our example uses the JSON schema &lt;a href=&quot;https://json-schema.org/documentation.html&quot;&gt;https://json-schema.org/documentation.html&lt;/a&gt;, we have to also define the configuration data format. This is done in the policyDefs/schemas/config-policyDef.schema file. This file defines the format used in the policy configuration file data and is used by the API Manager UI to generate a form that is used to fill in the values to be used to configure the policy. In our example, the policy‚Äôs JSON schema defines two properties: requestHeader and responseHeader.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Configure HTTP Headers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Set the HTTP request header to populate with the value 'true' when the request is made. Also set the HTTP response header to populate with the value 'true' after the response is received from the back-end service.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;object&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;properties&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;requestHeader&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Request Header&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;minLength&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;maxLength&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;responseHeader&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Response Header&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;minLength&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;maxLength&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That finishes the description of the policy‚Äôs configuration files. To complete the policy plugin, the example also requires the Java implementation for the policy itself. The policy implementation is contained in the src/main/java/io/apiman/plugins/config_policy/ConfigPolicy.java file. The policy is very simple as it merely appends a header to the http request and response.&lt;/p&gt;

&lt;p&gt;Java policy classes must implement the apiman IPolicy interface. This example takes that a step further by actually extending the io.apiman.gateway.engine.policies.AbstractMappedPolicy class. By doing so, the policy Java code can take advantage of the AbstractMappedPolicy‚Äôs class use of the Jackson (https://github.com/FasterXML/jackson) JSON parser to parse the policy configuration data into a Java bean. (In this example, the bean is implemented in  src/main/java/io/apiman/plugins/config_policy/ConfigBean.java.) If the policy implemented the IPolicy interface, instead of extending AbstractMappedPolicy, then the policy Java class would have to implement its own parser.&lt;/p&gt;

&lt;h2 id=&quot;building-the-plugin-and-installing-it-into-the-maven-repo&quot;&gt;Building the Plugin and Installing it into the Maven Repo&lt;/h2&gt;

&lt;p&gt;Building the plugin with maven is easy. Just execute this command from the directory that contains the plugin‚Äôs pom.xml file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In case you‚Äôre wondering why, we‚Äôre installing the plugin into the maven repo. The answer is simply that in the current release of apiman, the only supported install path is from the maven repo. Future releases of apiman will likely support additional installation paths.&lt;/p&gt;

&lt;h2 id=&quot;installing-a-plugin-into-apiman&quot;&gt;Installing a Plugin into apiman&lt;/h2&gt;

&lt;p&gt;In apiman, a policy plugin, once installed, is available on a system-wide basis. Accordingly, plugins can only be installed by an admin user. After you login as admin, you‚Äôll see this in the admin UI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-03-06/apiman-1.png&quot; alt=&quot;System Administration&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After selecting ‚ÄúManage Plugins,‚Äù you‚Äôll see a screen that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-03-06/apiman-2.png&quot; alt=&quot;Plugins&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, if you then select ‚ÄúAdd Plugin,‚Äù you‚Äôll see this screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-03-06/apiman-3.png&quot; alt=&quot;Add Plugin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The GroupId, ArtifactId, and Version information is all available in the example plugin‚Äôs pom.xml file:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;GroupId&lt;/em&gt;: io.apiman.plugins&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;ArtifactId&lt;/em&gt;: apiman-plugins-config-policy&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Version&lt;/em&gt;: 1.0.3-SNAPSHOT&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After you enter this information for the plugin and click on ‚ÄúAdd Plugin,‚Äù you‚Äôll see this displayed in the UI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-03-06/apiman-4.png&quot; alt=&quot;Plugins&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! The plugin is installed and is ready to be used! Let‚Äôs add it to a service and see it in action.&lt;/p&gt;

&lt;h2 id=&quot;using-the-installed-plugin&quot;&gt;Using the Installed Plugin&lt;/h2&gt;

&lt;p&gt;First, we have to log out of the admin account in the Admin UI and then log back in as the ‚Äúserprov‚Äù service provider. Then, select our ‚Äúecho‚Äù service, and create a new version of the service, based on the original version of the service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-03-06/apiman-6.png&quot; alt=&quot;New Service Version&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, when you add a new policy to the service, you‚Äôll see the example config service that we just installed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-03-06/apiman-5.png&quot; alt=&quot;Add Policy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When you select the Config Policy, you‚Äôll be presented with a dialog where you can specify the values for the two properties defined in the policy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-03-06/apiman-7.png&quot; alt=&quot;Add Policy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs fill in some easy to remember values:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-03-06/apiman-8.png&quot; alt=&quot;Add Policy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After adding the policy, you‚Äôll see it displayed in the policies defined for the service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-03-06/apiman-9.png&quot; alt=&quot;Add Policy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then publish the service. In order to consume the service, login to the API Manager UI as the application developer ‚Äúappdev‚Äù, and create a new application that uses the new service. (We covered the creation of new applications in detail in the first article in this series)&lt;/p&gt;

&lt;p&gt;And when the service is invoked, you‚Äôll see something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-03-06/apiman99.png&quot; alt=&quot;REST Client&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-03-06/apiman100.png&quot; alt=&quot;REST Client&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h2&gt;

&lt;p&gt;OK, let‚Äôs recap. apiman is a rapidly growing and developing project. Each new release brings new features. In release 1.0.2, it became possible for users to contribute custom policies into their apiman installation through the API Manager UI.&lt;/p&gt;
</description><category term="plugins" /><category term="policies" /><category term="development" /><category term="maven" /><pubDate>Fri, 06 Mar 2015 10:22:00 +0000</pubDate>
				<link>https://apiman.io/blog/plugins/policies/development/maven/2015/03/06/custom-policies.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/plugins/policies/development/maven/2015/03/06/custom-policies.html</guid>
			</item><item>
				<title>Customizing JBoss apiman Through Policy Plugins</title><dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author><description>&lt;p&gt;This is the second in a series of articles exploring API management with JBoss apiman. The first article
was a general introduction to apiman for impatient users where in only 10 minutes we installed apiman,
created users and organizations, and APIs, policies, contracts, and client apps. In this article,
we‚Äôll take the first step toward customizing apiman by creating new plugins to implement API policies.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The major new feature added to release 1.0.2 of apiman &lt;a href=&quot;https://www.apiman.io/&quot;&gt;https://www.apiman.io/&lt;/a&gt; is the ability to extend its features through a custom plugin framework. Since policies perform the most important apiman runtime operations, plugins that enable you to create new policies are the first type of plugins to be supported.&lt;/p&gt;

&lt;p&gt;In this article, we‚Äôll examine all the steps that you must perform to create a new policy plugin, and then import it into apiman and configure an API to put it into use.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;For this article, we‚Äôll assume that you have completed all the steps in the first article in this series. The first article guides even the most impatient user through installing and using apiman.&lt;/p&gt;

&lt;h2 id=&quot;accessing-the-example-plugins&quot;&gt;Accessing the Example Plugins&lt;/h2&gt;

&lt;p&gt;Like all JBoss software, apiman provides functioning example code that you can use as a starting point for your own plugins. The easiest way to create and package an apiman is as a standard maven project packaged as a .war file.&lt;/p&gt;

&lt;p&gt;To download a copy of the example plugins, execute this git command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/apiman/apiman-plugins
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;When the git clone operation completes, you‚Äôll have the source code for multiple example plugins. The exact set of plugins that you have downloaded may change, depending on when you download them, as more examples are always being added. For the purposes of this article, we‚Äôll focus on the ‚Äúconfig-policy‚Äù example plugin. This plugin demonstrates how a plugin can be used to set the value of properties in a message being processed by an API. Specifically, this plugin defines properties in the request and response headers and enables you to set their values to ‚Äútrue.‚Äù&lt;/p&gt;

&lt;h2 id=&quot;requirements-for-a-plugin-implementation&quot;&gt;Requirements for a Plugin Implementation&lt;/h2&gt;

&lt;p&gt;The easiest way that an apiman policy plugin can be build and packaged is as a standard maven project packaged as a .war file. There are just a few modifications that are required to convert a .war into a plugin.&lt;/p&gt;

&lt;p&gt;Let‚Äôs take a closer look at the files and directories that comprise the apiman config-policy plugin, and the changes that are needed to implement a plugin:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;‚îú---pom.xml
‚îî---src
‚îî---main
‚îú---apiman
‚îÇ  ‚îú---plugin.json
‚îÇ  ‚îî---policyDefs
‚îÇ    ‚îú---config-policyDef.json
‚îÇ    ‚îî---schemas
‚îÇ  ‚îî---config-policyDef.schema
‚îî---java
‚îî---io
‚îî---apiman
‚îî---plugins
‚îî---config_policy
‚îú---ConfigBean.java
‚îî---ConfigPolicy.java
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The most obvious difference is the addition of the ‚Äúapiman‚Äù directory. This directory is used to contain the configuration files for the plugin. (In other words, the files that make the project a plugin.) The only project-wide configuration change that you have to make is to modify the plugin‚Äôs maven pom.xml file to include the apiman directory when the project is built. The following lines are added to the plugin‚Äôs pom.xml file:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;resource&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;directory&amp;gt;&lt;/span&gt;src/main/apiman&lt;span class=&quot;nt&quot;&gt;&amp;lt;/directory&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;targetPath&amp;gt;&lt;/span&gt;META-INF/apiman&lt;span class=&quot;nt&quot;&gt;&amp;lt;/targetPath&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;filtering&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filtering&amp;gt;&lt;/span&gt;  
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/resource&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The result of these statements in the pom.xml file is that the contents of the apiman directory are included in the project build‚Äôs META-INF directory. (We‚Äôll take a look at this later when we build the plugin project.) Setting filtering to true enables maven property expansion during the creation of the plugin war file.
Configuration files for the plugin are contained in the apiman directory. The primary configuration file is the ‚Äúplugin.json‚Äù file. This file is required for all apiman plugins, regardless of the plugin type. The meta-data contained in this file describes the plugin and is displayed in the API Manager UI.&lt;/p&gt;

&lt;p&gt;Since our example is contributing a policy, it must contain a JSON file that defines the policy. This JSON file is contained in the apiman/policyDefs directory and is named ‚Äúconfig-policyDef.json.‚Äù This file defines the following fields for the policy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;id&lt;/em&gt; - A unique identifier for the policy&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;name&lt;/em&gt; - A user friendly (in other words, a human readable) name for the policy. This policy name is displayed in the API Manager UI&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;description&lt;/em&gt; - A description of the policy&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;policyImpl&lt;/em&gt; - This is the fully qualified classname name of the Java class that actually implements the policy. This value must be properly formatted to include information about the plugin, including placeholders for maven properties, for example, project version.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;icon&lt;/em&gt; - This is the name of a Font Awesome icon &lt;a href=&quot;https://fortawesome.github.io/Font-Awesome/&quot;&gt;https://fortawesome.github.io/Font-Awesome/&lt;/a&gt; that is displayed for the Policy in the API Manager UI.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;formType&lt;/em&gt; - The type of policy configuration UI form. Our example uses JsonSchema.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;form&lt;/em&gt; - This is a relative path to the policy configuration UI form contained in the plugin. Our examples uses the JSON Schema that defines the configuration data format. (More on this file in a minute.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our example, the config-policyDef.json looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;config-policy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Config Policy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;A policy used to showcase policy configuration.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;policyImpl&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;plugin:${project.groupId}:${project.artifactId}:${project.version}:${project.packaging}/io.apiman.plugins.config_policy.ConfigPolicy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;icon&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;sliders&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;formType&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;JsonSchema&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;form&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;schemas/config-policyDef.schema&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We mentioned that since our example uses the JSON schema &lt;a href=&quot;https://json-schema.org/documentation.html&quot;&gt;https://json-schema.org/documentation.html&lt;/a&gt;, we have to also define the configuration data format. This is done in the policyDefs/schemas/config-policyDef.schema file. This file defines the format used in the policy configuration file data and is used by the API Manager UI to generate a form that is used to fill in the values to be used to configure the policy. In our example, the policy‚Äôs JSON schema defines two properties: requestHeader and responseHeader.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Configure HTTP Headers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Set the HTTP request header to populate with the value 'true' when the request is made. Also set the HTTP response header to populate with the value 'true' after the response is received from the back-end API.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;object&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;properties&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;requestHeader&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Request Header&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;minLength&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;maxLength&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;responseHeader&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;title&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Response Header&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;minLength&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;maxLength&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That finishes the description of the policy‚Äôs configuration files. To complete the policy plugin, the example also requires the Java implementation for the policy itself. The policy implementation is contained in the src/main/java/io/apiman/plugins/config_policy/ConfigPolicy.java file. The policy is very simple as it merely appends a header to the http request and response.&lt;/p&gt;

&lt;p&gt;Java policy classes must implement the apiman IPolicy interface. This example takes that a step further by actually extending the io.apiman.gateway.engine.policies.AbstractMappedPolicy class. By doing so, the policy Java code can take advantage of the AbstractMappedPolicy‚Äôs class use of the Jackson (https://github.com/FasterXML/jackson) JSON parser to parse the policy configuration data into a Java bean. (In this example, the bean is implemented in  src/main/java/io/apiman/plugins/config_policy/ConfigBean.java.) If the policy implemented the IPolicy interface, instead of extending AbstractMappedPolicy, then the policy Java class would have to implement its own parser.&lt;/p&gt;

&lt;h2 id=&quot;building-the-plugin-and-installing-it-into-the-maven-repo&quot;&gt;Building the Plugin and Installing it into the Maven Repo&lt;/h2&gt;

&lt;p&gt;Building the plugin with maven is easy. Just execute this command from the directory that contains the plugin‚Äôs pom.xml file.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn install
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In case you‚Äôre wondering why, we‚Äôre installing the plugin into the maven repo. The answer is simply that in the current release of apiman, the only supported install path is from the maven repo. Future releases of apiman will likely support additional installation paths.&lt;/p&gt;

&lt;h2 id=&quot;installing-a-plugin-into-apiman&quot;&gt;Installing a Plugin into apiman&lt;/h2&gt;

&lt;p&gt;In apiman, a policy plugin, once installed, is available on a system-wide basis. Accordingly, plugins can only be installed by an admin user. After you login as admin, you‚Äôll see this in the admin UI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-03-06/apiman-1.png&quot; alt=&quot;System Administration&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After selecting ‚ÄúManage Plugins,‚Äù you‚Äôll see a screen that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-03-06/apiman-2.png&quot; alt=&quot;Plugins&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, if you then select ‚ÄúAdd Plugin,‚Äù you‚Äôll see this screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-03-06/apiman-3.png&quot; alt=&quot;Add Plugin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The GroupId, ArtifactId, and Version information is all available in the example plugin‚Äôs pom.xml file:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;GroupId&lt;/em&gt;: io.apiman.plugins&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;ArtifactId&lt;/em&gt;: apiman-plugins-config-policy&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Version&lt;/em&gt;: 1.0.3-SNAPSHOT&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After you enter this information for the plugin and click on ‚ÄúAdd Plugin,‚Äù you‚Äôll see this displayed in the UI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-03-06/apiman-4.png&quot; alt=&quot;Plugins&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! The plugin is installed and is ready to be used! Let‚Äôs add it to an API and see it in action.&lt;/p&gt;

&lt;h2 id=&quot;using-the-installed-plugin&quot;&gt;Using the Installed Plugin&lt;/h2&gt;

&lt;p&gt;First, we have to log out of the admin account in the Admin UI and then log back in as the ‚Äúserprov‚Äù API provider. Then, select our ‚Äúecho‚Äù API, and create a new version of the API, based on the original version of the API:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-03-06/apiman-6.png&quot; alt=&quot;New API Version&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, when you add a new policy to the API, you‚Äôll see the example config API that we just installed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-03-06/apiman-5.png&quot; alt=&quot;Add Policy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When you select the Config Policy, you‚Äôll be presented with a dialog where you can specify the values for the two properties defined in the policy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-03-06/apiman-7.png&quot; alt=&quot;Add Policy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs fill in some easy to remember values:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-03-06/apiman-8.png&quot; alt=&quot;Add Policy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After adding the policy, you‚Äôll see it displayed in the policies defined for the API:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-03-06/apiman-9.png&quot; alt=&quot;Add Policy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then publish the API. In order to consume the API, login to the API Manager UI as the client app developer ‚Äúappdev‚Äù, and create a new client app that uses the new API. (We covered the creation of new client apps in detail in the first article in this series)&lt;/p&gt;

&lt;p&gt;And when the API is invoked, you‚Äôll see something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-03-06/apiman99.png&quot; alt=&quot;REST Client&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-03-06/apiman100.png&quot; alt=&quot;REST Client&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h2&gt;

&lt;p&gt;OK, let‚Äôs recap. apiman is a rapidly growing and developing project. Each new release brings new features. In release 1.0.2, it became possible for users to contribute custom policies into their apiman installation through the API Manager UI.&lt;/p&gt;
</description><category term="plugins" /><category term="policies" /><category term="development" /><category term="maven" /><pubDate>Fri, 06 Mar 2015 10:22:00 +0000</pubDate>
				<link>https://apiman.io/blog/plugins/policies/development/maven/2015/03/06/custom-policies-redux.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/plugins/policies/development/maven/2015/03/06/custom-policies-redux.html</guid>
			</item><item>
				<title>An Impatient New User's Introduction to API Management with JBoss apiman 1.0</title><dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author><description>&lt;p&gt;Software application development models are evolutionary things. New technologies are always being created
and require new approaches. It‚Äôs frequently the case today, that a service oriented architecture (SOA) model
is used and that the end product is a software service that can be used by applications. The explosion in
growth of mobile devices has only accelerated this trend. Every new mobile phone sold is another platform
onto which applications are deployed. These applications are often built from services provided from multiple
sources. The applications often consume these services through their APIs.&lt;/p&gt;

&lt;p&gt;OK, that‚Äôs all interesting, but why does this matter?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Here‚Äôs why:&lt;/p&gt;

&lt;p&gt;If you are providing a service, you‚Äôd probably like to receive payment when it‚Äôs used by an application. For
example, let‚Äôs say that you‚Äôve spent months creating a new service that provides incredibly accurate and
timely driving directions. You can imagine every mobile phone GPS app making use of your service someday.
That is, however, assuming that you can find a way to enforce a contract on consumers of the API and provide
them with a service level agreement (SLA). Also, you have to find a way to actually track consumers‚Äô use of
the API so that you can actually enforce that SLA. Finally, you have to have the means to update a service
and publish new versions of services.&lt;/p&gt;

&lt;p&gt;Likewise, if you are consuming a service, for example, if you want to build the killer app that will use that
cool new mapping service, you have to have the means to find the API, identify the API‚Äôs endpoint, and
register your usage of the API with its provider.&lt;/p&gt;

&lt;p&gt;The approach that is followed to fulfill both service providers‚Äô and consumers‚Äô needs is‚Ä¶API Management.&lt;/p&gt;

&lt;h2 id=&quot;jboss-apiman-10&quot;&gt;JBoss apiman 1.0&lt;/h2&gt;

&lt;p&gt;apiman is JBoss‚Äô open source API Management system. apiman fulfills service API providers‚Äô and consumers‚Äô
needs by implementing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;API Manager&lt;/em&gt; - The API Manager provides an easy way for API/service providers to use a web UI to define service contracts for their APIs, apply these contracts across multiple APIs, and control role-based user access and API versioning. These contracts can govern access to services and limits on the rate at which consumers can access services. The same UI enables API consumers to easily locate and access APIs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;API Gateway&lt;/em&gt; - The gateway applies the service contract policies of API Management by enforcing at runtime the rules defined in the contracts and tracking the service API consumers‚Äô use of the APIs for every request made to the services. The way that the API Gateway works is that the consumer of the service accesses the service through a URL that designates the API Gateway as a proxy for the service. If the policies defined to govern access to the service (see a later section in this post for a discussion of apiman polices), the API Gateway then proxies requests to the service‚Äôs backend API implementation.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best way to understand API Management with apiman is to see it in action. In this post, we‚Äôll install
apiman 1.0, configure an API with contracts through the API Manager, and watch the API Gateway control access
to the API and track its use.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;We don‚Äôt need very much to run apiman out of the box. Before we install apiman, you‚Äôll have to have Java (version 1.7 or newer) installed on your system. You‚Äôll also need to git and maven installed to be able to build the example service that we‚Äôll use.&lt;/p&gt;

&lt;p&gt;A note on software versions: In this post we‚Äôll use the latest available version of apiman as of December 2014. As if this writing, version 1.0 of apiman was just released (December 2014). Depending on the versions of software that you use, some screen displays may look a bit different.&lt;/p&gt;

&lt;h2 id=&quot;getting-apiman&quot;&gt;Getting apiman&lt;/h2&gt;

&lt;p&gt;Like all JBoss software, installation of apiman is simple. First, you will need an application server on which to install and run apiman. We‚Äôll use the open source JBoss WildFly server release 8.2 &lt;a href=&quot;https://www.wildfly.org/&quot;&gt;https://www.wildfly.org/&lt;/a&gt;.  To make things easier, apiman includes a pointer to JBoss WildFly on its download page here: &lt;a href=&quot;https://www.apiman.io/latest/download.html&quot;&gt;https://www.apiman.io/latest/download.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To install WildFly, simply download &lt;a href=&quot;https://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip&quot;&gt;https://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip&lt;/a&gt; and unzip the file into the directory in which you want to run the sever.&lt;/p&gt;

&lt;p&gt;Then, download the apiman 1.0 WildFly overlay zip file inside the directory that was created when you un-zipped the WildFly download. The apiman 1.0 WildFly overlay zip file is available here: &lt;a href=&quot;https://downloads.jboss.org/apiman/1.0.0.Final/apiman-distro-wildfly8-1.0.0.Final-overlay.zip&quot;&gt;https://downloads.jboss.org/apiman/1.0.0.Final/apiman-distro-wildfly8-1.0.0.Final-overlay.zip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The commands that you will execute will look something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir apiman
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;apiman
unzip wildfly-8.2.0.Final.zip
unzip &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; apiman-distro-wildfly8-1.0.0.Final-overlay.zip &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; wildfly-8.2.0.Final&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, to start the server, execute these commands:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;wildfly-8.2.0.Final
./bin/standalone.sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; standalone-apiman.xml&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The server will write logging messages to the screen. When you see some messages that look like this, you‚Äôll know that the server is up and running with apiman installed:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;13:57:03,229 INFO  [org.jboss.as.server] (ServerService Thread Pool -- 29) JBAS018559: Deployed &quot;apiman-ds.xml&quot; (runtime-name : &quot;apiman-ds.xml&quot;)
13:57:03,261 INFO  [org.jboss.as] (Controller Boot Thread) JBAS015961: Http management interface listening on &amp;lt;a href=&quot;http://127.0.0.1:9990/management&quot;&amp;gt;http://127.0.0.1:9990/management&amp;lt;/a&amp;gt;
13:57:03,262 INFO  [org.jboss.as] (Controller Boot Thread) JBAS015951: Admin console listening on &amp;lt;a href=&quot;http://127.0.0.1:9990&quot;&amp;gt;http://127.0.0.1:9990&amp;lt;/a&amp;gt;
13:57:03,262 INFO  [org.jboss.as] (Controller Boot Thread) JBAS015874: WildFly 8.2.0.Final &quot;Tweek&quot; started in 5518ms - Started 754 of 858 services (171 services are lazy, passive or on-demand)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If this were a production server, the first thing that we‚Äôd do is to change the OOTB default admin username and/or password. apiman is configured by default to use JBoss KeyCloak &lt;a href=&quot;https://keycloak.jboss.org/&quot;&gt;https://keycloak.jboss.org/&lt;/a&gt; for password security. Also, the default database used by apiman to store contract and service information is the H2 database. For a production server, you‚Äôd want to reconfigure this to use a production database. Note: apiman includes DDLs for both MySQL and PostgreSQL.&lt;/p&gt;

&lt;p&gt;For the purposes of our demo, we‚Äôll keep things simple and use the default configuration.&lt;/p&gt;

&lt;p&gt;To access apiman‚Äôs API Manager UI, go to: &lt;a href=&quot;http://localhost:8080/apiman-manager&quot;&gt;http://localhost:8080/apiman-manager&lt;/a&gt;, and log in. The admin user account that we‚Äôll use has a username of ‚Äúadmin‚Äù and a password of ‚Äúadmin123!‚Äù&lt;/p&gt;

&lt;p&gt;You should see a screen that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/apiman_1.png&quot; alt=&quot;Dashboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before we start using apiman, let‚Äôs take a look at how apiman defines how services and the meta data on which they depend are organized.&lt;/p&gt;

&lt;h2 id=&quot;policies-plans-and-organizations&quot;&gt;Policies, Plans, and Organizations&lt;/h2&gt;

&lt;p&gt;apiman uses a hierarchical data model that consists of these elements: Polices, Plans, and Organizations:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/apiman_2.jpg&quot; alt=&quot;Diagram_1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;policies&quot;&gt;Policies&lt;/h2&gt;

&lt;p&gt;Policies are at the lowest level of the data model, and they are the basis on which the higher level elements of the data model are built. A policy defines an action that is performed by the API Gateway at runtime. Everything defined in the API Manager UI is there to enable apiman to apply policies to requests made to services.&lt;/p&gt;

&lt;p&gt;When a request to a service is made, apiman creates a chain of policies to be applied to that request. apiman policy chains define a specific sequence order in which the policies defined in the API Manager UI are applied to service requests.&lt;/p&gt;

&lt;p&gt;The sequence in which incoming service requests have policies applied is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, at the application level. In apiman, an application is contracted to use one or more services.&lt;/li&gt;
  &lt;li&gt;Second, at the plan level. In apiman, policies are organized into groups called plans. (We‚Äôll discuss plans in the next section of this post.)&lt;/li&gt;
  &lt;li&gt;Third, at the individual service level.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What happens is that when a service request is received by the API Gateway at runtime, the policy chain is applied in the order of application, plan, and service. If no failures, such as a rate counter being exceeded, occur, the API Gateway sends the request to the service‚Äôs backend API implementation. As we mentioned earlier in this post, the API Gateway acts as a proxy for the service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/apiman_3.jpg&quot; alt=&quot;Diagram_2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, when the API Gateway receives a response from the service‚Äôs backend implementation, the policy chain is applied again, but this time in the reverse order. The service policies are applied first, then the plan policies, and finally the application policies. If no failures occur, then the service response is sent back to the consumer of the service.&lt;/p&gt;

&lt;p&gt;By applying the policy chain twice, both for the originating incoming request and the resulting response, apiman allows policy implementations two opportunities to provide management functionality during the lifecycle. The following diagram illustrates this two-way approach to applying policies:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/apiman_4.jpg&quot; alt=&quot;Diagram_3&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;plans&quot;&gt;Plans&lt;/h2&gt;

&lt;p&gt;In apiman, a ‚Äúplan‚Äù is a set policies that together define the level of service that apiman provides for service. Plans enable apiman users to define multiple different levels of service for their APIs, based on policies. It‚Äôs common to define different plans for the same service, where the differences depend on configuration options. For example, a group or company may offer both a ‚Äúgold‚Äù and ‚Äúsilver‚Äù plan for the same service. The gold plan may be more expensive than the silver plan, but it may offer a higher level of service requests in a given (and configurable) time period.&lt;/p&gt;

&lt;h2 id=&quot;organizations&quot;&gt;Organizations&lt;/h2&gt;

&lt;p&gt;The ‚Äúorganization‚Äù is at top level of the apiman data model.&lt;/p&gt;

&lt;p&gt;An organization contains and manages all elements used by a company, university, group inside a company, etc. for API management with apiman. All plans, services, applications, and users for a group are defined in an apiman organization. In this way, an organization acts as a container of other elements. Users must be associated with an organization before they can use apiman to create or consume services. apiman implements role-based access controls for users. The role assigned to a user defines the actions that a user can perform and the elements that a user can manage.&lt;/p&gt;

&lt;p&gt;Before we can define a service, the policies that govern how it is accessed, the users who will be able to access, and the organizations that will create and consume it, we need a service and a client to access that service. Luckily, creating the service and deploying it to our WildFly server, and accessing it through a client are easy.&lt;/p&gt;

&lt;h2 id=&quot;getting-and-building-and-deploying-the-example-service&quot;&gt;Getting and Building and Deploying the Example Service&lt;/h2&gt;

&lt;p&gt;The source code for the example service is contained in a git repo (https://git-scm.com) hosted at github (https://github.com/apiman). To download a copy of the example service, navigate to the directory in which you want to build the service and execute this git command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git@github.com:apiman/apiman-quickstarts.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As the source code is downloading, you‚Äôll see output that looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git@github.com:apiman/apiman-quickstarts.git
Initialized empty Git repository in /tmp/tmp/apiman-quickstarts/.git/
remote: Counting objects: 104, done.
remote: Total 104 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (104/104), 18.16 KiB, done.
Resolving deltas: 100% (40/40), done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And, after the download is complete, you‚Äôll see a populated directory tree that looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;‚îî‚îÄ‚îÄ apiman-quickstarts
  ‚îú‚îÄ‚îÄ echo-service
  ‚îÇ  ‚îú‚îÄ‚îÄ pom.xml
  ‚îÇ  ‚îú‚îÄ‚îÄ README.md
  ‚îÇ  ‚îî‚îÄ‚îÄ src
  ‚îÇ    ‚îî‚îÄ‚îÄ main
  ‚îÇ    ‚îú‚îÄ‚îÄ java
  ‚îÇ    ‚îÇ  ‚îî‚îÄ‚îÄ io
  ‚îÇ    ‚îÇ    ‚îî‚îÄ‚îÄ apiman
  ‚îÇ    ‚îÇ    ‚îî‚îÄ‚îÄ quickstarts
  ‚îÇ    ‚îÇ    ‚îî‚îÄ‚îÄ echo
  ‚îÇ    ‚îÇ    ‚îú‚îÄ‚îÄ EchoResponse.java
  ‚îÇ    ‚îÇ    ‚îî‚îÄ‚îÄ EchoServlet.java
  ‚îÇ    ‚îî‚îÄ‚îÄ webapp
  ‚îÇ    ‚îî‚îÄ‚îÄ WEB-INF
  ‚îÇ    ‚îú‚îÄ‚îÄ jboss-web.xml
  ‚îÇ    ‚îî‚îÄ‚îÄ web.xml
  ‚îú‚îÄ‚îÄ LICENSE
  ‚îú‚îÄ‚îÄ pom.xml
  ‚îú‚îÄ‚îÄ README.md
  ‚îú‚îÄ‚îÄ release.sh
  ‚îî‚îÄ‚îÄ src
   ‚îî‚îÄ‚îÄ main
   ‚îî‚îÄ‚îÄ assembly
   ‚îî‚îÄ‚îÄ dist.xml&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As we mentioned earlier in the post, the example service is very simple. The only action that the service performs is to echo back in responses the meta data in the REST (https://en.wikipedia.org/wiki/Representational_state_transfer) requests that it receives.&lt;/p&gt;

&lt;p&gt;Maven is used to build the service. To build the service into a deployable .war file, navigate to the directory into which you downloaded the service example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd apiman-quickstarts/echo-service
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And then execute this maven command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn package
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As the service is being built into a .war file, you‚Äôll see output that looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[INFO] Scanning for projects...
[INFO]
[INFO] Using the builder org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder with a thread count of 1
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building apiman-quickstarts-echo-service 1.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ apiman-quickstarts-echo-service ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /jboss/local/redhat_git/apiman-quickstarts/echo-service/src/main/resources
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ apiman-quickstarts-echo-service ---
[INFO] Compiling 2 source files to /jboss/local/redhat_git/apiman-quickstarts/echo-service/target/classes
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ apiman-quickstarts-echo-service ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /jboss/local/redhat_git/apiman-quickstarts/echo-service/src/test/resources
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ apiman-quickstarts-echo-service ---
[INFO] No sources to compile
[INFO]
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ apiman-quickstarts-echo-service ---
[INFO] No tests to run.
[INFO]
[INFO] --- maven-war-plugin:2.2:war (default-war) @ apiman-quickstarts-echo-service ---
[INFO] Packaging webapp
[INFO] Assembling webapp in [/jboss/local/redhat_git/apiman-quickstarts/echo-service/target/apiman-quickstarts-echo-service-1.0.1-SNAPSHOT]
[INFO] Processing war project
[INFO] Copying webapp resources [/jboss/local/redhat_git/apiman-quickstarts/echo-service/src/main/webapp]
[INFO] Webapp assembled in [23 msecs]
[INFO] Building war: /jboss/local/redhat_git/apiman-quickstarts/echo-service/target/apiman-quickstarts-echo-service-1.0.1-SNAPSHOT.war
[INFO] WEB-INF/web.xml already added, skipping
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1.184 s
[INFO] Finished at: 2014-12-26T16:11:19-05:00
[INFO] Final Memory: 14M/295M
[INFO] ------------------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you look closely, near the end of the output, you‚Äôll see the location of the .war file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/jboss/local/redhat_git/apiman-quickstarts/echo-service/target/apiman-quickstarts-echo-service-1.0.1-SNAPSHOT.war
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To deploy the service, we can copy the .war file to our WildFly server‚Äôs ‚Äúdeployments‚Äù directory. After you copy the service‚Äôs .war file to the deployments directory, you‚Äôll see output like this generated by the WildFly server:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;16:54:44,313 INFO  [org.jboss.as.server.deployment] (MSC service thread 1-7) JBAS015876: Starting deployment of &quot;apiman-quickstarts-echo-service-1.0.1-SNAPSHOT.war&quot; (runtime-name: &quot;apiman-quickstarts-echo-service-1.0.1-SNAPSHOT.war&quot;)
16:54:44,397 INFO  [org.wildfly.extension.undertow] (MSC service thread 1-16) JBAS017534: Registered web context: /apiman-echo
16:54:44,455 INFO  [org.jboss.as.server] (DeploymentScanner-threads - 1) JBAS018559: Deployed &quot;apiman-quickstarts-echo-service-1.0.1-SNAPSHOT.war&quot; (runtime-name : &quot;apiman-quickstarts-echo-service-1.0.1-SNAPSHOT.war&quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Make special note of this line of output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;16:54:44,397 INFO  [org.wildfly.extension.undertow] (MSC service thread 1-16) JBAS017534: Registered web context: /apiman-echo&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This output indicates that the URL of the deployed example service is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[a href=&quot;http://localhost:8080/apiman-echo&quot; style=&quot;text-decoration: none;&quot;]http://localhost:8080/apiman-echo&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Remember, however, that this is the URL of the deployed example service if we access it directly. We‚Äôll refer to this as the ‚Äúunmanaged service‚Äù as we are able to connect to the service directly, without going through the API Gateway.  The URL to access the service through the API Gateway (‚Äúthe managed service‚Äù) at runtime will be different.&lt;/p&gt;

&lt;p&gt;Now that our example service is installed, it‚Äôs time to install and configure our client to access the server.&lt;/p&gt;

&lt;h2 id=&quot;accessing-the-example-service-through-a-client&quot;&gt;Accessing the Example Service Through a Client&lt;/h2&gt;

&lt;p&gt;There are a lot of options available when it comes to what we can use for a client to access our service. We‚Äôll keep the client simple so that we can keep our focus on apiman and simply install a REST client into the FireFox browser. The REST Client FireFox add-on (http://restclient.net/) is available here: https://addons.mozilla.org/en-US/firefox/addon/restclient/versions/2.0.3&lt;/p&gt;

&lt;p&gt;After you install the client into FireFox, you can access the deployed service using the URL that we just defined. If you execute a GET command, you‚Äôll see output that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-4.png&quot; alt=&quot;Screenshot 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that our example service is built, deployed and running, it‚Äôs time to create the organizations for the service provider and the service consumer. The differences between the requirements of the two organizations will be evident in their apiman configuration properties.&lt;/p&gt;

&lt;h2 id=&quot;creating-users-for-the-service-provider-and-consumer&quot;&gt;Creating Users for the Service Provider and Consumer&lt;/h2&gt;

&lt;p&gt;Before we create the organizations, we have to create a user for each organization. We‚Äôll start by creating the service provider user. To do this, logout from the admin account in the API Manager UI. The login dialog will then be displayed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-5.png&quot; alt=&quot;Screenshot 5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select the ‚ÄúNew user‚Äù Option and register the service provider user:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-6.png&quot; alt=&quot;Screenshot 6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, logout and repeat the process to register a new application developer user too:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-7.png&quot; alt=&quot;Screenshot 7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that the new users are registered we can create the organizations.&lt;/p&gt;

&lt;h2 id=&quot;creating-the-service-producer-organization&quot;&gt;Creating the Service Producer Organization&lt;/h2&gt;

&lt;p&gt;To create the service producer organization, log back into the API Manager UI as the servprov user and select ‚ÄúCreate a new Organization‚Äù:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/apiman_2.png&quot; alt=&quot;dash-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select a name and description for the organization, and press ‚ÄúCreate Organization‚Äù:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-15.png&quot; alt=&quot;Screenshot 15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, here‚Äôs our organization:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-16.png&quot; alt=&quot;Screenshot 16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that in a production environment, users would request membership in an organization. The approval process for accepting new members into an organization would follow the organization‚Äôs workflow, but this would be handled outside of the API Manager. For the purposes of our demonstration, we‚Äôll keep things simple.&lt;/p&gt;

&lt;h2 id=&quot;configuring-the-service-its-policies-and-plans&quot;&gt;Configuring the Service, its Policies, and Plans&lt;/h2&gt;

&lt;p&gt;To configure the service, we‚Äôll first create a plan to contain the policies that we want applied by the API Gateway at runtime when requests to the service are made. To create a new plan, select the ‚ÄúPlans‚Äù tab. We‚Äôll create a ‚Äúgold‚Äù plan:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-17.png&quot; alt=&quot;Screenshot 17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the plan is created, we will add policies to it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-18.png&quot; alt=&quot;Screenshot 18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;apiman provides several OOTB policies. Since we want to be able to demonstrate a policy being applied, we‚Äôll select a Rate Limiting Policy, and set its limit to a very low level. If our service receives more than 10 requests in a day, the policy should block all subsequent requests. So much for a ‚Äúgold‚Äù level of service!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-19.png&quot; alt=&quot;Screenshot 19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After we create the policy and add it to the plan, we have to lock the plan:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-21.png&quot; alt=&quot;Screenshot 21&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, here is the finished, and locked plan:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-22.png&quot; alt=&quot;Screenshot 22&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point, additional plans can be defined for the service. We‚Äôll also create a ‚Äúsilver‚Äù plan, that will offer a lower level of service (i.e., a request rate limit lower than 10 per day) than the gold plan. Since the process to create this silver plan is identical to that of the gold plan, we‚Äôll skip the screenshots.&lt;/p&gt;

&lt;p&gt;Now that the two plans are complete and locked, it‚Äôs time to define the service.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-23.png&quot; alt=&quot;Screenshot 23&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We‚Äôll give the service an appropriate name, so that providers and consumers alike will be able to run a query in the API Manager to find it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-24.png&quot; alt=&quot;Screenshot 24&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the service is defined, we have to define its implementation. In the context of the API Manager, the API Endpoint is the service‚Äôs direct URL. Remember that the API Gateway will act as a proxy for the service, so it must know the service‚Äôs actual URL. In the case of our example service, the URL is:  &lt;a href=&quot;http://localhost:8080/apiman-echo&quot;&gt;http://localhost:8080/apiman-echo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-25.png&quot; alt=&quot;Screenshot 25&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The plans tab shows which plans are available to be applied to the service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-26.png&quot; alt=&quot;Screenshot 26&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs make our service more secure by adding an authentication policy that will require users to login before they can access the service. Select the Policies tab, and then define a simple authentication policy. Remember the user name and password that you define here as we‚Äôll need them later on when send requests to the service.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-27.png&quot; alt=&quot;Screenshot 27&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the authentication policy is added, we can publish the service to the API Gateway:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-28.png&quot; alt=&quot;Screenshot 28&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, here it is, the published service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-29.png&quot; alt=&quot;Screenshot 29&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OK, that finishes the definition of the service provider organization and the publication of the service.&lt;/p&gt;

&lt;p&gt;Next, we‚Äôll switch over to the service consumer side and create the service consumer organization and register an application to connect to the managed service through the proxy of the API Gateway.&lt;/p&gt;

&lt;h2 id=&quot;the-service-consumer-organization&quot;&gt;The Service Consumer Organization&lt;/h2&gt;

&lt;p&gt;We‚Äôll repeat the process that we used to create the application development organization. Log in to the API Manager UI as the ‚Äúappdev‚Äù user and create the organization:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-30.png&quot; alt=&quot;Screenshot 30&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unlike the process we used when we created the elements used by the service provider, the first step that we‚Äôll take is to create a new application and then search for the service to be used by the application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-31.png&quot; alt=&quot;Screenshot 31&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Searching for the service is easy, as we were careful to set the service name to something memorable:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-32.png&quot; alt=&quot;Screenshot 32&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select the service name, and then specify the plan to be used. We‚Äôll splurge and use the gold plan:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-33.png&quot; alt=&quot;Screenshot 33&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, select ‚Äúcreate contract‚Äù for the plan:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-34.png&quot; alt=&quot;Screenshot 34&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, agree to the contract terms (which seem to be written in a strange form of Latin in the apiman 1.0 release):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-35.png&quot; alt=&quot;Screenshot 35&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The last step is to register the application with the API Gateway so that the gateway can act as a proxy for the service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-36.png&quot; alt=&quot;Screenshot 36&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! All the steps necessary to provide and consume the service are complete!&lt;/p&gt;

&lt;p&gt;There‚Äôs just one more step that we have to take in order for clients to be able access the service through the API Gateway.&lt;/p&gt;

&lt;p&gt;Remember the URL that we used to access the unmanaged service directly? Well, forget it. In order to access the managed service through the API Gateway acting as a proxy for other service we have to obtain the managed service‚Äôs URL. In the API Manager UI, head on over to the ‚ÄúAPIs‚Äù tab for the application, click on the the ‚Äò&amp;gt;‚Äô character to the left of the service name. This will expose the API Key and the service‚Äôs HTTP endpoint in the API Gateway:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-37.png&quot; alt=&quot;Screenshot 37&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In order to be able access the service through the API Gateway, we have to provide the API Key with each request. The API Key can be provided either through an HTTP Header (X-API-Key) or a URL query parameter. Luckily, the API Manager UI does the latter for us. Select the icon to the right of the HTTP Endpoint and this dialog is displayed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-38.png&quot; alt=&quot;Screenshot 38&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Copy the URL into the clipboard. We‚Äôll need to enter this into the client in a bit. The combined API Key and HTTP endpoint should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:8080/apiman-gateway/ACMEServices/echo/1.0?apikey=c374c202-d4b3-4442-b9e4-c6654f406e3d&quot;&gt;http://localhost:8080/apiman-gateway/ACMEServices/echo/1.0?apikey=c374c202-d4b3-4442-b9e4-c6654f406e3d&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;accessing-the-managed-service-through-the-apiman-api-gateway-watching-the-policies-at-runtime&quot;&gt;Accessing the Managed Service Through the apiman API Gateway, Watching the Policies at Runtime&lt;/h2&gt;

&lt;p&gt;Thanks for hanging in there! The set up is done. Now, we can fire up the client and watch the policies in action as they are applied at runtime by the API Gateway, for example:&lt;/p&gt;

&lt;p&gt;Open the client, and enter the URL for the managed service &lt;a href=&quot;http://localhost:8080/apiman-gateway/ACMEServices/echo/1.0?apikey=c374c202-d4b3-4442-b9e4-c6654f406e3d&quot;&gt;http://localhost:8080/apiman-gateway/ACMEServices/echo/1.0?apikey=c374c202-d4b3-4442-b9e4-c6654f406e3d&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What happens first is that the authentication policy is applied and a login dialog is then displayed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-41.png&quot; alt=&quot;Screenshot 41&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enter the username and password (user1/password) that we defined when we created the authentication policy to access the service. The fact that you are seeing this dialog confirms that you are accessing the managed service and are not accessing the service directly.&lt;/p&gt;

&lt;p&gt;When you send a GET request to the service, you should see a successful response:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-40.png&quot; alt=&quot;Screenshot 40&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So far so good. Now, send 10 more requests and you will see a response that looks like this as the gold plan rate limit is exceeded:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-39.png&quot; alt=&quot;Screenshot 39&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And there it is. Your gold plan has been exceeded. Maybe next time you‚Äôll spend a little more and get the platinum plan!  ;-)&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-up&lt;/h2&gt;

&lt;p&gt;Let‚Äôs recap what we just accomplished in this demo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We installed apiman 1.0 onto a WildFly server instance.&lt;/li&gt;
  &lt;li&gt;We used git to download and maven to build a sample REST client.&lt;/li&gt;
  &lt;li&gt;As a service provider, we created an organization, defined policies based on service use limit rates and user authentication, and a plan, and assigned them to a service.&lt;/li&gt;
  &lt;li&gt;As a service consumer, we searched for and found that service, and assigned it to an application.&lt;/li&gt;
  &lt;li&gt;As a client, we accessed the service and observed how the API Gateway managed the service.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, if you note, in the process of doing all this, the only code that we had to write or build was for the client. We were able to fully configure the service, policies, plans, and the application in the API Manager UI.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What‚Äôs Next?&lt;/h2&gt;

&lt;p&gt;In this post, we‚Äôve only scratched the surface of API Management with apiman. To learn more about apiman, you can explore its website here: https://www.apiman.io/&lt;/p&gt;

&lt;p&gt;Join the project mailing list here: &lt;a href=&quot;https://lists.jboss.org/mailman/listinfo/apiman-user&quot;&gt;https://lists.jboss.org/mailman/listinfo/apiman-user&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And, better still, get involved! Contribute bug reports or feature requests. Write about your own experiences with apiman. Download the apiman source code, take a look around, and contribute your own additions. apiman 1.0 was just released, there‚Äôs no better time to join in and contribute!&lt;/p&gt;

&lt;h2 id=&quot;downloads-used-in-this-article&quot;&gt;Downloads Used in this Article&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;REST Client &lt;a href=&quot;https://restclient.net/&quot;&gt;https://restclient.net/&lt;/a&gt; FireFox Add-On - &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/restclient/&quot;&gt;https://addons.mozilla.org/en-US/firefox/addon/restclient/versions/2.0.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Echo service source code - &lt;a href=&quot;https://github.com/apiman/apiman-quickstarts&quot;&gt;https://github.com/apiman/apiman-quickstarts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;apiman 1.0 - &lt;a href=&quot;https://downloads.jboss.org/apiman/1.0.0.Final/apiman-distro-wildfly8-1.0.0.Final-overlay.zip&quot;&gt;https://downloads.jboss.org/apiman/1.0.0.Final/apiman-distro-wildfly8-1.0.0.Final-overlay.zip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;WildFly 8.2.0 - &lt;a href=&quot;https://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip&quot;&gt;https://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Git - &lt;a href=&quot;https://git-scm.com&quot;&gt;https://git-scm.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Maven - &lt;a href=&quot;http://maven.apache.org&quot;&gt;https://maven.apache.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apiman.io/&quot;&gt;https://www.apiman.io/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;apiman tutorial videos - &lt;a href=&quot;https://vimeo.com/user34396826&quot;&gt;https://vimeo.com/user34396826&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.softwareag.com/blog/reality_check/index.php/soa-what/what-is-api-management/&quot;&gt;https://www.softwareag.com/blog/reality_check/index.php/soa-what/what-is-api-management/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://keycloak.jboss.org/&quot;&gt;https://keycloak.jboss.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description><category term="introduction" /><category term="overview" /><pubDate>Fri, 09 Jan 2015 09:15:00 +0000</pubDate>
				<link>https://apiman.io/blog/introduction/overview/2015/01/09/impatient-new-user.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/introduction/overview/2015/01/09/impatient-new-user.html</guid>
			</item><item>
				<title>An Impatient New User's Introduction to API Management with JBoss apiman 1.0</title><dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author><description>&lt;p&gt;Software application development models are evolutionary things. New technologies are always being created
and require new approaches. It‚Äôs frequently the case today, that a service oriented architecture (SOA) model
is used and that the end product is a software service that can be used by applications. The explosion in
growth of mobile devices has only accelerated this trend. Every new mobile phone sold is another platform
onto which applications are deployed. These applications are often built from services provided from multiple
sources. The applications often consume these services through their APIs.&lt;/p&gt;

&lt;p&gt;OK, that‚Äôs all interesting, but why does this matter?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Here‚Äôs why:&lt;/p&gt;

&lt;p&gt;If you are providing an API, you‚Äôd probably like to receive payment when it‚Äôs used by an client app. For
example, let‚Äôs say that you‚Äôve spent months creating a new API that provides incredibly accurate and
timely driving directions. You can imagine every mobile phone GPS app making use of your API someday.
That is, however, assuming that you can find a way to enforce a contract on consumers of the API and provide
them with a service level agreement (SLA). Also, you have to find a way to actually track consumers‚Äô use of
the API so that you can actually enforce that SLA. Finally, you have to have the means to update an API
and publish new versions of APIs.&lt;/p&gt;

&lt;p&gt;Likewise, if you are consuming an API, for example, if you want to build the killer app that will use that
cool new mapping API, you have to have the means to find the API, identify the API‚Äôs endpoint, and
register your usage of the API with its provider.&lt;/p&gt;

&lt;p&gt;The approach that is followed to fulfill both API providers‚Äô and consumers‚Äô needs is‚Ä¶API Management.&lt;/p&gt;

&lt;h2 id=&quot;jboss-apiman-10&quot;&gt;JBoss apiman 1.0&lt;/h2&gt;

&lt;p&gt;apiman is JBoss‚Äô open source API Management system. apiman fulfills API providers‚Äô and consumers‚Äô
needs by implementing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;API Manager&lt;/em&gt; - The API Manager provides an easy way for API providers to use a web UI to define API contracts for their APIs, apply these contracts across multiple APIs, and control role-based user access and API versioning. These contracts can govern access to APIs and limits on the rate at which consumers can access APIs. The same UI enables API consumers to easily locate and access APIs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;API Gateway&lt;/em&gt; - The gateway applies the API contract policies of API Management by enforcing at runtime the rules defined in the contracts and tracking the API consumers‚Äô use of the APIs for every request made to the APIs. The way that the API Gateway works is that the consumer of the API accesses the API through a URL that designates the API Gateway as a proxy for the API. If the policies defined to govern access to the API (see a later section in this post for a discussion of apiman polices), the API Gateway then proxies requests to the API‚Äôs backend API implementation.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best way to understand API Management with apiman is to see it in action. In this post, we‚Äôll install
apiman 1.0, configure an API with contracts through the API Manager, and watch the API Gateway control access
to the API and track its use.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;We don‚Äôt need very much to run apiman out of the box. Before we install apiman, you‚Äôll have to have Java (version 1.7 or newer) installed on your system. You‚Äôll also need to git and maven installed to be able to build the example API that we‚Äôll use.&lt;/p&gt;

&lt;p&gt;A note on software versions: In this post we‚Äôll use the latest available version of apiman as of December 2014. As if this writing, version 1.0 of apiman was just released (December 2014). Depending on the versions of software that you use, some screen displays may look a bit different.&lt;/p&gt;

&lt;h2 id=&quot;getting-apiman&quot;&gt;Getting apiman&lt;/h2&gt;

&lt;p&gt;Like all JBoss software, installation of apiman is simple. First, you will need a client app server on which to install and run apiman. We‚Äôll use the open source JBoss WildFly server release 8.2 &lt;a href=&quot;https://www.wildfly.org/&quot;&gt;https://www.wildfly.org/&lt;/a&gt;.  To make things easier, apiman includes a pointer to JBoss WildFly on its download page here: &lt;a href=&quot;https://www.apiman.io/latest/download.html&quot;&gt;https://www.apiman.io/latest/download.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To install WildFly, simply download &lt;a href=&quot;https://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip&quot;&gt;https://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip&lt;/a&gt; and unzip the file into the directory in which you want to run the sever.&lt;/p&gt;

&lt;p&gt;Then, download the apiman 1.0 WildFly overlay zip file inside the directory that was created when you un-zipped the WildFly download. The apiman 1.0 WildFly overlay zip file is available here: &lt;a href=&quot;https://downloads.jboss.org/apiman/1.0.0.Final/apiman-distro-wildfly8-1.0.0.Final-overlay.zip&quot;&gt;https://downloads.jboss.org/apiman/1.0.0.Final/apiman-distro-wildfly8-1.0.0.Final-overlay.zip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The commands that you will execute will look something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir apiman
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;apiman
unzip wildfly-8.2.0.Final.zip
unzip &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; apiman-distro-wildfly8-1.0.0.Final-overlay.zip &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; wildfly-8.2.0.Final&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then, to start the server, execute these commands:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;wildfly-8.2.0.Final
./bin/standalone.sh &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; standalone-apiman.xml&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The server will write logging messages to the screen. When you see some messages that look like this, you‚Äôll know that the server is up and running with apiman installed:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;13:57:03,229 INFO  [org.jboss.as.server] (ServerService Thread Pool -- 29) JBAS018559: Deployed &quot;apiman-ds.xml&quot; (runtime-name : &quot;apiman-ds.xml&quot;)
13:57:03,261 INFO  [org.jboss.as] (Controller Boot Thread) JBAS015961: Http management interface listening on &amp;lt;a href=&quot;http://127.0.0.1:9990/management&quot;&amp;gt;http://127.0.0.1:9990/management&amp;lt;/a&amp;gt;
13:57:03,262 INFO  [org.jboss.as] (Controller Boot Thread) JBAS015951: Admin console listening on &amp;lt;a href=&quot;http://127.0.0.1:9990&quot;&amp;gt;http://127.0.0.1:9990&amp;lt;/a&amp;gt;
13:57:03,262 INFO  [org.jboss.as] (Controller Boot Thread) JBAS015874: WildFly 8.2.0.Final &quot;Tweek&quot; started in 5518ms - Started 754 of 858 services (171 services are lazy, passive or on-demand)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If this were a production server, the first thing that we‚Äôd do is to change the OOTB default admin username and/or password. apiman is configured by default to use JBoss KeyCloak &lt;a href=&quot;https://keycloak.jboss.org/&quot;&gt;https://keycloak.jboss.org/&lt;/a&gt; for password security. Also, the default database used by apiman to store contract and API information is the H2 database. For a production server, you‚Äôd want to reconfigure this to use a production database. Note: apiman includes DDLs for both MySQL and PostgreSQL.&lt;/p&gt;

&lt;p&gt;For the purposes of our demo, we‚Äôll keep things simple and use the default configuration.&lt;/p&gt;

&lt;p&gt;To access apiman‚Äôs API Manager UI, go to: &lt;a href=&quot;http://localhost:8080/apiman-manager&quot;&gt;http://localhost:8080/apiman-manager&lt;/a&gt;, and log in. The admin user account that we‚Äôll use has a username of ‚Äúadmin‚Äù and a password of ‚Äúadmin123!‚Äù&lt;/p&gt;

&lt;p&gt;You should see a screen that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/apiman_1.png&quot; alt=&quot;Dashboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before we start using apiman, let‚Äôs take a look at how apiman defines how APIs and the meta data on which they depend are organized.&lt;/p&gt;

&lt;h2 id=&quot;policies-plans-and-organizations&quot;&gt;Policies, Plans, and Organizations&lt;/h2&gt;

&lt;p&gt;apiman uses a hierarchical data model that consists of these elements: Polices, Plans, and Organizations:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/apiman_2.jpg&quot; alt=&quot;Diagram_1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;policies&quot;&gt;Policies&lt;/h2&gt;

&lt;p&gt;Policies are at the lowest level of the data model, and they are the basis on which the higher level elements of the data model are built. A policy defines an action that is performed by the API Gateway at runtime. Everything defined in the API Manager UI is there to enable apiman to apply policies to requests made to APIs.&lt;/p&gt;

&lt;p&gt;When a request to an API is made, apiman creates a chain of policies to be applied to that request. apiman policy chains define a specific sequence order in which the policies defined in the API Manager UI are applied to API requests.&lt;/p&gt;

&lt;p&gt;The sequence in which incoming API requests have policies applied is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, at the client app level. In apiman, a client app is contracted to use one or more APIs.&lt;/li&gt;
  &lt;li&gt;Second, at the plan level. In apiman, policies are organized into groups called plans. (We‚Äôll discuss plans in the next section of this post.)&lt;/li&gt;
  &lt;li&gt;Third, at the individual API level.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What happens is that when an API request is received by the API Gateway at runtime, the policy chain is applied in the order of client app, plan, and API. If no failures, such as a rate counter being exceeded, occur, the API Gateway sends the request to the API. As we mentioned earlier in this post, the API Gateway acts as a proxy for the API:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/apiman_3-redux.png&quot; alt=&quot;Diagram_2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, when the API Gateway receives a response from the API‚Äôs backend implementation, the policy chain is applied again, but this time in the reverse order. The API policies are applied first, then the plan policies, and finally the client app policies. If no failures occur, then the API response is sent back to the consumer of the API.&lt;/p&gt;

&lt;p&gt;By applying the policy chain twice, both for the originating incoming request and the resulting response, apiman allows policy implementations two opportunities to provide management functionality during the lifecycle. The following diagram illustrates this two-way approach to applying policies:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/apiman_4-redux.png&quot; alt=&quot;Diagram_3&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;plans&quot;&gt;Plans&lt;/h2&gt;

&lt;p&gt;In apiman, a ‚Äúplan‚Äù is a set policies that together define the level of service that apiman provides for API. Plans enable apiman users to define multiple different levels of service for their APIs, based on policies. It‚Äôs common to define different plans for the same API, where the differences depend on configuration options. For example, a group or company may offer both a ‚Äúgold‚Äù and ‚Äúsilver‚Äù plan for the same API. The gold plan may be more expensive than the silver plan, but it may offer a higher level of API requests in a given (and configurable) time period.&lt;/p&gt;

&lt;h2 id=&quot;organizations&quot;&gt;Organizations&lt;/h2&gt;

&lt;p&gt;The ‚Äúorganization‚Äù is at top level of the apiman data model.&lt;/p&gt;

&lt;p&gt;An organization contains and manages all elements used by a company, university, group inside a company, etc. for API management with apiman. All plans, APIs, client apps, and users for a group are defined in an apiman organization. In this way, an organization acts as a container of other elements. Users must be associated with an organization before they can use apiman to create or consume APIs. apiman implements role-based access controls for users. The role assigned to a user defines the actions that a user can perform and the elements that a user can manage.&lt;/p&gt;

&lt;p&gt;Before we can define an API, the policies that govern how it is accessed, the users who will be able to access, and the organizations that will create and consume it, we need an API and a client app to access that API. Luckily, creating the API and deploying it to our WildFly server, and accessing it through a client app are easy.&lt;/p&gt;

&lt;h2 id=&quot;getting-and-building-and-deploying-the-example-api&quot;&gt;Getting and Building and Deploying the Example API&lt;/h2&gt;

&lt;p&gt;The source code for the example API is contained in a git repo (https://git-scm.com) hosted at github (https://github.com/apiman). To download a copy of the example API, navigate to the directory in which you want to build the API and execute this git command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git@github.com:apiman/apiman-quickstarts.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As the source code is downloading, you‚Äôll see output that looks like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone git@github.com:apiman/apiman-quickstarts.git
Initialized empty Git repository in /tmp/tmp/apiman-quickstarts/.git/
remote: Counting objects: 104, done.
remote: Total 104 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (104/104), 18.16 KiB, done.
Resolving deltas: 100% (40/40), done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And, after the download is complete, you‚Äôll see a populated directory tree that looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;‚îî‚îÄ‚îÄ apiman-quickstarts
  ‚îú‚îÄ‚îÄ echo-api
  ‚îÇ  ‚îú‚îÄ‚îÄ pom.xml
  ‚îÇ  ‚îú‚îÄ‚îÄ README.md
  ‚îÇ  ‚îî‚îÄ‚îÄ src
  ‚îÇ    ‚îî‚îÄ‚îÄ main
  ‚îÇ    ‚îú‚îÄ‚îÄ java
  ‚îÇ    ‚îÇ  ‚îî‚îÄ‚îÄ io
  ‚îÇ    ‚îÇ    ‚îî‚îÄ‚îÄ apiman
  ‚îÇ    ‚îÇ    ‚îî‚îÄ‚îÄ quickstarts
  ‚îÇ    ‚îÇ    ‚îî‚îÄ‚îÄ echo
  ‚îÇ    ‚îÇ    ‚îú‚îÄ‚îÄ EchoResponse.java
  ‚îÇ    ‚îÇ    ‚îî‚îÄ‚îÄ EchoServlet.java
  ‚îÇ    ‚îî‚îÄ‚îÄ webapp
  ‚îÇ    ‚îî‚îÄ‚îÄ WEB-INF
  ‚îÇ    ‚îú‚îÄ‚îÄ jboss-web.xml
  ‚îÇ    ‚îî‚îÄ‚îÄ web.xml
  ‚îú‚îÄ‚îÄ LICENSE
  ‚îú‚îÄ‚îÄ pom.xml
  ‚îú‚îÄ‚îÄ README.md
  ‚îú‚îÄ‚îÄ release.sh
  ‚îî‚îÄ‚îÄ src
   ‚îî‚îÄ‚îÄ main
   ‚îî‚îÄ‚îÄ assembly
   ‚îî‚îÄ‚îÄ dist.xml&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As we mentioned earlier in the post, the example API is very simple. The only action that the API performs is to echo back in responses the meta data in the REST (https://en.wikipedia.org/wiki/Representational_state_transfer) requests that it receives.&lt;/p&gt;

&lt;p&gt;Maven is used to build the API. To build the API into a deployable .war file, navigate to the directory into which you downloaded the API example:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cd apiman-quickstarts/echo-api
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And then execute this maven command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mvn package
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As the API is being built into a .war file, you‚Äôll see output that looks like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[INFO] Scanning for projects...
[INFO]
[INFO] Using the builder org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder with a thread count of 1
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building apiman-quickstarts-echo-api 1.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ apiman-quickstarts-echo-api ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /jboss/local/redhat_git/apiman-quickstarts/echo-api/src/main/resources
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ apiman-quickstarts-echo-api ---
[INFO] Compiling 2 source files to /jboss/local/redhat_git/apiman-quickstarts/echo-api/target/classes
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ apiman-quickstarts-echo-api ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /jboss/local/redhat_git/apiman-quickstarts/echo-api/src/test/resources
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ apiman-quickstarts-echo-api ---
[INFO] No sources to compile
[INFO]
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ apiman-quickstarts-echo-api ---
[INFO] No tests to run.
[INFO]
[INFO] --- maven-war-plugin:2.2:war (default-war) @ apiman-quickstarts-echo-api ---
[INFO] Packaging webapp
[INFO] Assembling webapp in [/jboss/local/redhat_git/apiman-quickstarts/echo-api/target/apiman-quickstarts-echo-api-1.0.1-SNAPSHOT]
[INFO] Processing war project
[INFO] Copying webapp resources [/jboss/local/redhat_git/apiman-quickstarts/echo-api/src/main/webapp]
[INFO] Webapp assembled in [23 msecs]
[INFO] Building war: /jboss/local/redhat_git/apiman-quickstarts/echo-api/target/apiman-quickstarts-echo-api-1.0.1-SNAPSHOT.war
[INFO] WEB-INF/web.xml already added, skipping
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1.184 s
[INFO] Finished at: 2014-12-26T16:11:19-05:00
[INFO] Final Memory: 14M/295M
[INFO] ------------------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you look closely, near the end of the output, you‚Äôll see the location of the .war file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/jboss/local/redhat_git/apiman-quickstarts/echo-api/target/apiman-quickstarts-echo-api-1.0.1-SNAPSHOT.war
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To deploy the API, we can copy the .war file to our WildFly server‚Äôs ‚Äúdeployments‚Äù directory. After you copy the API‚Äôs .war file to the deployments directory, you‚Äôll see output like this generated by the WildFly server:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;16:54:44,313 INFO  [org.jboss.as.server.deployment] (MSC service thread 1-7) JBAS015876: Starting deployment of &quot;apiman-quickstarts-echo-api-1.0.1-SNAPSHOT.war&quot; (runtime-name: &quot;apiman-quickstarts-echo-api-1.0.1-SNAPSHOT.war&quot;)
16:54:44,397 INFO  [org.wildfly.extension.undertow] (MSC service thread 1-16) JBAS017534: Registered web context: /apiman-echo
16:54:44,455 INFO  [org.jboss.as.server] (DeploymentScanner-threads - 1) JBAS018559: Deployed &quot;apiman-quickstarts-echo-api-1.0.1-SNAPSHOT.war&quot; (runtime-name : &quot;apiman-quickstarts-echo-api-1.0.1-SNAPSHOT.war&quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Make special note of this line of output:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;16:54:44,397 INFO  [org.wildfly.extension.undertow] (MSC service thread 1-16) JBAS017534: Registered web context: /apiman-echo&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This output indicates that the URL of the deployed example API is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[a href=&quot;http://localhost:8080/apiman-echo&quot; style=&quot;text-decoration: none;&quot;]https://localhost:8080/apiman-echo&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Remember, however, that this is the URL of the deployed example API if we access it directly. We‚Äôll refer to this as the ‚Äúunmanaged API‚Äù as we are able to connect to the API directly, without going through the API Gateway.  The URL to access the API through the API Gateway (‚Äúthe managed API‚Äù) at runtime will be different.&lt;/p&gt;

&lt;p&gt;Now that our example API is installed, it‚Äôs time to install and configure our client app to access the server.&lt;/p&gt;

&lt;h2 id=&quot;accessing-the-example-api-through-a-client-app&quot;&gt;Accessing the Example API Through a Client App&lt;/h2&gt;

&lt;p&gt;There are a lot of options available when it comes to what we can use for a client app to access our API. We‚Äôll keep the client app simple so that we can keep our focus on apiman and simply install a REST client into the FireFox browser. The REST Client FireFox add-on (https://restclient.net/) is available here: https://addons.mozilla.org/en-US/firefox/addon/restclient/versions/2.0.3&lt;/p&gt;

&lt;p&gt;After you install the client into FireFox, you can access the deployed API using the URL that we just defined. If you execute a GET command, you‚Äôll see output that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-4.png&quot; alt=&quot;Screenshot 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that our example API is built, deployed and running, it‚Äôs time to create the organizations for the API provider and the API consumer. The differences between the requirements of the two organizations will be evident in their apiman configuration properties.&lt;/p&gt;

&lt;h2 id=&quot;creating-users-for-the-api-provider-and-consumer&quot;&gt;Creating Users for the API Provider and Consumer&lt;/h2&gt;

&lt;p&gt;Before we create the organizations, we have to create a user for each organization. We‚Äôll start by creating the API provider user. To do this, logout from the admin account in the API Manager UI. The login dialog will then be displayed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-5.png&quot; alt=&quot;Screenshot 5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select the ‚ÄúNew user‚Äù Option and register the API provider user:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-6.png&quot; alt=&quot;Screenshot 6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, logout and repeat the process to register a new client app developer user too:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-7.png&quot; alt=&quot;Screenshot 7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that the new users are registered we can create the organizations.&lt;/p&gt;

&lt;h2 id=&quot;creating-the-api-producer-organization&quot;&gt;Creating the API Producer Organization&lt;/h2&gt;

&lt;p&gt;To create the API producer organization, log back into the API Manager UI as the servprov user and select ‚ÄúCreate a new Organization‚Äù:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/apiman_2.png&quot; alt=&quot;dash-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select a name and description for the organization, and press ‚ÄúCreate Organization‚Äù:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-15.png&quot; alt=&quot;Screenshot 15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, here‚Äôs our organization:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-16.png&quot; alt=&quot;Screenshot 16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that in a production environment, users would request membership in an organization. The approval process for accepting new members into an organization would follow the organization‚Äôs workflow, but this would be handled outside of the API Manager. For the purposes of our demonstration, we‚Äôll keep things simple.&lt;/p&gt;

&lt;h2 id=&quot;configuring-the-api-its-policies-and-plans&quot;&gt;Configuring the API, its Policies, and Plans&lt;/h2&gt;

&lt;p&gt;To configure the API, we‚Äôll first create a plan to contain the policies that we want applied by the API Gateway at runtime when requests to the API are made. To create a new plan, select the ‚ÄúPlans‚Äù tab. We‚Äôll create a ‚Äúgold‚Äù plan:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-17.png&quot; alt=&quot;Screenshot 17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the plan is created, we will add policies to it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-18.png&quot; alt=&quot;Screenshot 18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;apiman provides several OOTB policies. Since we want to be able to demonstrate a policy being applied, we‚Äôll select a Rate Limiting Policy, and set its limit to a very low level. If our API receives more than 10 requests in a day, the policy should block all subsequent requests. So much for a ‚Äúgold‚Äù level of service!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-19.png&quot; alt=&quot;Screenshot 19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After we create the policy and add it to the plan, we have to lock the plan:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-21.png&quot; alt=&quot;Screenshot 21&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, here is the finished, and locked plan:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-22.png&quot; alt=&quot;Screenshot 22&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point, additional plans can be defined for the API. We‚Äôll also create a ‚Äúsilver‚Äù plan, that will offer a lower level of service (i.e., a request rate limit lower than 10 per day) than the gold plan. Since the process to create this silver plan is identical to that of the gold plan, we‚Äôll skip the screenshots.&lt;/p&gt;

&lt;p&gt;Now that the two plans are complete and locked, it‚Äôs time to define the API.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-23.png&quot; alt=&quot;Screenshot 23&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We‚Äôll give the API an appropriate name, so that providers and consumers alike will be able to run a query in the API Manager to find it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-24.png&quot; alt=&quot;Screenshot 24&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the API is defined, we have to define its implementation. In the context of the API Manager, the API Endpoint is the API‚Äôs direct URL. Remember that the API Gateway will act as a proxy for the API, so it must know the API‚Äôs actual URL. In the case of our example API, the URL is:  &lt;a href=&quot;http://localhost:8080/apiman-echo&quot;&gt;http://localhost:8080/apiman-echo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-25.png&quot; alt=&quot;Screenshot 25&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The plans tab shows which plans are available to be applied to the API:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-26.png&quot; alt=&quot;Screenshot 26&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let‚Äôs make our API more secure by adding an authentication policy that will require users to login before they can access the API. Select the Policies tab, and then define a simple authentication policy. Remember the user name and password that you define here as we‚Äôll need them later on when send requests to the API.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-27.png&quot; alt=&quot;Screenshot 27&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the authentication policy is added, we can publish the API to the API Gateway:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-28.png&quot; alt=&quot;Screenshot 28&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, here it is, the published API:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-29.png&quot; alt=&quot;Screenshot 29&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OK, that finishes the definition of the API provider organization and the publication of the API.&lt;/p&gt;

&lt;p&gt;Next, we‚Äôll switch over to the API consumer side and create the API consumer organization and register a client app to connect to the managed API through the proxy of the API Gateway.&lt;/p&gt;

&lt;h2 id=&quot;the-api-consumer-organization&quot;&gt;The API Consumer Organization&lt;/h2&gt;

&lt;p&gt;We‚Äôll repeat the process that we used to create the client app development organization. Log in to the API Manager UI as the ‚Äúappdev‚Äù user and create the organization:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-30.png&quot; alt=&quot;Screenshot 30&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unlike the process we used when we created the elements used by the API provider, the first step that we‚Äôll take is to create a new client app and then search for the API to be used by the client app:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-31.png&quot; alt=&quot;Screenshot 31&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Searching for the API is easy, as we were careful to set the API name to something memorable:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-32.png&quot; alt=&quot;Screenshot 32&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select the API name, and then specify the plan to be used. We‚Äôll splurge and use the gold plan:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-33.png&quot; alt=&quot;Screenshot 33&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, select ‚Äúcreate contract‚Äù for the plan:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-34.png&quot; alt=&quot;Screenshot 34&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, agree to the contract terms (which seem to be written in a strange form of Latin in the apiman 1.0 release):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-35.png&quot; alt=&quot;Screenshot 35&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The last step is to register the client app with the API Gateway so that the gateway can act as a proxy for the API:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-36.png&quot; alt=&quot;Screenshot 36&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! All the steps necessary to provide and consume the API are complete!&lt;/p&gt;

&lt;p&gt;There‚Äôs just one more step that we have to take in order for client apps to be able access the API through the API Gateway.&lt;/p&gt;

&lt;p&gt;Remember the URL that we used to access the unmanaged API directly? Well, forget it. In order to access the managed API through the API Gateway acting as a proxy for other API we have to obtain the managed API‚Äôs URL. In the API Manager UI, head on over to the ‚ÄúAPIs‚Äù tab for the client app, click on the the ‚Äò&amp;gt;‚Äô character to the left of the API name. This will expose the API Key and the API‚Äôs HTTP endpoint in the API Gateway:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-37.png&quot; alt=&quot;Screenshot 37&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In order to be able access the API through the API Gateway, we have to provide the API Key with each request. The API Key can be provided either through an HTTP Header (X-API-Key) or a URL query parameter. Luckily, the API Manager UI does the latter for us. Select the icon to the right of the HTTP Endpoint and this dialog is displayed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-38.png&quot; alt=&quot;Screenshot 38&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Copy the URL into the clipboard. We‚Äôll need to enter this into the client app in a bit. The combined API Key and HTTP endpoint should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:8080/apiman-gateway/ACMEServices/echo/1.0?apikey=c374c202-d4b3-4442-b9e4-c6654f406e3d&quot;&gt;http://localhost:8080/apiman-gateway/ACMEServices/echo/1.0?apikey=c374c202-d4b3-4442-b9e4-c6654f406e3d&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;accessing-the-managed-api-through-the-apiman-api-gateway-watching-the-policies-at-runtime&quot;&gt;Accessing the Managed API Through the apiman API Gateway, Watching the Policies at Runtime&lt;/h2&gt;

&lt;p&gt;Thanks for hanging in there! The set up is done. Now, we can fire up the client app and watch the policies in action as they are applied at runtime by the API Gateway, for example:&lt;/p&gt;

&lt;p&gt;Open the client app, and enter the URL for the managed API &lt;a href=&quot;http://localhost:8080/apiman-gateway/ACMEServices/echo/1.0?apikey=c374c202-d4b3-4442-b9e4-c6654f406e3d&quot;&gt;http://localhost:8080/apiman-gateway/ACMEServices/echo/1.0?apikey=c374c202-d4b3-4442-b9e4-c6654f406e3d&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What happens first is that the authentication policy is applied and a login dialog is then displayed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-41.png&quot; alt=&quot;Screenshot 41&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enter the username and password (user1/password) that we defined when we created the authentication policy to access the API. The fact that you are seeing this dialog confirms that you are accessing the managed API and are not accessing the API directly.&lt;/p&gt;

&lt;p&gt;When you send a GET request to the API, you should see a successful response:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-40.png&quot; alt=&quot;Screenshot 40&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So far so good. Now, send 10 more requests and you will see a response that looks like this as the gold plan rate limit is exceeded:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://www.apiman.io/blog/images/2015-01-09/Screenshot-39.png&quot; alt=&quot;Screenshot 39&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And there it is. Your gold plan has been exceeded. Maybe next time you‚Äôll spend a little more and get the platinum plan!  ;-)&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-up&lt;/h2&gt;

&lt;p&gt;Let‚Äôs recap what we just accomplished in this demo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We installed apiman 1.0 onto a WildFly server instance.&lt;/li&gt;
  &lt;li&gt;We used git to download and maven to build a sample REST client.&lt;/li&gt;
  &lt;li&gt;As an API provider, we created an organization, defined policies based on API use limit rates and user authentication, and a plan, and assigned them to an API.&lt;/li&gt;
  &lt;li&gt;As an API consumer, we searched for and found that API, and assigned it to a client app.&lt;/li&gt;
  &lt;li&gt;As a client app, we accessed the API and observed how the API Gateway managed the API.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, if you note, in the process of doing all this, the only code that we had to write or build was for the client app. We were able to fully configure the API, policies, plans, and the client app in the API Manager UI.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What‚Äôs Next?&lt;/h2&gt;

&lt;p&gt;In this post, we‚Äôve only scratched the surface of API Management with apiman. To learn more about apiman, you can explore its website here: https://www.apiman.io/&lt;/p&gt;

&lt;p&gt;Join the project mailing list here: &lt;a href=&quot;https://lists.jboss.org/mailman/listinfo/apiman-user&quot;&gt;https://lists.jboss.org/mailman/listinfo/apiman-user&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And, better still, get involved! Contribute bug reports or feature requests. Write about your own experiences with apiman. Download the apiman source code, take a look around, and contribute your own additions. apiman 1.0 was just released, there‚Äôs no better time to join in and contribute!&lt;/p&gt;

&lt;h2 id=&quot;downloads-used-in-this-article&quot;&gt;Downloads Used in this Article&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;REST Client &lt;a href=&quot;https://restclient.net/&quot;&gt;https://restclient.net/&lt;/a&gt; FireFox Add-On - &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/restclient/&quot;&gt;https://addons.mozilla.org/en-US/firefox/addon/restclient/versions/2.0.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Echo API source code - &lt;a href=&quot;https://github.com/apiman/apiman-quickstarts&quot;&gt;https://github.com/apiman/apiman-quickstarts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;apiman 1.0 - &lt;a href=&quot;https://downloads.jboss.org/apiman/1.0.0.Final/apiman-distro-wildfly8-1.0.0.Final-overlay.zip&quot;&gt;https://downloads.jboss.org/apiman/1.0.0.Final/apiman-distro-wildfly8-1.0.0.Final-overlay.zip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;WildFly 8.2.0 - &lt;a href=&quot;https://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip&quot;&gt;https://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Git - &lt;a href=&quot;https://git-scm.com&quot;&gt;https://git-scm.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Maven - &lt;a href=&quot;https://maven.apache.org&quot;&gt;https://maven.apache.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.apiman.io/&quot;&gt;https://www.apiman.io/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;apiman tutorial videos - &lt;a href=&quot;https://vimeo.com/user34396826&quot;&gt;https://vimeo.com/user34396826&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.softwareag.com/blog/reality_check/index.php/soa-what/what-is-api-management/&quot;&gt;https://www.softwareag.com/blog/reality_check/index.php/soa-what/what-is-api-management/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://keycloak.jboss.org/&quot;&gt;https://keycloak.jboss.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description><category term="introduction" /><category term="overview" /><pubDate>Fri, 09 Jan 2015 09:15:00 +0000</pubDate>
				<link>https://apiman.io/blog/introduction/overview/2015/01/09/impatient-new-user-redux.html</link>
				<guid isPermaLink="true">https://apiman.io/blog/introduction/overview/2015/01/09/impatient-new-user-redux.html</guid>
			</item><lastBuildDate>Mon, 20 Dec 2021 09:01:15 -0500</lastBuildDate>
	</channel>
</rss>
