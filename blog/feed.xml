<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
	<channel>
		<title></title>
		<description>The apiman project brings an open source development methodology to API Management, coupling a rich API design &amp; configuration layer with a blazingly fast runtime.  This is the official apiman blog, where we discuss....whatever we&#39;re thinking about!
</description>
		<link>http://apiman.io</link>
		<atom:link href="http://apiman.io/feed.xml" rel="self" type="application/rss+xml" />
		
		
			<item>
				<title>Version 1.3.1.Final of apiman is released!</title>
				
				        <dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author>
				
				<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;m delighted to announce that Apiman 1.3.1.Final is out, with several notable new features and improvements &lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnote_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;3scale-related-functionality&quot;&gt;3scale-related functionality&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can now use the Apiman Gateway with the 3scale Manager/UI as an alternative to the Apiman Manager/UI! &lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnote_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using an overlay file you can augment your 3scale APIs with apiman policies.&lt;br&gt;
There will hopefully be an opportunity for a more cohesive and deeper integration with 3scale in the near future.&lt;br&gt;
Your feedback and demand will drive this; I hope as many people try it out this functionality as possible!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The new 3scale registry and plugin can perform all of the usual 3scale functions, such as auth, reporting, metrics, and rate-limiting; with the addition breadth of apiman&amp;#8217;s policies and pluggable functionality.&lt;br&gt;
The one exception is that 3scale OAuth is currently not implemented (apiman&amp;#8217;s OAuth plugins work as normal).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ll be providing some additional blogposts over the coming days to demonstrate the new features in a more digestible form, but the documentation is available already.&lt;br&gt;
Just &lt;a href=&quot;http://www.apiman.io/latest/download.html#headless&quot;&gt;download the &lt;em&gt;3scale &amp;amp; Headless&lt;/em&gt; Vert.x distro&lt;/a&gt; and follow the instructions:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://apiman.gitbooks.io/apiman-installation-guide/installation-guide/registries-and-components/3scale_immutable.html&quot;&gt;3scale quickstart configuration&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://apiman.gitbooks.io/apiman-installation-guide/installation-guide/vertx/download.html#_3scale_immutable&quot;&gt;3scale Immutable Registry &amp;amp; Components&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Expect some tooling soon to make generating JSON configurations for headless and 3scale registries easier!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;bug-fixes-improvements&quot;&gt;Bug-fixes &amp;amp; Improvements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A good number of bugs were squashed in this release.&lt;br&gt;
Please try it out and let us know if your issues persist (if you had any!).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The HTTP codes returned in error cases have been improved, including connection issues (e.g. DNS, timeouts, etc).&lt;br&gt;
You should no longer get HTTP 500 for these, and the error messages should be more meaningful.&lt;br&gt;
Let us know if there still seem to be issues in this area.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There were a few issues with TLS on the Vert.x gateway that have been improved (e.g. devmode was not working properly).&lt;br&gt;
In the near future we&amp;#8217;ll look to provide some sort of self-signed certificate generation so that TLS can be configured OOTB.&lt;br&gt;
As an added bonus, if you provide ALPN Boot, then HTTP/2 should just work &lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_3&quot; class=&quot;footnote&quot; href=&quot;#_footnote_3&quot; title=&quot;View footnote.&quot;&gt;3&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The release notes for this release can be found here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://issues.jboss.org/secure/ReleaseNote.jspa?projectId=12314121&amp;amp;version=12334619&quot;&gt;Release notes for 1.3.1.Final&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;you-can-help&quot;&gt;You can help!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please try the new functionality and let us know how you find it.&lt;br&gt;
Your demand and feedback is extremely important to the future direction of this project.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;next&quot;&gt;Next&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Expect another release very soon with more functionality, configurability and tooling.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some users have reported issues with the new GitBook documentation, so I&amp;#8217;ll be looking to improve this.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt; The more eagle-eyed amongst you will no doubt have noticed that most of this was actually released a few days ago.
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt; You will need 3scale SaaS or on-prem for this to work.
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_3&quot;&gt;
&lt;a href=&quot;#_footnoteref_3&quot;&gt;3&lt;/a&gt; More in a blog soon.
&lt;/div&gt;
&lt;/div&gt;</description>
				
					<category term="apiman" />
				
					<category term="release" />
				
				<pubDate>Thu, 29 Jun 2017 17:00:00 -0400</pubDate>
				<link>http://apiman.io/blog/apiman/release/2017/06/29/release-1.3.1.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/apiman/release/2017/06/29/release-1.3.1.html</guid>
			</item>
		
		
			<item>
				<title>Version 1.3.0.Final of apiman is released!</title>
				
				        <dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author>
				
				<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Last week we released apiman &lt;em&gt;1.3.0.Final&lt;/em&gt;. It&amp;#8217;s been &lt;em&gt;rather&lt;/em&gt; a long while coming, but hopefully you&amp;#8217;ll be pleased with the improvements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This release has some important new features, a substantial number of bug-fixes, and marks the official release of the Apiman Vert.x Gateway.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Importantly, this release has a lot of background work which has prepared the  the ground for the upcoming initial community integration with 3scale, as outlined in previous blogs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;where-can-i-find-more-information&quot;&gt;Where can I find more information?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The release notes for this release can be found here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://red.ht/2q31DBP&quot;&gt;Release notes for 1.3.0.Final&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And of course, all of the standard sources of information have been updated:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://www.apiman.io/&quot;&gt;The apiman project site&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://apiman.gitbooks.io/apiman-user-guide/&quot;&gt;Latest User Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://apiman.gitbooks.io/apiman-installation-guide/&quot;&gt;Latest Installation Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;highlights&quot;&gt;Highlights&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Just want to know about the good stuff? Let&amp;#8217;s have a brief look at some of the more important changes in this version.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;bug-smashing-galore&quot;&gt;Bug smashing galore&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A substantial number of bugs have been resolved &lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnote_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/span&gt;. If there was something &lt;em&gt;bugging&lt;/em&gt; you, then it&amp;#8217;s worth trying out 1.3.0.Final to see whether your issue has been fixed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Otherwise, please do consider filing an issue!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;vert-x-comes-to-the-fore&quot;&gt;Vert.x comes to the fore&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Vert.x Apiman Gateway has finally left the &lt;em&gt;tech preview&lt;/em&gt; stable and been reworked and polished to the point that it has been officially released. It is now the recommended platform for those who need high performance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For those that aren&amp;#8217;t familiar with Vert.x, it&amp;#8217;s an asynchronous, reactive toolkit that provides a high throughput and low latency; it&amp;#8217;s a perfect match for the apiman gateway.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Please &lt;a href=&quot;https://apiman.gitbooks.io/apiman-installation-guide/installation-guide/vertx/download.html&quot;&gt;try it out&lt;/a&gt; and &lt;a href=&quot;https://lists.jboss.org/mailman/listinfo/apiman-user&quot;&gt;let us know what you think&lt;/a&gt;! We hope you&amp;#8217;ll be impressed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Out of the box there are Elasticsearch and &lt;a href=&quot;#headless-registry&quot;&gt;Headless&lt;/a&gt; configuration examples. It also uses an asynchronous log4j2 configuration which should provide excellent performance &lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnote_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s a really quick way to try it out.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Download and run the &lt;a href=&quot;https://apiman.gitbooks.io/apiman-installation-guide/installation-guide/servlet/install.html#_installing_in_wildfly_10&quot;&gt;WildFly 10 quickstart&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Download and run the &lt;a href=&quot;https://apiman.gitbooks.io/apiman-installation-guide/installation-guide/vertx/download.html&quot;&gt;Vert.x Gateway distro&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add your new gateway through the &lt;a href=&quot;https://apiman.gitbooks.io/apiman-installation-guide/installation-guide/vertx/install.html&quot;&gt;Apiman UI&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Start publishing stuff! 🎉&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
This is a gateway only implementation. It is paired with any Servlet-based Apiman Manager. Just add it through the &lt;a href=&quot;https://apiman.gitbooks.io/apiman-installation-guide/installation-guide/vertx/install.html&quot;&gt;Apiman UI&lt;/a&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;headless-registry&quot;&gt;Headless registry&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://youtu.be/5rAOyh7YmEc?t=12s&quot;&gt;Feeling headless?&lt;/a&gt; &lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_3&quot; class=&quot;footnote&quot; href=&quot;#_footnote_3&quot; title=&quot;View footnote.&quot;&gt;3&lt;/a&gt;]&lt;/span&gt;. We&amp;#8217;ve introduced an &lt;em&gt;immutable headless registry&lt;/em&gt; that loads gateway configuration as JSON from a local or remote location (file, http or https).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It even &lt;a href=&quot;https://apiman.gitbooks.io/apiman-installation-guide/installation-guide/registries-and-components/headless.html#_required_parameters&quot;&gt;supports authentication&lt;/a&gt;, if you need to secure that configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the moment it&amp;#8217;s probably for more advanced users, as some JSON-wrangling is required, but it&amp;#8217;s a really powerful feature that will suit many people&amp;#8217;s immutable architectures. Some of users don&amp;#8217;t actually need the apiman UI or Manager; as there is no human interaction aspects to their workflow (e.g. B2B scenarios, monitoring, managed through other systems, etc).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To find out more:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Look at the &lt;a href=&quot;https://apiman.gitbooks.io/apiman-installation-guide/installation-guide/registries-and-components/headless.html&quot;&gt;Headless Registry documentation&lt;/a&gt;, which contains extensive explanation of how to build your JSON.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Then try out the Headless ES  &lt;a href=&quot;https://apiman.gitbooks.io/apiman-installation-guide/installation-guide/vertx/download.html#_elasticsearch&quot;&gt;configuration&lt;/a&gt; that ships with &lt;a href=&quot;http://www.apiman.io/latest/download.html#vertx&quot;&gt;the distro&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;new-documentation&quot;&gt;New documentation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Given the new additions, documentation has been reworked (excluding developer guide) and is now using GitBook. We welcome your critique on whether this is an improvement versus the older documentation and you can still figure out what you need.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://apiman.gitbooks.io/apiman-installation-guide/&quot;&gt;Apiman Installation Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://apiman.gitbooks.io/apiman-user-guide/&quot;&gt;Apiman User Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://apiman.gitbooks.io/apiman-deployment-guide/&quot;&gt;Apiman Deployment Guide&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;thank-you&quot;&gt;Thank you!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s lots more &lt;em&gt;good stuff&lt;/em&gt; to come and with much greater regularity, so stay tuned (releases, blogs, plugins, etc).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Thanks to the community members who have made contributions to this release via code, filing bugs, and even some in-person meetings.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Finally, it&amp;#8217;s my pleasure to be doing my first release announcement for apiman, having stepped up to tech lead for the apiman gateway.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt; As usual, we probably forgot to create tickets for all of the bugs, so include &quot;misc bugs splattered&quot;
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt; Usual caveats with logging apply.
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_3&quot;&gt;
&lt;a href=&quot;#_footnoteref_3&quot;&gt;3&lt;/a&gt; Sorry.
&lt;/div&gt;
&lt;/div&gt;</description>
				
					<category term="apiman" />
				
					<category term="release" />
				
				<pubDate>Thu, 25 May 2017 16:00:00 -0400</pubDate>
				<link>http://apiman.io/blog/apiman/release/2017/05/25/release-1.3.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/apiman/release/2017/05/25/release-1.3.html</guid>
			</item>
		
		
			<item>
				<title>Performance tuning the Apiman Gateway (WildFly, EAP, Tomcat)</title>
				
				        <dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author>
				
				<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this blog, we&amp;#8217;ll outline a few simple tweaks you can make to improve the performance of the Apiman Gateway when running on servlet platforms (WildFly, EAP, Tomcat, etc).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most of the focus will be on WildFly and EAP, but others will be more broadly applicable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Naturally, these are very rough pointers and should merely be hints for areas that could prove fruitful. There&amp;#8217;s no one-size-fits all approach to tuning, so always profile and keep tweaking to find the best settings for your workloads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;increase-maximum-allowed-connections&quot;&gt;Increase maximum allowed connections&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At the time of publishing (1.3.0.Final), the OkHttpClient max connections setting can be increased by setting the &lt;code&gt;http.maxConnections&lt;/code&gt; system property &lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnote_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/span&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;-Dhttp.maxConnections=100&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This should increase the number of connections that can be handled between apiman and the backend API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;wildfly-eap&quot;&gt;WildFly/EAP&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can also increase the WildFly/EAP connection limit. In your &lt;code&gt;standalone.xml&lt;/code&gt;, look for the Undertow subsystem, and add a &lt;code&gt;request-limit&lt;/code&gt; to the &lt;code&gt;filters&lt;/code&gt; section.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;request-limit&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;limit-connections&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;max-concurrent-requests&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;15000&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;attribute-name&quot;&gt;queue-size&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are some config examples:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wildfly/wildfly/blob/10.x/undertow/src/test/resources/org/wildfly/extension/undertow/undertow-3.1.xml#L110&quot;&gt;WildFly 10&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wildfly/wildfly/blob/9.x/undertow/src/test/resources/org/wildfly/extension/undertow/undertow-2.0.xml#L104&quot;&gt;WildFly 9&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/wildfly/wildfly/blob/8.x/undertow/src/test/resources/org/wildfly/extension/undertow/undertow-1.2.xml#L101&quot;&gt;WildFly 8&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This should improve the number of connections that can be handled between the client (caller) and the apiman gateway.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;tomcat&quot;&gt;Tomcat&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For Tomcat, the equivalent options appear to be &lt;code&gt;maxConnections&lt;/code&gt; and &lt;code&gt;maxThreads&lt;/code&gt;. &lt;a href=&quot;https://tomcat.apache.org/tomcat-9.0-doc/config/http.html#Standard_Implementation&quot;&gt;Refer to the documentation for more&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;some-community-contributed-io-tweaks&quot;&gt;Some community-contributed IO tweaks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Community member Harry Trinta &lt;a href=&quot;https://lists.jboss.org/pipermail/apiman-user/2017-January/000758.html&quot;&gt;shared some tweaks to IO settings&lt;/a&gt; he found useful for WildFly 10 when running Apiman at high load.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;re seeing broken pipe errors or dropped connections, it may be worth tweaking these parameters.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-usual-jvm-and-os-tweaks&quot;&gt;The usual JVM and OS tweaks&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is an entire speciality in of itself and out of scope for t his brief blog, but it&amp;#8217;s worth mentioning in passing. You should run some profiling on your workloads to see whether various JVM tweaks could improve your performance.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In your list of things to try should be heap size, garbage collector and collector settings &lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnote_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/span&gt;. It is also likely worth evaluating your system as a whole; do you have other processes on the system which may be &lt;a href=&quot;https://github.com/giltene/jHiccup&quot;&gt;causing hiccups&lt;/a&gt;; do you have enough file handles available; have you tweaked your protocol settings?&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;use-the-vert-x-gateway-implementation&quot;&gt;Use the Vert.x gateway implementation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To get superior performance, consider using the &lt;a href=&quot;https://apiman.gitbooks.io/apiman-installation-guide/content/installation-guide/vertx/download.html&quot;&gt;Vert.x gateway distribution&lt;/a&gt;. Vert.x is an async platform, optimised for high-throughput scenarios and is ideally suited to the apiman gateway.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt; This option is valid as of OkHttpClient 2.4.0, and is changed in later versions. We will endeavour to provide backwards compatibility when apiman upgrades.
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt; Anyone want to try Shenandoah GC :-)?
&lt;/div&gt;
&lt;/div&gt;</description>
				
					<category term="apiman" />
				
					<category term="gateway" />
				
					<category term="performance" />
				
				<pubDate>Mon, 15 May 2017 16:00:00 -0400</pubDate>
				<link>http://apiman.io/blog/apiman/gateway/performance/2017/05/15/tuning-servlet-gateway.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/apiman/gateway/performance/2017/05/15/tuning-servlet-gateway.html</guid>
			</item>
		
		
			<item>
				<title>3scale and apiman - Part Deux</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				
				<description>&lt;p&gt;It’s been almost two months since Red Hat announced it was acquiring 3scale Technologies and turning 
the 3scale API Management solution into a Red Hat supported product.  In that time, we’ve been trying 
to figure out some stuff for the apiman community.  Here some of the things we wanted to suss out:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How the apiman development team can best focus its efforts, now that 3scale will be the basis for Red Hat’s API Management technology.&lt;/li&gt;
  &lt;li&gt;How to best support the existing apiman community going forward, given the restrictions on continued development of the apiman API Management solution.&lt;/li&gt;
  &lt;li&gt;How can existing apiman users transition to a Red Hat supported API Management solution.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It doesn’t sound like much, but it actually really is.  We’ve made some preliminary decisions, and 
because we want to be as transparent and upfront as possible, read on to find out what they are!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I know everyone in the apiman community probably has a lot of questions, so let’s dive right in (with 
the most important questions first).  Please note that none of this is written in stone - software 
development in general, and this situation in particular, is often very fluid.  I’m saying we reserve 
the right to change our minds!  But this post represents the best information we have right now - and 
we like to keep the apiman community in the loop as much as possible.&lt;/p&gt;

&lt;p&gt;Of course, if you have questions that aren’t covered by this post (very likely!) you can always find 
us on IRC or send questions to the mailing list.  Links to both can be found up above in the “Get 
Involved” menu.&lt;/p&gt;

&lt;h2 id=&quot;what-will-happen-to-the-current-apiman-api-management-solution&quot;&gt;What will happen to the current apiman API Management solution?&lt;/h2&gt;
&lt;p&gt;We discussed a number of options, but we think it’s best for everyone if we put the full apiman API 
Management solution into maintenance mode.  What does this mean?  Well, it means that we will address 
critical bugs and any issues that are trivial to implement/fix.  Of course, we will continue to accept 
community contributions, making sure that they meaningfully improve the overall solution.  This will 
allow anyone using a current version of apiman to continue using it, without worrying about the 
community edition disappearing.  However, it DOES mean that you should not expect significant new 
features to be added (unless they are contributed by the larger apiman community).&lt;/p&gt;

&lt;p&gt;It should be noted that apiman continues to be extremely extensible - so there’s nothing stopping 
individual users from implementing their own core apiman components and/or custom policies.  While 
we would prefer it if custom components and policies developed by users were contributed back to 
the project, we understand that it’s often either not appropriate or not possible.&lt;/p&gt;

&lt;p&gt;We explored the idea of donating the apiman project to a popular open source software foundation 
(e.g. apache or eclipse) but decided that it was premature.  The idea hasn’t been ruled out for 
the future, but for now we’re going to keep apiman right where it is.&lt;/p&gt;

&lt;h2 id=&quot;what-is-the-migration-path-from-apiman-to-red-hats-3scale-based-api-management-product&quot;&gt;What is the migration path from apiman to Red Hat’s 3scale-based API Management product?&lt;/h2&gt;
&lt;p&gt;Obviously not all of our users were specifically looking for a Red Hat supported version.  It’s 
certainly the case that many are perfectly happy using the community edition.  That said, many of 
you may be wondering what the migration path will be from the apiman community edition to Red Hat’s 
API Management solution.&lt;/p&gt;

&lt;p&gt;There are actually several aspects to this problem, and we won’t be able to solve them all.  Ultimately 
the answer is that there won’t be any sort of automatic migration from an apiman configuration to a 3scale 
one.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;However&lt;/em&gt;, we will be updating apiman’s API Gateway to work with the 3scale solution (acting as an optional 
replacement for e.g. the 3scale NGINX-based gateway) while also supporting all existing apiman policies.&lt;br /&gt;
Effectively, this will result in an API Gateway that will implement the 3scale gateway functionality &lt;em&gt;and&lt;/em&gt; 
the apiman gateway functionality (including custom policies!) in one neat package.  For those of you in 
the community who have invested time and effort into creating your own custom policies, this will allow 
you to continue using them!  Not only that, but you will continue to have access to all of the policies 
that exist today in apiman (along with any new ones we might release in the future).&lt;/p&gt;

&lt;p&gt;Additionally, we will be releasing a standalone community version of this new API Gateway - a version that 
can be configured and can operate without any additional components (3scale or otherwise).  At the same 
time, we will have a version that works in conjunction with the current 3scale platform (again, as an 
alternative to the 3scale NGINX- based gateway).&lt;/p&gt;

&lt;h2 id=&quot;will-the-apiman-team-be-working-on-the-3scale-api-management-product&quot;&gt;Will the apiman team be working on the 3scale API Management product?&lt;/h2&gt;
&lt;p&gt;Other than creating and maintaining the already mentioned Java-based API Gateway, the apiman team will not 
be contributing significantly to the 3scale API Management product/platform at this time.  There are a 
number of reasons for this, but the primary issue is that apiman and 3scale have chosen very different 
languages and technologies as the basis for our respective solutions.  We don’t have any experience/expertise 
in the technologies that make up the 3scale platform, and vice versa.&lt;/p&gt;

&lt;p&gt;Fortunately, 3scale already has a superb team of engineers, testers, and designers.  I’m quite certain that 
the future of Red Hat’s API Management technology is very bright!&lt;/p&gt;

&lt;h2 id=&quot;so-what-cool-new-projects-will-the-apiman-team-be-working-on&quot;&gt;So what cool new projects will the apiman team be working on?&lt;/h2&gt;
&lt;p&gt;Well we’ve already mentioned the new (repurposed?) API Gateway that will go a long way to bring together the 
3scale and apiman technologies.  In addition to that, we have a few new things in the pipeline.&lt;/p&gt;

&lt;p&gt;One additional API Management related mini-project that we’ve already put together is a standalone Rate 
Limiting [Micro-]Service.  The goal of “apiman-rls” is to create a specially designed server that can manage 
large numbers of rate limits in an efficient and accurate way.  A new github repository has already been 
created and we’ve already got a prototype implementation, which you can find here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apiman/apiman-rls&quot;&gt;https://github.com/apiman/apiman-rls&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Additionally, we’re exploring a number of other new projects, although it’s too early to talk about them
yet (no final decisions have been made).  Keep your eye on this space for future announcements!&lt;/p&gt;

&lt;h2 id=&quot;conclusionfinal-thoughts&quot;&gt;Conclusion/Final Thoughts&lt;/h2&gt;
&lt;p&gt;As always, thanks for reading this blog post.  And of course, thank you to the entire apiman community 
for your interest, support AND for being awesome!  Of course we would have preferred to see the apiman 
project continue to be Red Hat’s commercial API Management solution.  That wasn’t in the cards, but I 
know that we and the newly acquired 3scale team will do their damndest to push out the best API Management 
solution possible!&lt;/p&gt;

&lt;p&gt;Finally, here are some takeaways from this post, just to reinforce them.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Apiman is staying right where it is, but will be put into “maintenance” mode - we’ll only be working on critical bugs and easy-to-implement issues.&lt;/li&gt;
  &lt;li&gt;We’ll be releasing a new version of the API Gateway that works with the 3scale technology, but ALSO functions in a standalone community mode.&lt;/li&gt;
  &lt;li&gt;All existing apiman policies will be ported to the new API Gateway.&lt;/li&gt;
  &lt;li&gt;Custom apiman policies will be trivial to modify such that they work in the new API Gateway.&lt;/li&gt;
  &lt;li&gt;New apiman branded project:  Rate Limiting [Micro-]Service (apiman-rls)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;our-contributors&quot;&gt;Our contributors&lt;/h2&gt;

&lt;h3 id=&quot;core-team&quot;&gt;Core team:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Eric Wittmann &lt;a href=&quot;https://github.com/EricWittmann&quot;&gt;https://github.com/EricWittmann&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Marc Savy &lt;a href=&quot;https://github.com/msavy&quot;&gt;https://github.com/msavy&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Rachel Yordán &lt;a href=&quot;https://github.com/kahboom&quot;&gt;https://github.com/kahboom&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;thank-you-to-our-community-contributors-in-commit-order&quot;&gt;Thank you to our community contributors, in commit order:&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Gary Brown &lt;a href=&quot;https://github.com/objectiser&quot;&gt;https://github.com/objectiser&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Brett Meyer &lt;a href=&quot;https://github.com/brmeyer&quot;&gt;https://github.com/brmeyer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Rubén Romero Montes &lt;a href=&quot;https://github.com/ruromero&quot;&gt;https://github.com/ruromero&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Kurt Stam &lt;a href=&quot;https://github.com/kurtstam&quot;&gt;https://github.com/kurtstam&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Jorge Morales Pou &lt;a href=&quot;https://github.com/jorgemoralespou&quot;&gt;https://github.com/jorgemoralespou&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Jakub Cechacek &lt;a href=&quot;https://github.com/jcechace&quot;&gt;https://github.com/jcechace&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Brandon Gaisford &lt;a href=&quot;https://github.com/bgaisford&quot;&gt;https://github.com/bgaisford&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;eprogramming&lt;/li&gt;
  &lt;li&gt;Alexandre Kieling &lt;a href=&quot;https://github.com/alexkieling&quot;&gt;https://github.com/alexkieling&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Kevin Horvatin &lt;a href=&quot;https://github.com/KevinHorvatin&quot;&gt;https://github.com/KevinHorvatin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ton Swieb &lt;a href=&quot;https://github.com/tonswieb&quot;&gt;https://github.com/tonswieb&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Charles Moulliard &lt;a href=&quot;https://github.com/cmoulliard&quot;&gt;https://github.com/cmoulliard&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Boris Korogvich &lt;a href=&quot;https://github.com/VEINHORN&quot;&gt;https://github.com/VEINHORN&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Pete Cornish &lt;a href=&quot;https://github.com/outofcoffee&quot;&gt;https://github.com/outofcoffee&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Andrea Rizzini&lt;/li&gt;
  &lt;li&gt;Wojciech Trocki &lt;a href=&quot;https://github.com/wtrocki/&quot;&gt;https://github.com/wtrocki/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Santiago&lt;/li&gt;
  &lt;li&gt;Nick Cross &lt;a href=&quot;https://github.com/ncross&quot;&gt;https://github.com/ncross&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Bram Vonk &lt;a href=&quot;https://github.com/bramvonk&quot;&gt;https://github.com/bramvonk&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Ayman Abdelghany&lt;/li&gt;
  &lt;li&gt;Paul Semprini &lt;a href=&quot;https://github.com/Semprini&quot;&gt;https://github.com/Semprini&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Bennet Schulz &lt;a href=&quot;https://github.com/bennetelli&quot;&gt;https://github.com/bennetelli&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;/post&lt;/p&gt;
</description>
				
					<category term="apiman" />
				
					<category term="3scale" />
				
				<pubDate>Fri, 19 Aug 2016 07:00:00 -0400</pubDate>
				<link>http://apiman.io/blog/apiman/3scale/2016/08/19/3scale-apiman-part2.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/apiman/3scale/2016/08/19/3scale-apiman-part2.html</guid>
			</item>
		
		
			<item>
				<title>Red Hat, 3scale, and apiman?</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				
				<description>&lt;p&gt;As some of you have undoubtedly already heard, Red Hat
&lt;a href=&quot;https://www.redhat.com/en/about/press-releases/red-hat-acquire-api-management-leader-3scale&quot;&gt;recently announced&lt;/a&gt;
the acquisition of &lt;a href=&quot;https://www.3scale.net/&quot;&gt;3scale&lt;/a&gt;, a commercial vendor of API Management software.&lt;/p&gt;

&lt;p&gt;Because the apiman project is sponsored primarily by &lt;a href=&quot;https://www.redhat.com/&quot;&gt;Red Hat&lt;/a&gt;, you
may be wondering how this impacts the project and its open source community.  In today’s blog post,
I’ll do my best to answer that question as honestly and transparently as I can.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;summary-tldr&quot;&gt;Summary (TL;DR)&lt;/h2&gt;
&lt;p&gt;On June 22, 2016 Red Hat announced that it was acquiring 3scale, a SaaS vendor of API Management technology
and, obviously, a competitor of the apiman project.  3scale is a mature company with a very robust API Management
solution.  Over the next few weeks/months, Red Hat will be working to merge the 3scale and apiman technologies
to provide as excellent an API Management solution to its customers as possible.  It has not yet been decided
exactly how this will happen, so for now the apiman project will continue to progress as normal, although perhaps 
with a short term focus on bug fixes and smaller incremental improvements rather than larger feature work.&lt;/p&gt;

&lt;p&gt;Read on for more detailed information!&lt;/p&gt;

&lt;h2 id=&quot;is-the-apiman-project-over&quot;&gt;Is the apiman project over?&lt;/h2&gt;
&lt;p&gt;Short answer:  &lt;em&gt;We’re not dead yet!&lt;/em&gt;  We’re not even &lt;a href=&quot;http://www.urbandictionary.com/define.php?term=pining%20for%20the%20fjords&quot;&gt;pining for the fjords&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;That said, I’m sorry to say that I don’t know exactly what the future will bring.  Red Hat will be working
hard over the next days/weeks/months to accomplish the following goals:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Welcome the 3scale team to Red Hat, educating (indoctrinating?) them into our Open Source culture&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Fully&lt;/em&gt; Open Source the 3scale codebase&lt;/li&gt;
  &lt;li&gt;Sensibly merge the apiman project’s efforts with the technology built by 3scale&lt;/li&gt;
  &lt;li&gt;Deliver a merged offering both in the upstream community (perhaps even here) and as a Red Hat supported product&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’re certainly committed to this wonderful community of API Management enthusiasts (and also those of you who
grudgingly accept its benefits), so you’re &lt;em&gt;most certainly&lt;/em&gt; not going to see us disappearing anytime soon!&lt;/p&gt;

&lt;h2 id=&quot;will-the-3scale-technology-become-open-source&quot;&gt;Will the 3scale technology become open source?&lt;/h2&gt;
&lt;p&gt;Absolutely.  This is the Red Hat Way - all product offerings are developed in the upstream open source 
community before they become supported products.  API Management will of course be no different.  The timing
of this effort is still unclear, and it will depend on a number of factors.  It is, however, inevitable.  (insert
maniacal laughter here)&lt;/p&gt;

&lt;h2 id=&quot;but-3scale-isnt-on-premise&quot;&gt;But 3scale isn’t on-premise!&lt;/h2&gt;
&lt;p&gt;Yes that’s true - the 3scale technology has a few components that are exclusively available in the cloud, 
due to the SaaS nature of their offering.  It may even be a strong reason why you are working with or evaluating
apiman, because our technology is entirely on-premise.  I can understand this to be a valid concern.  What I
can say is that part of the merge of apiman with 3scale &lt;em&gt;will&lt;/em&gt; result in an on-premise version of the 
technology.  Red Hat is aware that this is an absolute requirement for many of its customers, and it will
definitely happen as soon as possible.&lt;/p&gt;

&lt;h2 id=&quot;were-planning-on-going-to-production-with-apiman-what-should-we-do&quot;&gt;We’re planning on going to production with apiman, what should we do?&lt;/h2&gt;
&lt;p&gt;Well obviously I cannot tell you what to do!  This is, unfortunately, an issue that I do not currently know
how to resolve.  As mentioned above, the project is not going away, but its future has certainly changed and
will be reshaped over the course of the next few weeks.  Because those decisions have not yet been made,
and will not be made for a little bit of time yet, I cannot offer any specific advice.&lt;/p&gt;

&lt;h2 id=&quot;we-have-custom-apiman-plugins-will-they-work-in-the-future&quot;&gt;We have custom apiman plugins, will they work in the future?&lt;/h2&gt;
&lt;p&gt;This is another great question, and I could probably just refer you to the answer right above this one.
One of the primary tasks ahead of us (apiman and 3scale engineering teams) is to work together to sensibly
merge the two technologies into a single Open Source API Management project.  Until we have had a chance to
analyze the two, we won’t know which pieces will remain and which will not.  Certainly it is the case that
apiman’s extensibility is one of our strongest features, and we will need to make sure that the merged 
technology remains equivalently flexible.  But at this point, we won’t know what form that will take, and 
so I cannot say for certain whether any/all existing apiman plugins will make sense in the future.&lt;/p&gt;

&lt;h2 id=&quot;thank-you-to-our-users&quot;&gt;Thank you to our users!&lt;/h2&gt;
&lt;p&gt;Thanks for reading!  We have a great community here in apiman, which something I am very thankful for.  I
hope that the influx of technology, expertise, and manpower that comes along with Red Hat’s acquisition
of 3scale will only strengthen our Open Ssource API Management community.  Please stick with us and know
that your feedback (positive or negative) is important!  Always tell us what you think, don’t pull any
punches, and keep being awesome!&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description>
				
					<category term="apiman" />
				
					<category term="3scale" />
				
				<pubDate>Wed, 22 Jun 2016 21:30:00 -0400</pubDate>
				<link>http://apiman.io/blog/apiman/3scale/2016/06/22/redhat-3scale-apiman.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/apiman/3scale/2016/06/22/redhat-3scale-apiman.html</guid>
			</item>
		
		
			<item>
				<title>Version 1.2.4.Final of apiman is released!</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				
				<description>&lt;p&gt;Greetings, earthlings!  On Friday of last week we released the &lt;em&gt;absolute best&lt;/em&gt; version 
of apiman ever!  This release has a fair number of bugs fixed, as well as a few new
things.  Read on for the details!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;where-can-i-find-more-information&quot;&gt;Where can I find more information?&lt;/h2&gt;
&lt;p&gt;The release notes for this release can be found here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://red.ht/23NVU1k&quot;&gt;Release notes for 1.2.4.Final&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And of course, all of the standard sources of information have been updated:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.apiman.io/&quot;&gt;The apiman project site&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.apiman.io/latest/user-guide.html&quot;&gt;Latest User Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;just-give-me-the-highlights&quot;&gt;Just give me the highlights!&lt;/h2&gt;
&lt;p&gt;Mouse clicky finger too tired?  No worries, read on for some of the highlights
(not the children’s magazine, but still pretty cool):&lt;/p&gt;

&lt;h3 id=&quot;deletes-finally&quot;&gt;Deletes… Finally!&lt;/h3&gt;
&lt;p&gt;A really annoying thing about apiman, ever since version 1.0, has been the
inability to delete anything.  Well now you can!  The following can now be
deleted:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Organizations&lt;/li&gt;
  &lt;li&gt;Plans&lt;/li&gt;
  &lt;li&gt;Client Apps&lt;/li&gt;
  &lt;li&gt;APIs&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that there are some conditions that must be met, different for each type
of thing, before a delete will be successful.  For example, you can only 
delete an API if it has no (0) published versions.&lt;/p&gt;

&lt;h3 id=&quot;decent-logging-in-the-gateway&quot;&gt;Decent Logging in the Gateway&lt;/h3&gt;
&lt;p&gt;We’re not done with this yet, but we finally have decent logging support in the
Gateway.  In fact, if you’re creating a custom policy, you should access the 
logger by getting it from the policy conext.  Something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;IApimanLogger logger = context.getLogger(getClass());
logger.info(&quot;An INFO message here!&quot;);
logger.debug(&quot;A DEBUG message here!&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the best way to do logging in apiman.  You probably want to stay away
from standard output or a custom logger implementation within your policy.&lt;/p&gt;

&lt;h3 id=&quot;circuit-breaker-policy&quot;&gt;Circuit Breaker Policy&lt;/h3&gt;
&lt;p&gt;Apiman now comes with a new Circuit Breaker policy (available as a plugin).
If you’re not familiar with the circuit breaker pattern, I recommend you go
here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://martinfowler.com/bliki/CircuitBreaker.html&quot;&gt;Martin Fowler: Circuit Breaker Pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;plugin-classloader-improvements&quot;&gt;Plugin ClassLoader Improvements&lt;/h3&gt;
&lt;p&gt;A number of community members have been building their own custom plugins, and
they’ve run into some issues with how classes and resources are loaded.  In
this latest version of apiman we have made a few changes (and fixed a few bugs)
that should make writing a custom policy much easier.  In particular, the 
plugin classloader was not properly loading resources from library dependencies.
This meant that, for example, any third party library you used that tried to
load a service via a Java &lt;em&gt;ServiceLoader&lt;/em&gt; would fail (because the service 
loader’s configuration file would not be found).&lt;/p&gt;

&lt;p&gt;Additionally, we’re now setting the plugin’s classloader as the current thread’s
context classloader.  This means that, again, any of those calls to ServiceLoader
will be searching for resources in the correct classloader.&lt;/p&gt;

&lt;h2 id=&quot;ok-thanks-im-out&quot;&gt;OK thanks, I’m out!&lt;/h2&gt;
&lt;p&gt;Thanks for reading - see you later.&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description>
				
					<category term="apiman" />
				
					<category term="release" />
				
				<pubDate>Sun, 24 Apr 2016 21:45:00 -0400</pubDate>
				<link>http://apiman.io/blog/apiman/release/2016/04/24/release-1.2.4.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/apiman/release/2016/04/24/release-1.2.4.html</guid>
			</item>
		
		
			<item>
				<title>Covering Your Assets: Data Encryption in API Management</title>
				
				        <dc:creator>Rachel Yordán</dc:creator>
				        <author>ryordan@redhat.com</author>
				
				<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In a world where APIs are quickly becoming the standard, most of us understand the importance of following best practices for API security. We authenticate, authorize and throttle requests. We encrypt the data that we share with other applications (hopefully!). But we often neglect one of the most essential components of the API layer: data storage.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot; class=&quot;title&quot;&gt;&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#encrypting-data-as-a-component-of-api-management-security&quot;&gt;Encrypting Data as a Component of API Management Security&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#data-storage-in-apiman&quot;&gt;Data Storage in apiman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#idataencrypter-interface-and-data-encryption-classes&quot;&gt;IDataEncrypter Interface and Data Encryption Classes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#setting-the-gateway-to-use-a-custom-encrypted-secret-key&quot;&gt;Setting the Gateway to use a Custom Encrypted Secret Key&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#writing-your-own-encryption-plugin&quot;&gt;Writing Your Own Encryption Plugin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#key-takeaways&quot;&gt;Key Takeaways&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;encrypting-data-as-a-component-of-api-management-security&quot;&gt;Encrypting Data as a Component of API Management Security&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We often forget that APIs are not meant to protect data, rather, to share data across applications. While providers are certainly responsible for designing their APIs to be secure, we must be equally cautious about &lt;em&gt;each&lt;/em&gt; component of the API layer.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;data-storage-in-apiman&quot;&gt;Data Storage in apiman&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Designing, building, and maintaining an API can be a lot of work, often making security an afterthought. Using an API management platform can save you valuable time, allowing you to focus on other critical aspects of your business.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Apiman was designed with the goal of providing a secure, customizable platform for API providers that is easy to use. As an open source platform, it is highly extendable and maintained by a community of developers with the common goal of streamlining API management without compromising security.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;All sensitive data stored by apiman is fully encrypted&lt;/strong&gt; so that it is not stored in plain text, then later decrypted again on runtime or when publishing services. By default, the API Manager uses a relational database for storage. One of the many examples of data that gets stored are the credentials that must be provided when the manager wants to publish an API and makes an authenticated REST call to the gateway.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Data for the API gateway and API manager are stored separately to keep components fully decoupled. For a more detailed overview, please see our &lt;a href=&quot;http://www.apiman.io/latest/production-guide.html#_architecture_summary&quot;&gt;API layer architecture&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s swan dive into some code!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;idataencrypter-interface-and-data-encryption-classes&quot;&gt;IDataEncrypter Interface and Data Encryption Classes&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The component interface used by apiman to encrypt data (both in the API Manager and in the API Gateway) is called &lt;code&gt;IDataEncrypter&lt;/code&gt;. This interface provides the structure for the classes that encrypt keys and data, which is done synchronously using AES.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, the &lt;code&gt;DefaultDataEncrypter&lt;/code&gt; class is the encrypter for the gateway. The encrypt and decrypt methods accept a single parameter for the string to be encrypted or decrypted, respectively. If you look at the code, you&amp;#8217;ll notice that the key is hard coded. For those of us that are looking for a more secure approach, we offer an alternative.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;code&gt;AesDataEncrypter&lt;/code&gt; class is a data encrypter that accepts an encrypted secret key. When it is invoked, it expects a configuration object that contains a previously defined encrypted secret key.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this point you may be wondering how secret keys are obtained. A factory class called &lt;code&gt;ConfigFactory&lt;/code&gt; is responsible for creating a configuration Map using information from &lt;code&gt;apiman.properties&lt;/code&gt;. This configuration Map is later passed to &lt;code&gt;AesDataEncrypter&lt;/code&gt; as a parameter when it is constructed. The secret key included in the configuration Map is then used whenever data is encrypted or decrypted.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;setting-the-gateway-to-use-a-custom-encrypted-secret-key&quot;&gt;Setting the Gateway to use a Custom Encrypted Secret Key&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;strong&gt;We highly recommend that users change the default gateway encryption class&lt;/strong&gt; to the more secure &lt;code&gt;AesDataEncrypter&lt;/code&gt; class. To do so, please follow these steps:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;openblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;1. Locate and open the &lt;code&gt;apiman.properties&lt;/code&gt; file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;2. Uncomment the following lines, located toward the top of the file (around line 10), by removing the hashtag at the beginning of each line:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;properties&quot;&gt;apiman.encrypter.type=io.apiman.common.util.crypt.AesDataEncrypter
apiman.encrypter.type.secretKey=&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;3. Add your encrypted secret key (&lt;em&gt;the key must be a 16 character string&lt;/em&gt;).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;4. Save and close the file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;5. $$$ Profit!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;writing-your-own-encryption-plugin&quot;&gt;Writing Your Own Encryption Plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the major benefits of working with an open source API management platform, and open source projects in general, is the ability to read and modify the source code to make it work for your business needs. In apiman, we make it easy for you to write your own implementation of the data encrypter by &lt;a href=&quot;http://www.apiman.io/latest/developer-guide.html#_creating_a_plugin&quot;&gt;creating a plugin that encrypts data&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once your basic plugin is set up, you can then begin working on the Java component of your plugin that contains the functionality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Every encryption plugin must implement the &lt;code&gt;IDataEncrypter&lt;/code&gt; interface like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;SuperDataEncrypter&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;implements&lt;/span&gt; IDataEncrypter {
  &lt;span class=&quot;comment&quot;&gt;/**
  * Constructor.
  */&lt;/span&gt;
  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; SuperDataEncrypter(&lt;span class=&quot;predefined-type&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; config) {
    thing = config.get(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//$NON-NLS-1$&lt;/span&gt;

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (thing == &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;) {
      &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Missing configuration property: apiman-manager.config.thing&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//$NON-NLS-1$&lt;/span&gt;
    }
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, the class is constructed with the configuration Map we discussed above. Once the &lt;code&gt;SuperDataEncrypter&lt;/code&gt; class is built, the configuration Map is checked for a &quot;thing&quot; key. If it is null, a runtime exception is thrown. Pretty, straightforward so far, right?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Whenever data is stored in a persistent store (either by the API Manager or by the API Gateway), the data encrypter is used to encrypt that data. You can pretty much guess what our next step will be:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;SuperDataEncrypter&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;implements&lt;/span&gt; IDataEncrypter {
  &lt;span class=&quot;comment&quot;&gt;/**
  * Constructor.
  */&lt;/span&gt;
  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; SuperDataEncrypter(&lt;span class=&quot;predefined-type&quot;&gt;Map&lt;/span&gt;&amp;lt;&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;&amp;gt; config) {
    thing = config.get(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;thing&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//$NON-NLS-1$&lt;/span&gt;

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (thing == &lt;span class=&quot;predefined-constant&quot;&gt;null&lt;/span&gt;) {
      &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;RuntimeException&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Missing configuration property: apiman-manager.config.thing&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//$NON-NLS-1$&lt;/span&gt;
    }
  }


  &lt;span class=&quot;comment&quot;&gt;/* (non-Javadoc)
   * @see io.apiman.common.util.crypt.IDataEncrypter#encrypt(java.lang.String)
   */&lt;/span&gt;
  &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; encrypt(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; plainText) {
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; AesEncrypter.encrypt(secretKey, plainText);
  }

  &lt;span class=&quot;comment&quot;&gt;/* (non-Javadoc)
   * @see io.apiman.common.util.crypt.IDataEncrypter#decrypt(java.lang.String)
   */&lt;/span&gt;
  &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
  &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; decrypt(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; encryptedText) {
      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; AesEncrypter.decrypt(secretKey, encryptedText);
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;From there, you can use your &lt;code&gt;SuperDataEncrypter&lt;/code&gt; class to write the functionality you need. For an example of an implementation you can take a look at the &lt;code&gt;AesDataEncrypter&lt;/code&gt; class we discussed earlier. You should be up and running in no time!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock note&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-note&quot; title=&quot;Note&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
If you are kind enough to want to share your plugin with the rest of the apiman community, create a pull request on the &lt;a href=&quot;https://github.com/apiman/apiman-plugins&quot;&gt;apiman plugins repository&lt;/a&gt;. Contributors, please don&amp;#8217;t forget to write a unit test for any plugin you write (one that actually passes, kthx!).
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;key-takeaways&quot;&gt;Key Takeaways&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If your memory is as short-lived as mine, it’s probably best that we do a quick recap. In this article we discussed the importance of securing stored data, and why it should be treated as an essential component of your API security strategy. We then discussed how apiman encrypts and decrypts sensitive data, with a detailed review of the IDataEncrypter interface and the classes that implement it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For those of us with a guilty security conscience, we went over how to configure the API gateway to use an encrypted key that you provided in the &lt;code&gt;apiman.properties&lt;/code&gt; file. Because we’re über ambitious, we also took a look at how to write your very own implementation of said &lt;code&gt;IDataEncrypter&lt;/code&gt; interface and the methods you are required to implement.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As always, we &lt;em&gt;love&lt;/em&gt; hearing from you! So, if you have any questions or comments, feel free to leave them below or &lt;a href=&quot;http://www.apiman.io/latest/chat.html&quot;&gt;reach out to us&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
				
					<category term="security" />
				
					<category term="gateway" />
				
				<pubDate>Wed, 13 Apr 2016 12:34:00 -0500</pubDate>
				<link>http://apiman.io/blog/security/gateway/2016/04/13/data-encryption.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/security/gateway/2016/04/13/data-encryption.html</guid>
			</item>
		
		
			<item>
				<title>Using apiman in a network with limited Internet access</title>
				
				        <dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author>
				
				<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In plenty of enterprises, networks are either locked down or have very limited access to the Internet; often for security, privacy or other practical reasons.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ve carefully designed apiman to be fully featured and easily configured when no Internet access is available; providing a great deal of flexibility and eschewing any &quot;off-site only&quot; functionality.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, if you&amp;#8217;re looking for API management in a locked-down network or Internet-free environment, read on!&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&quot;toc&quot; class=&quot;toc&quot;&gt;
&lt;div id=&quot;toctitle&quot; class=&quot;title&quot;&gt;&lt;/div&gt;
&lt;ul class=&quot;sectlevel1&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#apiman-plugins&quot;&gt;Apiman Plugins&lt;/a&gt;
&lt;ul class=&quot;sectlevel2&quot;&gt;
&lt;li&gt;&lt;a href=&quot;#distribution-and-management&quot;&gt;Distribution and Management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#registry-plugin-catalogue&quot;&gt;Registry (Plugin Catalogue)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#api-catalogue&quot;&gt;API Catalogue&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#metrics&quot;&gt;Metrics&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;apiman-plugins&quot;&gt;Apiman Plugins&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Apiman&amp;#8217;s extensibility is one of its key strengths, and it&amp;#8217;s extremely easy to write &lt;a href=&quot;http://www.apiman.io/latest/developer-guide.html#_plugins&quot;&gt;plugins&lt;/a&gt; that can do almost anything. There are two default behaviours we are likely to want to configure when operating within a restricted network.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;distribution-and-management&quot;&gt;Distribution and Management&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Apiman plugins are, by default loaded via &lt;a href=&quot;http://central.sonatype.org/&quot;&gt;The Central Repository&lt;/a&gt; (often known as Maven Central), which is a fantastically convenient in most situations. All of apiman&amp;#8217;s components (manager, gateways, etc), will pull down the necessary plugins as and when they need them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, without Internet access this clearly won&amp;#8217;t work as intended. We have three good options which you can configure in &lt;code&gt;apiman.properties&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;properties&quot;&gt;apiman.plugins.repositories=https://repo1.example.local/our-internal-repo/,http://repository.example.org/nexus/content/groups/public/ &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

apiman.plugins.repositories=file:///mnt/nfs/my/shared/maven/repo &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;

apiman.plugins.repositories= &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Use an internal &lt;a href=&quot;https://maven.apache.org/repository-management.html#Available_Repository_Managers&quot;&gt;repository or mirror&lt;/a&gt; to deploy your own (and community) plugins to. This is likely the best option for many enterprises who may already have such infrastructure. Join multiple repositories with commas.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Mount a repository to a shared volume or filesystem on every machine running apiman.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Copy a valid Maven formatted repository containing your plugins to &lt;code&gt;~/.m2&lt;/code&gt;, where apiman will look by default.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;strong&gt;Advanced:&lt;/strong&gt; You can replace the &lt;a href=&quot;https://github.com/apiman/apiman/blob/master/gateway/engine/core/src/main/java/io/apiman/gateway/engine/impl/DefaultPluginRegistry.java&quot;&gt;default registry&lt;/a&gt; entirely with an implementation of your own and set it via &lt;code&gt;apiman-gateway.plugin-registry&lt;/code&gt; in &lt;code&gt;apiman.properties&lt;/code&gt;.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;registry-plugin-catalogue&quot;&gt;Registry (Plugin Catalogue)&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our community releases contain a plugin registry which downloads a curated list of plugins. This lets the API Manager have a nice pre-populated list of plugins to install, rather than having to type the coordinates manually. To preserve this functionality simply download the registry file and make it available internally:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;properties&quot;&gt;apiman-manager.plugins.registries=http://rawgit.com/apiman/apiman-plugin-registry/master/registry.json &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

apiman-manager.plugins.registries=file:///path/to/my/registry.json &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;The default JSON plugin registry&amp;#8217;s data URL.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;As &amp;lt;1&amp;gt;, but replaced with a local copy. Naturally, you may want to add your own plugins here in place of the curated ones. A custom registry may not even use JSON - it&amp;#8217;s entirely up to you.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
When running in WildFly/EAP you can use appropriate platform system properties to make the config more portable: &lt;code&gt;apiman-manager.plugins.registries=file:///${jboss.server.config.dir}/apiman-plugin-registry.json&lt;/code&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;api-catalogue&quot;&gt;API Catalogue&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The demonstration &lt;a href=&quot;http://www.apiman.io/blog/apiman/1.2.x/manager/catalog/2016/03/23/api-catalog.html&quot;&gt;API Catalogue&lt;/a&gt; (or catalog, if you&amp;#8217;re into American English) is also downloaded from the Internet, so you may want to make it available offline and customise it, too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Albeit not the topic of this blog, it&amp;#8217;s worth briefly mentioning most advanced users will likely want to implement code &lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnote_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/span&gt; to &lt;a href=&quot;https://github.com/apiman/apiman/blob/master/manager/api/core/src/main/java/io/apiman/manager/api/core/IApiCatalog.java&quot;&gt;search a real registry or catalogue&lt;/a&gt; for APIs to import, such as &lt;a href=&quot;https://github.com/fabric8io/fabric8-ipaas/blob/master/apiman/src/main/java/io/fabric8/apiman/KubernetesServiceCatalog.java&quot;&gt;Kubernetes&#39; service registry&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;properties&quot;&gt;apiman-manager.api-catalog.catalog-url=http://rawgit.com/apiman/apiman-api-catalog/master/catalog.json &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

apiman-manager.api-catalog.type=io.apiman.manager.api.core.catalog.JsonApiCatalog &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Default API catalogue. You can replace it with &lt;code&gt;&lt;a href=&quot;file:///path/to/my/catalog.json&quot; class=&quot;bare&quot;&gt;file:///path/to/my/catalog.json&lt;/a&gt;&lt;/code&gt; after downloading it.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;If you write your own catalogue, then provide your own catalogue&amp;#8217;s implementation of the &lt;code&gt;IApiCatalog&lt;/code&gt; interface here.&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;metrics&quot;&gt;Metrics&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Some API managers have off-site only metrics implementations. Rest assured, there&amp;#8217;s &lt;a href=&quot;http://www.apiman.io/blog/api-manager/api/ui/metrics/2015/07/06/metrics-redux.html&quot;&gt;none of that nonsense here&lt;/a&gt;! Just ensure that your metrics store (such as ElasticSearch) is available for apiman to connect to and it&amp;#8217;ll work fine.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A handful of trivial tweaks are potentially necessary to make all of apiman&amp;#8217;s features work in a locked-down environment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt; Or find existing implementations
&lt;/div&gt;
&lt;/div&gt;</description>
				
					<category term="configuration" />
				
					<category term="production" />
				
					<category term="offline" />
				
				<pubDate>Tue, 05 Apr 2016 15:00:00 -0400</pubDate>
				<link>http://apiman.io/blog/configuration/production/offline/2016/04/05/locked-down-network.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/configuration/production/offline/2016/04/05/locked-down-network.html</guid>
			</item>
		
		
			<item>
				<title>Apiman 1.2 - Introduction to User Roles in apiman</title>
				
				        <dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author>
				
				<description>&lt;p&gt;In this post, we’ll examine apiman user roles. In the apiman data model, all data elements exist in the context of the organization. The same holds true for user memberships as users can be members of multiple organizations. Permissions in apiman are role based. The actions that a user is able to perform are dependent on the roles to which the user is assigned when a user is added as a member of an organization.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Let’s start by looking at the roles that are preconfigured in apiman.&lt;/p&gt;

&lt;h3 id=&quot;understanding-ootb-apiman-user-roles&quot;&gt;Understanding OOTB apiman user roles&lt;/h3&gt;

&lt;p&gt;In apiman, each role defines a set of permissions granted by that role. When a user is made a member of an organization, that user must be assigned to a role. A role definition consists of a name and description, and, most importantly, a set of permissions that govern the user’s ability to view, edit, and administer the organization itself, as well as the organization’s plans, APIs, and applications.&lt;/p&gt;

&lt;p&gt;Roles are managed in the Roles section of the apiman System Administration form in the Management UI.&lt;/p&gt;

&lt;p&gt;Apiman is preconfigured with the following roles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Organization Owner&lt;/li&gt;
  &lt;li&gt;API Developer&lt;/li&gt;
  &lt;li&gt;Client App Developer&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These role names are self-explanatory. For example, a user assigned the Application Developer role is able to manage the organization’s applications but is blocked from managing its APIs or plans.&lt;/p&gt;

&lt;p&gt;The full set of permissions provided in apiman by these preconfigured roles are:&lt;/p&gt;

&lt;p&gt;Preconfigured apiman Role: Client App Developer&lt;br /&gt;
Who Should be Assigned this Role: Users responsible for creating and managing client apps
Permissions Granted to this Role: 
- Client App View
- Client App Edit
- Client App Admin&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Preconfigured apiman Role&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Who Should be Assigned this Role&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Permissions Granted to this Role&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Client App Developer&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Users responsible for creating and managing client apps&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Client App View, Client App Edit, Client App Admin&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Organization Owner&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Automatically granted to the user who creates an Organization&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;All permissions = Client App View, Client App Edit, Client App Admin, Plan View, Plan Edit, Plan Admin, API View, API Edit, API Admin, Organization View, Organization Edit, Organization Admin&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;API Developer&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Users responsible for creating and managing APIs&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Plan View, Plan Edit, Plan Admin, API View, API Edit, API Admin&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Organization owners can assign roles to users through the “Manage Members” form in the apiman Management UI. Each user must be assigned at least one role, but users can also be assigned multiple roles.&lt;/p&gt;

&lt;p&gt;We’ll walk through an example of assigning a role to a user in a moment.&lt;/p&gt;

&lt;p&gt;While apiman admin users can also modify the permissions as defined for these preconfigured roles, it can be easier to create new custom roles. We will also walk through an example of creating a new user role later in this post.&lt;/p&gt;

&lt;h3 id=&quot;assigningrevoking-roles-for-organization-users&quot;&gt;Assigning/Revoking Roles for Organization Users&lt;/h3&gt;

&lt;p&gt;It’s worth repeating that all data elements in apiman exist in the context of an organization.  As a result, it is important to understand that users can only manage these elements if they have the appropriate role for the organization in which the elements exist.  Therefore, a user must be granted membership in an organization.&lt;/p&gt;

&lt;p&gt;It’s not possible for users to assign themselves roles. Roles must be assigned to a user by an organization owner. Assigning a role to a user is a straightforward task for an organization owner.&lt;/p&gt;

&lt;p&gt;First, the organization must search for the user:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-03-28/roles_1.png&quot; alt=&quot;Image: Search for User&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And then, the organization owner can assign a role to the user from the existing set of roles:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-03-28/roles_2.png&quot; alt=&quot;Image: Assign Role&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Revoking a role for a user is just as easy. The organization owner simply has to search for the user, and then deselect a role for the user.&lt;/p&gt;

&lt;p&gt;The same approach for assigning/revoking a role for a user is followed for the standard roles that are preconfigured in apiman, and for custom roles that you create.&lt;/p&gt;

&lt;h3 id=&quot;creating-a-new-user-roledefining-the-role-permissions&quot;&gt;Creating a New User Role/Defining the Role Permissions&lt;/h3&gt;

&lt;p&gt;In addition to providing a set of preconfigured roles, apiman also provides a means for apiman admin users to create new roles where you can define a custom set of permissions for each role. Custom roles give you the ability to exercise fine-grained control over the set of permissions granted to users.&lt;/p&gt;

&lt;p&gt;Let’s look at an example of a custom role.&lt;/p&gt;

&lt;p&gt;Imagine a situation where you have API developer users and application developer users. These sets of users can rely on apiman’s preconfigured roles. Let’s also imagine that you have a third set of user. You want these users to have read access to APIs and applications so that they can participate in a review/approval process. However, you do not want to give these users write access. For example, suppose you have to find a job for a certain relative of yours. He may be a thoroughly competent person, but you’d feel better if he didn’t have write access to anything valuable. A read-only role for your brother in law would look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-03-28/roles_3.png&quot; alt=&quot;Image: Define New Role&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the “brother-in-law” role is created, you can assign it to other users in the same manner as any other role:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-03-28/roles_4.png&quot; alt=&quot;Image: View the Roles&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h3&gt;

&lt;p&gt;A consistent pattern in apiman is a rich set of features provided OOTB, and a method for you to expand on these features by creating customizations. User roles enable you to assign users permissions based on the tasks that they perform. Apiman is preconfigured with a rich set of roles OOTB, and also enables you to create new, custom roles to handle additional types of users (even your brother-in-law).&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description>
				
					<category term="apiman" />
				
					<category term="introduction" />
				
					<category term="overview" />
				
					<category term="users" />
				
					<category term="roles" />
				
				<pubDate>Mon, 28 Mar 2016 03:00:00 -0400</pubDate>
				<link>http://apiman.io/blog/apiman/introduction/overview/users/roles/2016/03/28/users_roles.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/apiman/introduction/overview/users/roles/2016/03/28/users_roles.html</guid>
			</item>
		
		
			<item>
				<title>Version 1.2.3.Final of apiman is released!</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				
				<description>&lt;p&gt;Greetings, earthlings!  Yesterday we released the &lt;em&gt;best&lt;/em&gt; version of apiman yet,
and I’m not just saying that because the version number (1.2.3.Final) is awesome.
This release has a bunch of bug fixes in it, as well as a few targeted new 
features.  Read on for more details!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;where-can-i-find-more-information&quot;&gt;Where can I find more information?&lt;/h2&gt;
&lt;p&gt;The release notes for this release can be found here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://red.ht/21HvJDe&quot;&gt;Release notes for 1.2.3.Final&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And of course, all of the standard sources of information have been updated:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.apiman.io/&quot;&gt;The apiman project site&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.apiman.io/latest/user-guide.html&quot;&gt;Latest User Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;just-give-me-the-highlights&quot;&gt;Just give me the highlights!&lt;/h2&gt;
&lt;p&gt;Too busy to click the links above?  I get it.  I’ll give you the top changes in this
release.&lt;/p&gt;

&lt;h3 id=&quot;api-key-moved-from-contract-to-client-app&quot;&gt;API Key moved from Contract to Client App&lt;/h3&gt;
&lt;p&gt;The big change from 1.2.2.Final is that we have moved the API Key from the Contract
(which is the link between a Client App and an API it consumes) to the Client App.&lt;br /&gt;
This change was suggested by a number of community members, and it does make a lot
of sense.  The primary down-side to this change is that you are now limited to one
Contract per Client App per API. Previously if an API was offered through, for example,
a Gold and a Silver plan, you could actually create a Contract to &lt;em&gt;both&lt;/em&gt; of them.
This is no longer possible.&lt;/p&gt;

&lt;p&gt;It is worth noting that this change makes many things easier to do, now and going 
forward.  API Key management is simpler - you just have one key for each Client App
(version) you manage.  It also opens up the opportunity to allow other types of 
API Keys (such as client certificates or Keycloak client IDs) beyond the default 
Java UUID style keys.&lt;/p&gt;

&lt;h3 id=&quot;data-migration-when-upgrading-apiman&quot;&gt;Data migration when upgrading apiman&lt;/h3&gt;
&lt;p&gt;Moving the API Key from the Contract to the Client App changed the apiman internal
data model, which prompted us to implement a data migration feature integrated with
the already-existing data import/export feature.  This means that you can export
data from an older version of apiman, and then import that data into a newer version
of apiman - and apiman will automatically tranform the import data to the latest
data model.&lt;/p&gt;

&lt;h3 id=&quot;initial-metrics-support-for-hawkular-metrics&quot;&gt;Initial metrics support for Hawkular Metrics&lt;/h3&gt;
&lt;p&gt;As you all probably know, apiman supports different implementations of various core
internal components.  One of those components is the Metrics feature, where we 
record metrics information for every request made to the Gateway.  In the default
community edition of apiman we use Elasticsearch to record these metrics.  Version
1.2.3.Final of apiman now includes an initial (tech preview) implementation that
uses &lt;a href=&quot;http://www.hawkular.org/docs/components/metrics/index.html&quot;&gt;Hawkular Metrics&lt;/a&gt; 
instead of Elasticsearch!&lt;/p&gt;

&lt;h3 id=&quot;improvements-to-the-api-catalog-ui&quot;&gt;Improvements to the API Catalog UI&lt;/h3&gt;
&lt;p&gt;A very cool recent feature of apiman is the new 
&lt;a href=&quot;http://www.apiman.io/blog/apiman/1.2.x/manager/catalog/2016/03/23/api-catalog.html&quot;&gt;API Catalog browser UI&lt;/a&gt;.&lt;br /&gt;
The API Catalog feature allows you to quickly filter the list of available APIs from
the catalog by name.  Now in 1.2.3.Final, every entry in the catalog is also tagged
with zero or more tags, and filtering can now be done based on these tags.  The UI
is pretty slick!&lt;/p&gt;

&lt;h3 id=&quot;configurable-aes-data-encrypter-implementation&quot;&gt;Configurable AES data encrypter implementation&lt;/h3&gt;
&lt;p&gt;You may or may not be aware that apiman encrypts any data that might be sensitive prior
to storing it in the data store (manager) or registry (gateway).  There is a java
interface called &lt;a href=&quot;https://github.com/apiman/apiman/blob/apiman-1.2.3.Final/common/util/src/main/java/io/apiman/common/util/crypt/IDataEncrypter.java&quot;&gt;IDataEncrypter&lt;/a&gt; 
that controls this behavior, and you can provide your own implementation via an apiman
plugin if you choose.  Previously that was the only option available to you if you
wanted a more secure implementation (the default implementation uses a well-known/hard-coded
secret key when doing AES encryption on the data, making it not-very-secure).  Now we
offer that same AES encrypter but the secret key can be configured in the &lt;em&gt;apiman.properties&lt;/em&gt;
file.&lt;/p&gt;

&lt;h2 id=&quot;ok-thanks-im-out&quot;&gt;OK thanks, I’m out!&lt;/h2&gt;
&lt;p&gt;Thanks for reading - see you later.&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description>
				
					<category term="apiman" />
				
					<category term="release" />
				
				<pubDate>Thu, 24 Mar 2016 06:00:00 -0400</pubDate>
				<link>http://apiman.io/blog/apiman/release/2016/03/24/release-1.2.3.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/apiman/release/2016/03/24/release-1.2.3.html</guid>
			</item>
		
		
			<item>
				<title>Import APIs Into Apiman (API Catalog)</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				
				<description>&lt;p&gt;One of the less enjoyable aspects of apiman is the manual addition of an API
that you wish to manage.  And if you have a bunch of APIs you want to manage,
you can either use the apiman REST interface to script the creation of them,
or else you’re stuck manually entering them into the UI.&lt;/p&gt;

&lt;p&gt;However, if you take advantage of the new API Catalog feature, things might
get a lot easier!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;why-import-an-api&quot;&gt;Why Import an API?&lt;/h2&gt;
&lt;p&gt;By using the new API Manager to import an API rather than manually creating it
(typically via the “New API” button in the UI) you can more quickly and 
accurately add an API to apiman.  Importing an API from the API Catalog means
that it will be created in apiman pre-configured with the endpoint information
and some other relevant details.  This can obviously save you some time, and 
make the process of managing your APIs a bit more streamlined.&lt;/p&gt;

&lt;h2 id=&quot;browsing-the-api-catalog&quot;&gt;Browsing the API Catalog&lt;/h2&gt;
&lt;p&gt;The long-term goal for importing APIs is to be able to import from multiple 
different sources, including:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Swagger&lt;/li&gt;
  &lt;li&gt;WADL&lt;/li&gt;
  &lt;li&gt;RAML&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, we currently only support importing APIs from an apiman API Catalog.
I’ll talk more about how to configure the API Catalog later in this post.
First, let’s focus on how to use the API Catalog.&lt;/p&gt;

&lt;p&gt;The most user-friendly way to use the API Catalog is to browse it!  This can
easily be done by clicking the “Browse available/importable APIs” link on the
API Manager’s dashboard page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-03-23/dash-catalog.png&quot; alt=&quot;Image: Dashboard - Browse APIs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you click that link, you’ll be taken to the (very nice!) API Catalog
Browser UI page.  Have a look, it’s actually pretty slick:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-03-23/api-catalog.png&quot; alt=&quot;Image: API Catalog Browser&quot; /&gt;&lt;/p&gt;

&lt;p&gt;From this UI, you can filter the APIs available to be imported, find the
one you want, and easily Import it into one of your Organizations.  You can
easily filter by name, type, or tag - the hope is that you can quickly find
the API you want to import.  Once you are ready, simply click the &lt;em&gt;Import&lt;/em&gt;
button on the API card, which will result in the following dialog:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-03-23/import-api.png&quot; alt=&quot;Image: Import API&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After completing the information in the dialog, the API will be imported
and you will be redirected to the newly imported API.&lt;/p&gt;

&lt;h2 id=&quot;importing-multiple-apis&quot;&gt;Importing Multiple APIs&lt;/h2&gt;
&lt;p&gt;Another way to import APIs from the API Catalog is to use the Import API(s)
Wizard interface.  You can access the Import API(s) Wizard by clicking on the
&lt;em&gt;Import API(s)&lt;/em&gt; button from within a particular Organization:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-03-23/import-apis-btn.png&quot; alt=&quot;Image: Import APIs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This wizard will allow you to import multiple APIs into a single Organization.
Follow the wizard’s steps to find the APIs, choose them, configure some
settings, and then import them.  Here are some screenshots, since pictures
are more powerful than words (although the pictures do contain some words):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-03-23/import-api-wizard-1.png&quot; alt=&quot;Image: Import APIs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-03-23/import-api-wizard-2.png&quot; alt=&quot;Image: Import APIs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-03-23/import-api-wizard-3.png&quot; alt=&quot;Image: Import APIs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-03-23/import-api-wizard-4.png&quot; alt=&quot;Image: Import APIs&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, the Import APIs Wizard is a nice way to find and import
multiple APIs all at the same time, all into the same Organization.&lt;/p&gt;

&lt;h2 id=&quot;customizing-the-api-catalog&quot;&gt;Customizing the API Catalog&lt;/h2&gt;
&lt;p&gt;At this point you may be asking yourself how &lt;em&gt;your&lt;/em&gt; APIs might come to be
listed in the API Catalog, rather than Flickr and Facebook.  That’s a great
question, and we actually have two answers to it.  First, you can provide
a simple JSON file that contains all of the APIs in your enterprise (along
with optionally any other external APIs you might want to potentially 
import).  Second, you can actually provide a fully custom implementation of
the apiman &lt;em&gt;IApiCatalog&lt;/em&gt; java interface and contribute it via an apiman
plugin!&lt;/p&gt;

&lt;h3 id=&quot;providing-a-custom-api-catalog-file&quot;&gt;Providing a Custom API Catalog File&lt;/h3&gt;
&lt;p&gt;The easiest way to include your own APIs into the catalog is to provide 
your own custom API Catalog JSON file.  The default API Catalog implementation
simply reads the API information from a JSON file (with a custom format
specific to apiman).  An example of the format of this file can be found
here:&lt;/p&gt;

&lt;p&gt;https://raw.githubusercontent.com/apiman/apiman-api-catalog/master/catalog.json&lt;/p&gt;

&lt;p&gt;Once you create your own file, you will need to make it available to apiman
by configuring it in the &lt;em&gt;apiman.properties&lt;/em&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apiman-manager.api-catalog.type=io.apiman.manager.api.core.catalog.JsonApiCatalog
apiman-manager.api-catalog.catalog-url=http://rawgit.com/apiman/apiman-api-catalog/master/catalog.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simply update the &lt;em&gt;apiman-manager.api-catalog.catalog-url&lt;/em&gt; property to provide
a URL to your custom file.&lt;/p&gt;

&lt;h3 id=&quot;implementing-your-own-api-catalog-plugin&quot;&gt;Implementing Your Own API Catalog Plugin&lt;/h3&gt;
&lt;p&gt;Providing your own JSON file is fine, but it’s very static and doesn’t work
well if you are often introducing new APIs.  Instead, you may want to implement
your own API Catalog implementation and bundle it up into an apiman plugin.
This approach will let you return the list of APIs from dynanmic sources such
as API Registries (e.g. UDDI or perhaps something more platform-specific like
kubernetes).&lt;/p&gt;

&lt;p&gt;To do this, it’s probably best to read up on the existing apiman documentation
about how to create and contribute a plugin:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.apiman.io/latest/developer-guide.html#_creating_a_plugin&quot;&gt;Developer Guide: Creating a Plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.apiman.io/latest/developer-guide.html#_contributing_a_core_component&quot;&gt;Developer Guide: Contributing a Core Component&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The component you will want to customize is &lt;em&gt;IApiCatalog&lt;/em&gt;, which can be found here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apiman/apiman/blob/master/manager/api/core/src/main/java/io/apiman/manager/api/core/IApiCatalog.java&quot;&gt;IApiCatalog Java Interface&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Create an implementation of that interface, bundle it up in your custom plugin,
and then configure apiman to use your implementation by modifying the right 
properties in the &lt;em&gt;apiman.properties&lt;/em&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apiman-manager.api-catalog.type=plugin:GROUP_ID:ARTIFACT_ID:VERSION/org.example.apiman.plugins.catalog.MyCustomApiCatalog
apiman-manager.api-catalog.my-property=value-1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;The API Catalog is a great way to make it easier for your API Providers to quickly
and accurately get APIs added to apiman, without using the apiman REST interface to
do it programmatically.  There is a tremendous opportunity to integrate the API
Catalog with your API registry, if you have one, or to simply provide a JSON file 
with information about all your deployed APIs!&lt;/p&gt;

&lt;p&gt;This feature will be introduced as of version &lt;em&gt;1.2.3.Final&lt;/em&gt;, which should be released
tomorrow!&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description>
				
					<category term="apiman" />
				
					<category term="1.2.x" />
				
					<category term="manager" />
				
					<category term="catalog" />
				
				<pubDate>Wed, 23 Mar 2016 06:30:00 -0400</pubDate>
				<link>http://apiman.io/blog/apiman/1.2.x/manager/catalog/2016/03/23/api-catalog.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/apiman/1.2.x/manager/catalog/2016/03/23/api-catalog.html</guid>
			</item>
		
		
			<item>
				<title>Storing Your Gateway Config in a Database</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				
				<description>&lt;p&gt;One of the strongest features of apiman, in general, is its excellent
extensibility.  Not only is it easy to add new policies, for example,
but many of its core components are also pluggable.  This includes, 
for example, the registry used by the API Gateway to store configuration
information published to it by the manager.  This blog post will detail
a new JDBC based implementation of that registry, explaining how you can
store that information in a Database instead of in Elasticsearch (the
default setting).&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;why-use-a-database-instead-of-elastic&quot;&gt;Why Use a Database Instead of Elastic?&lt;/h2&gt;
&lt;p&gt;You may or may not be wondering why this is important.  Some users may
not be comfortable storing persistent data in Elasticsearch.  Or perhaps
a user doesn’t want to create a production deployment of Elasticsearch 
at all and would prefer alternatives for each of the various Gateway
components that currently uses it.  For these reasons (or others), we
now (as of version 1.2.2.Final) have a JDBC implementation of the 
API Gateway registry!&lt;/p&gt;

&lt;p&gt;Read on to learn how to use it!&lt;/p&gt;

&lt;h2 id=&quot;setting-up-the-database&quot;&gt;Setting Up the Database&lt;/h2&gt;
&lt;p&gt;First it’s important to note that the Gateway registry JDBC implementation
does &lt;em&gt;not&lt;/em&gt; leverage JPA.  Instead we use JDBC directly (with a little 
help from Apache’s dbutils library) to store the data in the database
and query it again.  For this reason, you will absolutely need to create
your database and then configure it using one of the provided DDLs.&lt;/p&gt;

&lt;p&gt;You can find the DDLs included in the apiman distribution in the following
directory:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$WILDFLY_ROOT/apiman/ddls/apiman-gateway*.ddl&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We include DDLs for the following databases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MySQL&lt;/li&gt;
  &lt;li&gt;PostgreSQL&lt;/li&gt;
  &lt;li&gt;Oracle&lt;/li&gt;
  &lt;li&gt;H2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Simply create a new database using tools that are appropriate to the
type you are using (e.g. you can use the MySQL Workbench).  Then execute
the DDL appropriate to your database type, so that all the correct 
tables and indexes are created.&lt;/p&gt;

&lt;h2 id=&quot;configuring-apiman-to-use-it&quot;&gt;Configuring Apiman to Use It&lt;/h2&gt;
&lt;p&gt;Once the database is created, you will need to make some configuration
changes in apiman so that the Gateway will connect to the database and store
information there instead of Elasticsearch.  There are two files that need
to be created/modified to make this happen.&lt;/p&gt;

&lt;h3 id=&quot;creating-a-datasource&quot;&gt;Creating a Datasource&lt;/h3&gt;
&lt;p&gt;First, you will need to create a Datasource using whatever is appropriate
for the platform you are running apiman on.  This will differ, for example,
if you are running apiman on Tomcat rather than Wildfly or EAP.  Here are
some documentation resources that may be helpful when creating a Datasource
for your preferred runtime platform:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.jboss.org/author/display/WFLY10/DataSource+configuration&quot;&gt;Wildfly 10&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tomcat.apache.org/tomcat-8.0-doc/jndi-resources-howto.html#JDBC_Data_Sources&quot;&gt;Apache Tomcat 8&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make sure you download and install the JDBC driver for your database, and
also make sure that you know the JNDI location of the datasource you wish
to use.&lt;/p&gt;

&lt;h3 id=&quot;tweaking-apimanproperties&quot;&gt;Tweaking apiman.properties&lt;/h3&gt;
&lt;p&gt;Finally, you have everything you need to now configure apiman to use the
database.  You simply need to change some properties in &lt;em&gt;apiman.properties&lt;/em&gt; 
and you’ll be good to go!&lt;/p&gt;

&lt;p&gt;Specifically, you need to change the configuration of the Gateway Registry.
The default settings in 1.2.2.Final for the Gateway Registry look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;apiman-gateway.registry=io.apiman.gateway.engine.es.PollCachingESRegistry
apiman-gateway.registry.client.type=jest
apiman-gateway.registry.client.protocol=${apiman.es.protocol}
apiman-gateway.registry.client.host=${apiman.es.host}
apiman-gateway.registry.client.port=${apiman.es.port}
apiman-gateway.registry.client.initialize=true
apiman-gateway.registry.client.username=${apiman.es.username}
apiman-gateway.registry.client.password=${apiman.es.password}
apiman-gateway.registry.client.timeout=${apiman.es.timeout}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All of these properties can be replaced with the following settings:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;apiman-gateway.registry=io.apiman.gateway.engine.jdbc.PollCachingJdbcRegistry
apiman-gateway.registry.datasource.jndi-location=java:jboss/datasources/apiman-gateway&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Please note that the &lt;em&gt;apiman-gateway.registry.datasource.jndi-location&lt;/em&gt; should
be set to whatever value makes sense based on the deployment/configuration of
your actual datasource.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Once you have configured the API Gateway to use a database to store your 
configuration info, apiman will no longer store this type of data in 
Elasticsearch.  This is perhaps one step closer to a world where you do
not need to maintain/manager a production Elasticsearch instance.&lt;/p&gt;

&lt;p&gt;In future posts I will show you how you can swap out other Elasticsearch
components for alternatives (e.g. Rate Limiting, Caching, etc).&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description>
				
					<category term="apiman" />
				
					<category term="1.2.x" />
				
					<category term="gateway" />
				
					<category term="jdbc" />
				
					<category term="registry" />
				
				<pubDate>Wed, 09 Mar 2016 04:30:00 -0500</pubDate>
				<link>http://apiman.io/blog/apiman/1.2.x/gateway/jdbc/registry/2016/03/09/jdbc-registry.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/apiman/1.2.x/gateway/jdbc/registry/2016/03/09/jdbc-registry.html</guid>
			</item>
		
		
			<item>
				<title>Re-Registering Your Client App(s)</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				
				<description>&lt;p&gt;In a recent blog post I explained why APIs used to be completely frozen 
once they were published, and how we have loosened that restriction for
Public APIs.  Similarly, we did not allow Client Apps to be changed and
then re-registered.  This was never a good decision, since the Client App
does not have anything “connected” to it (the way that an API may).  So
we should never have restricted the registration of a Client App!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;when-can-i-re-register&quot;&gt;When Can I Re-Register?&lt;/h2&gt;
&lt;p&gt;A Client App can be re-registered to the Gateway whenever it has been
modified, or if it has been un-registered (is in the &lt;em&gt;Retired&lt;/em&gt; state).&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-re-register&quot;&gt;How Do I Re-Register?&lt;/h2&gt;
&lt;p&gt;When you have made some changes to your Client App, you can re-register
it by clicking the &lt;strong&gt;Re-Register&lt;/strong&gt; button in the UI.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-02-24/re-register.png&quot; alt=&quot;Image: Reregister Button&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As soon as you’re comfortable with the changes you’ve made to your
Client App, simply click the button and you should be all set!&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Again, we should never have restricted when users can update the settings
of a Client App in the gateway.  This change should make it much easier
for Client App Developers to make sensible changes and then push those
changes to the gateway!&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description>
				
					<category term="apiman" />
				
					<category term="1.2.x" />
				
					<category term="gateway" />
				
				<pubDate>Wed, 24 Feb 2016 05:30:00 -0500</pubDate>
				<link>http://apiman.io/blog/apiman/1.2.x/gateway/2016/02/24/reregistering.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/apiman/1.2.x/gateway/2016/02/24/reregistering.html</guid>
			</item>
		
		
			<item>
				<title>Re-Publishing Your API(s)</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				
				<description>&lt;p&gt;An early design decision we made in apiman was to not allow APIs to be
re-published to the Gateway.  The reasoning was that Client Apps may have
established Contracts with the API, and thus have agreed to specific terms
and conditions (whether implicit or explicit).  Therefore, we shouldn’t 
allow the API provider to modify those terms and re-publish the API, as it
may violate the agreement.&lt;/p&gt;

&lt;p&gt;However, we later added the concept of a Public API, which allows any 
client to invoke it without first creating a Contract.  It is clear that
API providers should be able to re-publish a Public API (presumably after
changing the API’s configuration).&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;when-can-i-re-publish&quot;&gt;When Can I Re-Publish?&lt;/h2&gt;
&lt;p&gt;An API can be re-published to the Gateway when the following criteria is
met:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It is a Public API&lt;/li&gt;
  &lt;li&gt;The API is in the &lt;em&gt;Published&lt;/em&gt; state&lt;/li&gt;
  &lt;li&gt;The API has been modified in some way&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Additionally, if the Public API has been retired (is currently in the 
&lt;em&gt;Retired&lt;/em&gt; state) then the user can Re-Publish it regardless of whether
it has since been modified.&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-re-publish&quot;&gt;How Do I Re-Publish?&lt;/h2&gt;
&lt;p&gt;When an API meets the above criteria, a &lt;strong&gt;Re-Publish&lt;/strong&gt; button will be 
available in the user interface (right where the “Publish” button is
typically located).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-02-24/re-publish.png&quot; alt=&quot;Image: Republish Button&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As soon as you’re comfortable with the changes you’ve made to your API, 
simply click the button and you should be all set!&lt;/p&gt;

&lt;h2 id=&quot;why-is-there-still-versioning&quot;&gt;Why Is There Still Versioning?&lt;/h2&gt;
&lt;p&gt;This feature does not take the place of API versioning.  Versioning
is still very important because you may want to publish multiple 
versions of the same API at the same time (for example, if you 
actually need to support multiple versions of a live API).  In 
addition, if an API is not public, then you will still need to 
use versioning if you want to change the policy configuration for
your API.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As always, a goal of apiman is to make the system as easy to use as
possible, while still being useful and powerful.  We think that this
approach is a reasonable compromise.  You still can’t re-publish an
API if there are established Contracts with Client Apps, but if you’re
only using Public APIs, then there’s no reason to prevent changes from
being republished!&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description>
				
					<category term="apiman" />
				
					<category term="1.2.x" />
				
					<category term="gateway" />
				
				<pubDate>Wed, 24 Feb 2016 04:30:00 -0500</pubDate>
				<link>http://apiman.io/blog/apiman/1.2.x/gateway/2016/02/24/republishing.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/apiman/1.2.x/gateway/2016/02/24/republishing.html</guid>
			</item>
		
		
			<item>
				<title>Apiman 1.2 - Improvements to Plugin Management</title>
				
				        <dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author>
				
				<description>&lt;p&gt;Apiman is not only preconfigured with a rich set of policies that you can use, right out of the box, but, from its earliest releases, apiman has also included a mechanism that you can use to define your own custom policies through plugins. This article describes the improvements introduced in apiman release 1.2.x that enable you to better manage your custom policy plugins.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;policies-the-most-important-part-of-api-management&quot;&gt;Policies, the Most Important Part of API Management&lt;/h3&gt;

&lt;p&gt;In API Management, policies are where the action is. It’s through the application of policies that an API Management system such as apiman performs API governance. All the subsystems in apiman, from the Management API UI to the API Gateway, exist for one ultimate goal; to ensure that API governance is achieved by the application of policies to API requests. In apiman, a policy is a rule, or set of rules that controls responses to API requests. There are multiple types of apiman policies. Some policies allow or block access to APIs based on the IP address of the client application, while others allow or restrict access to specific resources provided by an API, while still others enable you to control or “throttle” the rate at which requests made to an API.&lt;/p&gt;

&lt;h3 id=&quot;apiman-plugin-management-improvements---extending-flexibility&quot;&gt;Apiman Plugin Management Improvements - Extending Flexibility&lt;/h3&gt;

&lt;p&gt;Apiman release 1.2.x adds these new features that enable you to better manage your custom policy plugins:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Uninstalling Policies&lt;/li&gt;
  &lt;li&gt;Upgrading Policies&lt;/li&gt;
  &lt;li&gt;Automatically Reloading SNAPSHOT Version Policies&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best way to understand how these features work is to see them in action.&lt;/p&gt;

&lt;h3 id=&quot;uninstalling-a-policy-plugin&quot;&gt;Uninstalling a Policy Plugin&lt;/h3&gt;

&lt;p&gt;Before we can uninstall a policy plugin, we have to install it.&lt;/p&gt;

&lt;p&gt;Apiman is preconfigured with a core set of policy types that can handle many common situations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Authorization - Access to API resources is controlled by user roles&lt;/li&gt;
  &lt;li&gt;BASIC Authentication - A username/password is required to access an API&lt;/li&gt;
  &lt;li&gt;Caching - Cache responses from a backend API&lt;/li&gt;
  &lt;li&gt;Ignored Resources - Paths to API resources that will not be accessible&lt;/li&gt;
  &lt;li&gt;IP Blacklist - Clients with specific IP address(es) will be blocked from accessing an API&lt;/li&gt;
  &lt;li&gt;IP Whitelist - Clients with specific IP address(es) will not be blocked from accessing an API (all IP addresses not listed will be blocked)&lt;/li&gt;
  &lt;li&gt;Limiting - Access to an API is limited by the number of requests in a defined time period (generally used to create a fine-grained limit)&lt;/li&gt;
  &lt;li&gt;Quota - Access to an API is limited by the number of requests in a defined time period (generally used to create a coarse-grained limit)&lt;/li&gt;
  &lt;li&gt;Transfer Quota - Similar to a Quota policy, but based on the number of bytes transferred, not the number of requests&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These core policy types cannot be uninstalled.&lt;/p&gt;

&lt;p&gt;Apiman is also includes second set of policy types which can be optionally installed as plugins:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;CORS - This plugin implements CORS (Cross-origin resource sharing): A method of controlling access to resources outside of an originating domain.&lt;/li&gt;
  &lt;li&gt;HTTP Security - Provides a policy which allows security-related HTTP headers to be set, which can help mitigate a range of common security vulnerabilities.&lt;/li&gt;
  &lt;li&gt;JSONP - A plugin that contributes a policy that turns a standard RESTful endpoint into a JSONP compatible endpoint.&lt;/li&gt;
  &lt;li&gt;Keycloak OAuth - This plugin offers an OAuth2 policy which leverages the Keycloak authentication platform as the identity and access provider.&lt;/li&gt;
  &lt;li&gt;Simple Headers - Offers a simple policy that allows request headers to be added or stripped from the HTTP request (outgoing) or HTTP response (incoming).&lt;/li&gt;
  &lt;li&gt;XML&amp;lt;-&amp;gt;JSON Transformation - This plugin provides a very simple policy which can transform the request and/or response payload between XML and JSON.&lt;/li&gt;
  &lt;li&gt;Log Headers - A policy that logs request and/or response headers to the server console.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The optional plugins are accessed in this administrative page in the apiman Management UI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-02-22/plugin_mgmt_1.png&quot; alt=&quot;Image: Optional Plugins&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To install a policy plugin, click on “Install” - for example, to install the Log Headers Policy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-02-22/plugin_mgmt_2.png&quot; alt=&quot;Image: Log Policy Plugin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, it’s installed!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-02-22/plugin_mgmt_3.png&quot; alt=&quot;Image: Log Policy Plugin Installed&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OK, we installed the policy plugin. Now, let’s uninstall it!&lt;/p&gt;

&lt;p&gt;Uninstalling a policy plugin is as simple as installing it. All you do is select the plugin from the “Manage Plugins” page in the Administrative UI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-02-22/plugin_mgmt_4.png&quot; alt=&quot;Image: Log Policy Plugin Uninstalled &quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are a couple of caveats to keep in mind when you uninstall a policy plugin:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, uninstalling the plugin removes it from the apiman Management UI, but it still remains in use for all APIs in which it was previously configured.&lt;/li&gt;
  &lt;li&gt;Second, if you want to completely remove the plugin from all APIs in which it was previously configured, you must manually click on each API, Plan, and Client App that uses the policy and remove it. Apiman does not include a single “kill” button to automatically remove all references to a policy.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;upgrading-policy-plugins&quot;&gt;Upgrading Policy Plugins&lt;/h3&gt;

&lt;p&gt;In addition to enabling you to create and install your own custom policies, apiman also provides a mechanism to upgrade to new versions of those policies. This is an especially useful feature as, over time, a policy may be upgraded to include bug fixes or new features.&lt;/p&gt;

&lt;p&gt;The best way to illustrate how to upgrade a policy plugin is to follow the process step-by-step.&lt;/p&gt;

&lt;p&gt;For this illustration, we’ll use one of the policy plugins provided in the official apiman plugins git repository ( &lt;a href=&quot;https://github.com/apiman/apiman-plugins&quot;&gt;https://github.com/apiman/apiman-plugins&lt;/a&gt; ) as our custom plugin. Many of the plugins provided in this repository are also available set of “available plugins” packaged with apiman. We’ll use one of the plugins (“test-policy” - it’s a very simple policy that adds a header to the inbound http request) that is not already installed into apiman for this example.&lt;/p&gt;

&lt;p&gt;(Note that in order to follow this example, you will have to have maven and git installed.)&lt;/p&gt;

&lt;p&gt;To download the policy plugins, execute these commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;git clone https://github.com/apiman/apiman-plugins.git
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;cd apiman-plugins
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Before we build the plugins, we have to make one small change. The plugins as downloaded are assigned version numbers that include a -“SNAPSHOT” suffix. We will want to remove that suffix for this example. (Sneak peek: We will restore the suffix later in this article as apiman includes a new feature where “SNAPSHOT” version plugins are automatically reloaded.)&lt;/p&gt;

&lt;p&gt;To make these changes, edit these files, and change the version from “1.2.2-SNAPSHOT” to “1.2.2”:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;./pom.xml
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;test-policy/pom.xml
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then, to build the plugins, and install them into your local maven repo (at runtime, the apiman API Gateway installs plugins from the local maven “.m2” repo directory), execute this command:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;mvn install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;OK, our policy plugin is built, let’s add it into the management UI.&lt;/p&gt;

&lt;p&gt;As an administrative user, navigate to the “Manage Plugins” page in the Management UI and select the “Available Plugins” tab, and then, click on the “Add Custom Plugin” button. The following dialog is displayed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-02-22/plugin_mgmt_5.png&quot; alt=&quot;Image: Add Custom Plugin &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Fill in the details for the “test-policy” plugin. (You can find all this information in the plugin’s “pom.xml” file.) apiman will use this information to locate the policy plugin in your local maven repo:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-02-22/plugin_mgmt_6.png&quot; alt=&quot;Image: Add Custom Plugin Details &quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, after you click on the “Add Plugin” button, the policy plugin is installed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-02-22/plugin_mgmt_7.png&quot; alt=&quot;Image: Custom Plugin Added &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice that there are (2) buttons in the “Actions” column of the “Installed Plugins”  table. The button labeled with an “X” enables you to remove the plugin. The button labeled with an up-arrow enables you to upgrade the policy plugin.&lt;/p&gt;

&lt;p&gt;In order for apiman to recognize that a plugin policy has been updated, the plugin version number must change. To change the version number of the test-policy plugin, edit these files, and change the version from “1.2.2” to “1.2.3”:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;./pom.xml
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;test-policy/pom.xml
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then, to rebuild the plugins, and install them into your local maven repo, execute this command:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;mvn clean install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;After rebuilding the plugins, return to the apiman Management UI, and click on the plugin policy’s upgrade button. Enter the new plugin version number in the dialog that is displayed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-02-22/plugin_mgmt_8.png&quot; alt=&quot;Image: Set the Updated Version Number &quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, after you perform the upgrade by clicking on the “OK” button, the plugin is upgraded:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-02-22/plugin_mgmt_9.png&quot; alt=&quot;Image: View the Updated Version Number &quot; /&gt;&lt;/p&gt;

&lt;p&gt;There are a few important things to keep in mind while upgrading policy plugins:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The upgraded version of a policy plugin replaces the previous version.&lt;/li&gt;
  &lt;li&gt;Plans, APIs, or Client Apps that had previously been configured with the old version of the plugin policy will continue to use that older version. They will not be automatically updated to use the upgraded version of the policy plugin.&lt;/li&gt;
  &lt;li&gt;New Plans, APIs, or Client Apps that are created after the policy plugin was upgraded will use the new/upgraded version.&lt;/li&gt;
  &lt;li&gt;If you want to upgrade existing Plans, APIs, or Client Apps to use an upgraded policy plugin, then you will have to manually remove the old policy plugin version and then add the new policy plugin version. The apiman project documentation recommends against doing this unless there is a bug fix or new feature added in a policy plugin upgrade.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;automatically-reloading-snapshot-version-policies&quot;&gt;Automatically Reloading SNAPSHOT Version Policies&lt;/h3&gt;

&lt;p&gt;The final new feature added to Plugin Management in apiman 1.2.x is the automatic reloading of SNAPSHOT version policy plugins.&lt;/p&gt;

&lt;p&gt;When you are developing a custom policy plugin, you may have to uninstall and reinstall the plugin many times while it is being debugged. This can quickly become a time-consuming manual task. Apiman 1.2.x now makes it possible for you avoid this manual installing/re-installing.&lt;/p&gt;

&lt;p&gt;As we’ve just seen, the apiman API Gateway installs policy plugins from your local maven repo. To be more efficient, the API Gateway caches plugins the first time that they are used. If, however, a plugin’s version ends with a “-SNAPSHOT” suffix, then the API Gateway will reload it every time the plugin is used.&lt;/p&gt;

&lt;p&gt;So, by including a “-SNAPSHOT” suffix in your custom policy plugin’s version, you can iterate through changes to the policy plugin  without having to manually uninstall and then install each new version of the plugin.&lt;/p&gt;

&lt;p&gt;Let’s take a look at this in action.&lt;/p&gt;

&lt;p&gt;Since we want to take advantage of the automatic reloading, we must restore the “-SNAPSHOT” suffix to the test-policy custom policy plugin. To make these changes, edit these files, and change the version from “1.2.3” to “1.2.2-SNAPSHOT”:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;./pom.xml
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;test-policy/pom.xml
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Then, to build the plugins, and install them into your local maven repo, execute this command:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;mvn clean install
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;And then add the custom policy plugin in the Management UI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-02-22/plugin_mgmt_10.png&quot; alt=&quot;Image: Add SNAPSHOT Plugin &quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, here’s the installed plugin:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-02-22/plugin_mgmt_11.png&quot; alt=&quot;Image: View SNAPSHOT Plugin &quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before we can configure the custom policy plugin, we need an API. For this example, we’ll use our old friend, “apiman-echo.” You can download this API from this git repository: &lt;a href=&quot;https://github.com/apiman/apiman-quickstarts&quot;&gt;https://github.com/apiman/apiman-quickstarts&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The steps to build, deploy, and configure this API are available in the first article in this series: &lt;a href=&quot;http://www.apiman.io/blog/introduction/overview/2015/01/09/impatient-new-user-redux.html&quot;&gt;The Impatient New User Guide to apiman&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We’ll use the postman web client to access the API. The first time that we access the API, we’ll see this response (note the text highlighted in green):&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;{
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt; &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;method&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;GET&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt; &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/apiman-echo&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt; &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;uri&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/apiman-echo&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt; &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;headers&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : {
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;   &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;Accept&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*/*&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;   &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;Cache-Control&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;no-cache&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;   &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.86 Safari/537.36&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;   &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;Connection&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;keep-alive&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;   &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;Test-Policy&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;   &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;Postman-Token&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;8808bb68-1c1c-ef97-449d-ab60f620b0e5&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n12&quot; name=&quot;n12&quot;&gt;12&lt;/a&gt;&lt;/span&gt;   &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;Host&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;localhost:8080&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n13&quot; name=&quot;n13&quot;&gt;13&lt;/a&gt;&lt;/span&gt;   &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;Accept-Language&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;en-US,en;q=0.8&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n14&quot; name=&quot;n14&quot;&gt;14&lt;/a&gt;&lt;/span&gt;   &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;Accept-Encoding&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;gzip, deflate, sdch&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n15&quot; name=&quot;n15&quot;&gt;15&lt;/a&gt;&lt;/span&gt; },
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n16&quot; name=&quot;n16&quot;&gt;16&lt;/a&gt;&lt;/span&gt; &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;bodyLength&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;color:#088&quot;&gt;null&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n17&quot; name=&quot;n17&quot;&gt;17&lt;/a&gt;&lt;/span&gt; &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;bodySha1&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;color:#088&quot;&gt;null&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n18&quot; name=&quot;n18&quot;&gt;18&lt;/a&gt;&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;OK, now, let’s change the policy plugin. In this file: src/main/java/io/apiman/plugins/test_policy/TestPolicy.java&lt;/p&gt;

&lt;p&gt;Change this line from this: request.getHeaders().put(“Test-Policy”, “true”);&lt;/p&gt;

&lt;p&gt;To this: request.getHeaders().put(“Test-Policy”, “quite true”);&lt;/p&gt;

&lt;p&gt;And then, rebuild the plugin with this command:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;mvn clean install -DskipTests
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;(The “skipTests” directive is a bit of laziness. There is a test included in the plugin that will fail because of the change that we just made. You can either run this command as is, or you can edit the test in the plugin to also look for a string of “quite true.”)&lt;/p&gt;

&lt;p&gt;Now, when we access the API again, we’ll see the change reflected - without our having to manually upgrade or uninstall/install the policy plugin:&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;{
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt; &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;method&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;GET&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt; &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;resource&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/apiman-echo&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt; &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;uri&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;/apiman-echo&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt; &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;headers&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : {
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;   &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;Accept&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*/*&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;   &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;Cache-Control&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;no-cache&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;   &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;User-Agent&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/46.0.2490.86 Safari/537.36&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt;   &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;Connection&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;keep-alive&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;   &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;Test-Policy&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;quite true&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;   &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;Postman-Token&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;bb900e07-249c-66e4-980a-2c9a70002c45&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n12&quot; name=&quot;n12&quot;&gt;12&lt;/a&gt;&lt;/span&gt;   &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;Host&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;localhost:8080&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n13&quot; name=&quot;n13&quot;&gt;13&lt;/a&gt;&lt;/span&gt;   &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;Accept-Language&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;en-US,en;q=0.8&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n14&quot; name=&quot;n14&quot;&gt;14&lt;/a&gt;&lt;/span&gt;   &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;Accept-Encoding&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;gzip, deflate, sdch&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n15&quot; name=&quot;n15&quot;&gt;15&lt;/a&gt;&lt;/span&gt; },
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n16&quot; name=&quot;n16&quot;&gt;16&lt;/a&gt;&lt;/span&gt; &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;bodyLength&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;color:#088&quot;&gt;null&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n17&quot; name=&quot;n17&quot;&gt;17&lt;/a&gt;&lt;/span&gt; &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;bodySha1&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;color:#088&quot;&gt;null&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n18&quot; name=&quot;n18&quot;&gt;18&lt;/a&gt;&lt;/span&gt;}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h3&gt;

&lt;p&gt;From its first releases, apiman has provided users with flexibility, including support for adding custom policies through plugins. In the latest release, apiman has expanded on that flexibility by enabling users to uninstall policy plugins, upgrade policy plugins, and automatically reload policy plugins.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;You can see a more detailed walk-through on how a custom policy plugin is created in this apiman blog post: &lt;a href=&quot;http://www.apiman.io/blog/plugins/policies/development/maven/2015/03/06/custom-policies-redux.html&quot;&gt;http://www.apiman.io/blog/plugins/policies/development/maven/2015/03/06/custom-policies-redux.html&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The “postman” client is available here: &lt;a href=&quot;https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en&quot;&gt;https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;/post&lt;/p&gt;
</description>
				
					<category term="apiman" />
				
					<category term="introduction" />
				
					<category term="overview" />
				
					<category term="plugin" />
				
					<category term="management" />
				
				<pubDate>Mon, 22 Feb 2016 07:30:00 -0500</pubDate>
				<link>http://apiman.io/blog/apiman/introduction/overview/plugin/management/2016/02/22/plugin-mgmt.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/apiman/introduction/overview/plugin/management/2016/02/22/plugin-mgmt.html</guid>
			</item>
		
		
			<item>
				<title>Apiman 1.2.1 Export and Import</title>
				
				        <dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author>
				
				<description>&lt;h3 id=&quot;the-question-you-dread&quot;&gt;The Question you Dread&lt;/h3&gt;

&lt;p&gt;If you use a computer at home or at work, you’ll eventually find yourself in a situation where you lose some important data and, while you are trying to recover it, someone asks you a question that is simultaneously annoying and terrifying:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Did you make a backup?”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Happily, the 1.2 release of apiman includes a new feature that enables you to export and import your apiman data and provides you with an easy means to create apiman data backups.  In this post,  we’ll take a look at the new export/import feature, and how you can use it for a variety of tasks to protect your data, make your life easier, and enable you to avoid annoying and terrifying questions.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;For test data, we’ll use the same types of data (organizations, users, plans, policies, APIs and client apps), that we created in the initial post in this series. (  &lt;a href=&quot;http://www.apiman.io/blog/introduction/overview/2015/01/09/impatient-new-user-redux.html&quot;&gt;The Impatient New User Guide to apiman&lt;/a&gt; )&lt;/p&gt;

&lt;p&gt;Note that since that post was written in January 2015, some of the names of the data elements have changed. You can either create the test data referred to in this post yourself, or you can import the data file attached to the post.&lt;/p&gt;

&lt;h3 id=&quot;exportimport-in-apiman-121&quot;&gt;Export/Import in apiman 1.2.1&lt;/h3&gt;

&lt;p&gt;The new export/import feature in apiman 1.2.1 enables you to export your apiman configuration data to a file, which can later be imported into an apiman system. Note that this feature follows an all-or-nothing approach in that is does not support incremental backup and restore of selected apiman data.&lt;/p&gt;

&lt;p&gt;The three main use cases that the export/import feature supports are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Backing up all your apiman data&lt;/li&gt;
  &lt;li&gt;Upgrading to a newer version of apiman&lt;/li&gt;
  &lt;li&gt;Migrating apiman data from a Test environment to a Production environment&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The export/import operations are only available to Administrative users. The export/import feature is accessed through the admin operations menu:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-01-26/export_import_1.png&quot; alt=&quot;Image: Admin Choices&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you select the &lt;strong&gt;Export/Import&lt;/strong&gt; Data feature, this menu is displayed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-01-26/export_import_2.png&quot; alt=&quot;Image: Export/Import Menu&quot; /&gt;&lt;/p&gt;

&lt;p&gt;One thing to keep in mind is that while you are importing or exporting data, no changes to data should be made or else the export/import may encounter an error, or may result in incomplete results. To be safe, you should disable user access to the API Manager, both the Management UI and its REST interface, for the duration of the import or export operation.&lt;/p&gt;

&lt;p&gt;We’ll look at exporting data first.&lt;/p&gt;

&lt;h3 id=&quot;backing-up-apiman-data&quot;&gt;Backing up apiman Data&lt;/h3&gt;

&lt;p&gt;To make a backup of all your apiman data, simply select the “Export All” button. The apiman data will be written to a file and downloaded by your browser. Your browser’s settings will determine where the file is saved.&lt;/p&gt;

&lt;p&gt;The apiman data is written to a file named: api-manager-export.json&lt;/p&gt;

&lt;p&gt;As its name indicates, the apiman data is written in JSON form. This format provides us with  several advantages. First of all, it’s the format in which apiman is able to import data. (We’ll perform an import later in this post.) Secondly, it’s a text file where the contents of the file are human readable. The content of the file is ALL the apiman data, both the data elements that you have created and the data elements with which apiman is preconfigured.&lt;/p&gt;

&lt;p&gt;Reading this file can greatly increase your understanding of the elements that are defined in apiman. Let’s take a look at the elements in the file:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Users&lt;/strong&gt; - The preconfigured “admin” user is defined here, as are the new users we create.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Gateways&lt;/strong&gt; - The preconfigured apiman Gateway is defined here.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Roles&lt;/strong&gt; - The preconfigured, permission-based roles, and new roles that we create, are defined here. For example, the “OrganizationOwner” role is shown to have these permissions: [ “apiAdmin”, “orgAdmin”, “apiView”, “orgEdit”, “clientEdit”, “clientAdmin”, “planView”, “orgView”, “planAdmin”, “clientView”, “planEdit”, “apiEdit” ]&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Policy Definitions&lt;/strong&gt; -  Next, the preconfigured policies, and new policies t2015-11-12-micro-services.markdownhat we create, are defined here. For example: the “RateLimitingPolicy” is described as “Enforces rate configurable request rate limits on an API.  This ensures that consumers can’t overload an API with too many requests.”&lt;/li&gt;
  &lt;li&gt;The remainder of the file includes the elements that we create: &lt;strong&gt;Organizations, Plans, APIs, and Client Apps&lt;/strong&gt;. For example, here is the definition of the “echo” API that we created:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n1&quot; name=&quot;n1&quot;&gt;1&lt;/a&gt;&lt;/span&gt;&lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;Apis&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : [ {
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n2&quot; name=&quot;n2&quot;&gt;2&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;ApiBean&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : {
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n3&quot; name=&quot;n3&quot;&gt;3&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;echo&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n4&quot; name=&quot;n4&quot;&gt;4&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;echo&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n5&quot; name=&quot;n5&quot;&gt;5&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;description&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;The echo API&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n6&quot; name=&quot;n6&quot;&gt;6&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;createdBy&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;serprov&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n7&quot; name=&quot;n7&quot;&gt;7&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;createdOn&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;color:#00D&quot;&gt;1453773184836&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n8&quot; name=&quot;n8&quot;&gt;8&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;numPublished&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt; &lt;a href=&quot;#n9&quot; name=&quot;n9&quot;&gt;9&lt;/a&gt;&lt;/span&gt; },
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n10&quot; name=&quot;n10&quot;&gt;10&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt; &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;Versions&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : [ {
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n11&quot; name=&quot;n11&quot;&gt;11&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;ApiVersionBean&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : {
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n12&quot; name=&quot;n12&quot;&gt;12&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;color:#00D&quot;&gt;10&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n13&quot; name=&quot;n13&quot;&gt;13&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;status&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Published&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n14&quot; name=&quot;n14&quot;&gt;14&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;endpoint&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;http://localhost:8080/apiman-echo&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n15&quot; name=&quot;n15&quot;&gt;15&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;endpointType&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;rest&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n16&quot; name=&quot;n16&quot;&gt;16&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;endpointContentType&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;json&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n17&quot; name=&quot;n17&quot;&gt;17&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;endpointProperties&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : { },
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n18&quot; name=&quot;n18&quot;&gt;18&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;gateways&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : [ {
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n19&quot; name=&quot;n19&quot;&gt;19&lt;/a&gt;&lt;/span&gt;      &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;gatewayId&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;TheGateway&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n20&quot; name=&quot;n20&quot;&gt;20&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;    } ],
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n21&quot; name=&quot;n21&quot;&gt;21&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;publicAPI&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;color:#088&quot;&gt;false&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n22&quot; name=&quot;n22&quot;&gt;22&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;plans&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : [ {
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n23&quot; name=&quot;n23&quot;&gt;23&lt;/a&gt;&lt;/span&gt;      &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;planId&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;gold&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n24&quot; name=&quot;n24&quot;&gt;24&lt;/a&gt;&lt;/span&gt;      &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;1.0&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n25&quot; name=&quot;n25&quot;&gt;25&lt;/a&gt;&lt;/span&gt;    } ],
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n26&quot; name=&quot;n26&quot;&gt;26&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;version&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;1.0&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n27&quot; name=&quot;n27&quot;&gt;27&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;createdBy&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;serprov&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n28&quot; name=&quot;n28&quot;&gt;28&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;createdOn&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;color:#00D&quot;&gt;1453773184845&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n29&quot; name=&quot;n29&quot;&gt;29&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;modifiedBy&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;serprov&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n30&quot; name=&quot;n30&quot;&gt;30&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;modifiedOn&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;color:#00D&quot;&gt;1453773312563&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n31&quot; name=&quot;n31&quot;&gt;31&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;publishedOn&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;color:#00D&quot;&gt;1453773327835&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n32&quot; name=&quot;n32&quot;&gt;32&lt;/a&gt;&lt;/span&gt;  },
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n33&quot; name=&quot;n33&quot;&gt;33&lt;/a&gt;&lt;/span&gt;  &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;Policies&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : [ {
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n34&quot; name=&quot;n34&quot;&gt;34&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;color:#00D&quot;&gt;14&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n35&quot; name=&quot;n35&quot;&gt;35&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Api&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n36&quot; name=&quot;n36&quot;&gt;36&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;organizationId&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;ACMEServices&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n37&quot; name=&quot;n37&quot;&gt;37&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;entityId&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;echo&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n38&quot; name=&quot;n38&quot;&gt;38&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;entityVersion&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;1.0&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n39&quot; name=&quot;n39&quot;&gt;39&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;name&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BASIC Authentication Policy&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n40&quot; name=&quot;n40&quot;&gt;40&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;configuration&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;{&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;realm&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Echo&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;requireBasicAuth&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;:false,&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;staticIdentity&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;:{&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;identities&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;:[{&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;username&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;user1&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;password&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;:&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;admin123!&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;}]}}&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n41&quot; name=&quot;n41&quot;&gt;41&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;createdBy&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;serprov&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n42&quot; name=&quot;n42&quot;&gt;42&lt;/a&gt;&lt;/span&gt;    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;createdOn&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;color:#00D&quot;&gt;1453773312553&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n43&quot; name=&quot;n43&quot;&gt;43&lt;/a&gt;&lt;/span&gt;     &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;modifiedBy&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;serprov&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n44&quot; name=&quot;n44&quot;&gt;44&lt;/a&gt;&lt;/span&gt;     &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;modifiedOn&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;color:#00D&quot;&gt;1453773312553&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n45&quot; name=&quot;n45&quot;&gt;45&lt;/a&gt;&lt;/span&gt;     &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;definition&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : {
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n46&quot; name=&quot;n46&quot;&gt;46&lt;/a&gt;&lt;/span&gt;      &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;id&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;BASICAuthenticationPolicy&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n47&quot; name=&quot;n47&quot;&gt;47&lt;/a&gt;&lt;/span&gt;      &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;templates&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : [ ],
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n48&quot; name=&quot;n48&quot;&gt;48&lt;/a&gt;&lt;/span&gt;      &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;deleted&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;color:#088&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n49&quot; name=&quot;n49&quot;&gt;49&lt;/a&gt;&lt;/span&gt;    },
&lt;span class=&quot;line-numbers&quot;&gt;&lt;strong&gt;&lt;a href=&quot;#n50&quot; name=&quot;n50&quot;&gt;50&lt;/a&gt;&lt;/strong&gt;&lt;/span&gt;    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;orderIndex&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;line-numbers&quot;&gt;&lt;a href=&quot;#n51&quot; name=&quot;n51&quot;&gt;51&lt;/a&gt;&lt;/span&gt;  } ]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;One thing to remember is that the exported data file represents ALL apiman data. It’s not yet possible to perform incremental data backups in apiman. If you attempt to import the data from this file into the same apiman installation from which it was generated, you will see unique primary key violations as the import operation will attempt to create duplicate data elements.&lt;/p&gt;

&lt;p&gt;OK, now that we have this exported data file, what can we do with it?&lt;/p&gt;

&lt;p&gt;Well, obviously, if something goes wrong with your installation of apiman, you can start over with a clean installation, and instead of manually recreating your data, you can import the data. (Personal note from the author: I work in software test/QE. Part of our testing is always destructive in nature. As a result, we are always “messing up” test data. The export/import feature enables us to quickly reinstall apiman and recover a clean test environment.) To perform the import after a new installation of apiman, you simply select and upload  the exported data file:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-01-26/export_import_3.png&quot; alt=&quot;Image: Admin Choices&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The Management UI displays the status of the import as the data is processed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-01-26/export_import_4.png&quot; alt=&quot;Image: Admin Choices&quot; /&gt;&lt;/p&gt;

&lt;p&gt;How else can we use the exported data file?&lt;/p&gt;

&lt;h3 id=&quot;upgrading-to-a-newer-version-of-apiman&quot;&gt;Upgrading to a Newer Version of apiman&lt;/h3&gt;

&lt;p&gt;One of the best aspects of open source projects is the rapid rate at which new features are implemented and new versions are released. It’s exciting to watch projects quickly mature as features are added and bugs are fixed, and since the projects are open source, you can even make your own contributions. This has been the case with apiman over the past several months. New features have been added such as metrics and support for creating custom policies.&lt;/p&gt;

&lt;p&gt;One downside to all the rapid change is that as new versions of apiman have been released, we’ve had to recreate all our apiman data as there was no way to migrate apiman data from one release to the next. The export/import feature now gives us a way to export apiman data from one apiman release and import it into a new apiman release.&lt;/p&gt;

&lt;p&gt;NOTE: In cases where the apiman data model changes between versions, apiman will introduce tools to transform the JSON export file from an older format to the latest.  It has not yet been decided whether those tools will be built into the Import process, or released as a standalone utility.&lt;/p&gt;

&lt;h3 id=&quot;migrating-apiman-data-from-a-test-environment-to-a-production-environment&quot;&gt;Migrating apiman Data from a &lt;em&gt;Test&lt;/em&gt; Environment to a &lt;em&gt;Production&lt;/em&gt; Environment&lt;/h3&gt;

&lt;p&gt;It’s a common practice for organizations to maintain two separate installations of software releases:&lt;/p&gt;

&lt;p&gt;A test environment, where the goal is to experiment with new features. This is typically an internal environment that gives up some measure of stability in exchange for the ability to “try out” new features as they become available. The rate of change for this environment is high as any disruption in service in this environment do not affect customers.
A production environment, where the goal is stability. This is the environment that supports your customers. Changes happen slowly in this environment and new features are only installed after they are carefully tested as disruptions in service in this environment do affect customers.&lt;/p&gt;

&lt;p&gt;The new export/import feature in apiman 1.2 makes it possible for you to experiment with changes in your test environment, and, after the changes have been found to be stable, to easily migrate your test data from the test environment into your production environment. (You will, of course, create a backup of your production environment data before making any changes.  ;-)&lt;/p&gt;

&lt;h3 id=&quot;migrating-apiman-from-one-storage-solution-to-another&quot;&gt;Migrating apiman from one storage solution to another&lt;/h3&gt;

&lt;p&gt;Finally, when apiman is first installed, you must make various decisions about its configuration.  One of these decisions is where to store configuration and data.  When you first install apiman, you might decide that MySQL is the right choice.  However, somewhere along the line you might change your mind - perhaps you want to switch to postgresql, or even more drastically you might switch to Elasticsearch!  The Export/Import process described here solves the problem of how to migrate all your data from one storage location to another.&lt;/p&gt;

&lt;p&gt;The process is basically the same as upgrading to a newer version of apiman.  But instead you will be upgrading to the same version of apiman, but with a different configuration.  Because the exported data is in a neutral (JSON) format, we can easily import into the new configuration.  This will result in all your data being migrated from MySQL to Elasticsearch (for example).&lt;/p&gt;

&lt;h3 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h3&gt;

&lt;p&gt;The new export/import feature in apiman 1.2 provides an easy way to safeguard your apiman data and to make it possible to migrate your data between apiman releases and installations. In addition, since the exported data is human readable, it is a great resource for better understanding apiman data structures. And, it’s easy to use too!&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;

</description>
				
					<category term="apiman" />
				
					<category term="introduction" />
				
					<category term="overview" />
				
					<category term="backup" />
				
					<category term="export" />
				
					<category term="import" />
				
				<pubDate>Wed, 27 Jan 2016 06:30:00 -0500</pubDate>
				<link>http://apiman.io/blog/apiman/introduction/overview/backup/export/import/2016/01/27/export-import.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/apiman/introduction/overview/backup/export/import/2016/01/27/export-import.html</guid>
			</item>
		
		
			<item>
				<title>Apiman Names Have Been Changed to Protect the Guilty</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				
				<description>&lt;p&gt;Recently we released version 1.2 of apiman and part of that release includes an effort
to rename some concepts to make them more clear (or to better align them with industry standard
terminology).  Read on below the fold to find out what changed!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;oh-god-why&quot;&gt;Oh God, Why?&lt;/h2&gt;
&lt;p&gt;We’ve had some feedback that the names of some of the apiman entities are, in some cases,
not as clear as they could be.  There was a fair bit of confusion, and so with the 1.2
release we decided it was an opportunity to fix the problem.  To that end, here is a
quick summary of the changes:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Old Name&lt;/th&gt;
      &lt;th&gt;New Name&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Organization&lt;/td&gt;
      &lt;td&gt;Organization&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Plan&lt;/td&gt;
      &lt;td&gt;Plan&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Service&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;API&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;Application&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;&lt;strong&gt;Client App&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Policy&lt;/td&gt;
      &lt;td&gt;Policy&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;As you can see, most of the old entity names are unchanged.  But it turns out that
&lt;strong&gt;Service&lt;/strong&gt; and &lt;strong&gt;Application&lt;/strong&gt; just weren’t great names.&lt;/p&gt;

&lt;h2 id=&quot;what-was-wrong-with-service&quot;&gt;What Was Wrong With Service?&lt;/h2&gt;
&lt;p&gt;It turns out that there is no more ambiguous term in software these days that “Service”.
The term can mean many different things to many different people.  Because apiman is an
API Management system, it just made sense that we rename Service to API.  Now you can
actually manage an API!&lt;/p&gt;

&lt;h2 id=&quot;ok-but-what-about-application&quot;&gt;OK, But What About Application?&lt;/h2&gt;
&lt;p&gt;In this case, the term &lt;strong&gt;Application&lt;/strong&gt; was confusing to some folks, because it wasn’t
clear that the Application was really just the specific Client that was allowed to
connect to an API.  Instead, many people assumed that “Application” was either an
way to mashup multiple APIs, or some other sort of server-side thing.  Hopefully
by using the term “Client” makes it more clear what it’s used for.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Obviously one of our goals is to make using apiman easier and more intuitive to all
users.  We certainly hope that these name changes help with that goal.&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description>
				
					<category term="apiman" />
				
					<category term="1.2.x" />
				
				<pubDate>Wed, 27 Jan 2016 03:30:00 -0500</pubDate>
				<link>http://apiman.io/blog/apiman/1.2.x/2016/01/27/renaming.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/apiman/1.2.x/2016/01/27/renaming.html</guid>
			</item>
		
		
			<item>
				<title>Cover yourself up! Protecting your APIs with mutual auth</title>
				
				        <dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author>
				
				<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last thing you want after carefully setting up your system with apiman is for someone to be able to call around the gateway and hit your APIs directly. The typical solution for this is to lock down your network so that the only publicly accessible part is the apiman gateway, whilst APIs are hidden in the private part of the network, which apiman can access, but not someone in the outside world. However, in some situations fine-grained network controls may not be available, such as the cloud; or, you may wish to have an additional layer of security to be reassured that no funny business is going on (such as imposters).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The class of solutions to this problem generally falls under the banner of &lt;strong&gt;mutual authentication&lt;/strong&gt;. One such mutual auth offering apiman supports is Mutually Authenticated TLS&lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnote_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-is-mutual-transport-layer-security-mutual-tls&quot;&gt;What is mutual transport layer security (Mutual TLS)?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most developers are familiar with SSL/TLS; it facilitates authentication via certificates followed by the establishment of an encrypted channel between the parties. It is overwhelmingly used in a one-way configuration: the client (often a browser) connects to a server, inspects the certificates it presents, and makes a determination as to whether the server is trustworthy. The connection is only made if the client is satisfied that the server is who it claims to be. In general, the server makes no determination as to who the client is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, in a typical apiman setup the gateway is acting as the client and the APIs act as the servers. Clearly, if we wish to prevent anyone other than approved clients from connecting directly to our APIs then unidirectional authentication is insufficient: we must ascertain the identities of &lt;em&gt;both&lt;/em&gt; client and server before establishing a connection. In essence, each party must present certificates that the other party trusts. This a great way to prevent anyone from side-stepping our gateway, and even better, it also stops any interlopers from sneaking into the system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Luckily, apiman makes this &lt;a href=&quot;http://www.apiman.io/latest/installation-guide.html#_how_to_enable_mtls_mutual_ssl_support_for_endpoint_security&quot;&gt;extremely easy to set this up&lt;/a&gt;, so let&amp;#8217;s dive in and explore what&amp;#8217;s possible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s assume &#39;node&#39; refers generically to a participant in our system, either a gateway or an API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two main elements we need to work with: &lt;strong&gt;keystores&lt;/strong&gt;, which contain a node&amp;#8217;s private key material, and &lt;strong&gt;truststores&lt;/strong&gt;, which contain public certificates instructing the node whom it should trust.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ideally, each node should have its own keystore, whose key material is signed by a &lt;strong&gt;trusted certificate authority&lt;/strong&gt;; a trusted party whose signature indicates that the holder of the certificate is trustworthy. In many organisations there is an internal certificate authority which will sign or issue certificates. If we add a CA&amp;#8217;s certificate to our node&amp;#8217;s keystores, then &lt;em&gt;any&lt;/em&gt; certificate issued by it will be trusted by virtue of the issuer&amp;#8217;s authority. This approach scales excellently, because we can issue an unlimited number of new certificates without needing to add them to our truststores.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It bears mentioning that any client apps&lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnote_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/span&gt; legitimately using our gateway will never be exposed to any mutual auth issues; they will establish a standard one-way authenticating TLS connection that is terminated at the gateway, with the gateway then establishing the two-way TLS connection to the API.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.apiman.io/blog/images/generated/gateway-mtls-redux.svg&quot; alt=&quot;Simple mutual auth setup&quot; width=&quot;751&quot; height=&quot;437&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Simple mutual auth setup&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the APIs trust the gateway (and vice versa), but the APIs &lt;em&gt;do not&lt;/em&gt; trust the client app. The client app tries its luck and attempts to bypass the gateway, but it doesn&amp;#8217;t hold a trusted certificate, so it fails.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-keys-to-success&quot;&gt;The keys to success&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Remember, this is just a quick blog demonstration; you need to take extreme care with how you look after your key infrastructure to avoid a catastrophic security incident. If you&amp;#8217;re unsure, consult someone who knows what they&amp;#8217;re doing!
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;truststore&quot;&gt;Truststore&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s create a simple shared truststore that we&amp;#8217;ll use on all of our nodes. We&amp;#8217;re going to imagine that we have an internal root CA called &lt;code&gt;apimanCA&lt;/code&gt;, and that whomever controls it has taken &lt;a href=&quot;https://i.imgur.com/sYeorwQ.png&quot;&gt;appropriate security precautions&lt;/a&gt; to ensure no baddies get their certificates signed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;keytool -import -keystore shared_trust_store.jks -file apimanCA.cer -alias apimanCA&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s the easy bit done, now onto key wrangling.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;keystore&quot;&gt;Keystore&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each of our nodes needs its own keystore, which we can create using &lt;code&gt;keytool&lt;/code&gt;, followed by generating a &lt;em&gt;certificate signing request&lt;/em&gt; (CSR), which we can then send to our CA to be signed:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;keytool -keystore gateway_ks.jks -genkey -alias gateway -keyalg rsa
keytool -keystore gateway_ks.jks -certreq -alias gateway -keyalg rsa -file gateway.csr

keytool -keystore API_a_ks.jks -genkey -alias API_a -keyalg rsa
keytool -keystore API_a_ks.jks -certreq -alias API_a -keyalg rsa -file API_a.csr&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Do the same for &lt;em&gt;each of your APIs&lt;/em&gt;, and send off the &lt;code&gt;csr&lt;/code&gt; files to be signed by CA (internal or otherwise). They should come back as certificate replies in one of several formats, import them back into their &lt;em&gt;corresponding keystores&lt;/em&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;keytool -import -keystore gateway_ks.jks -file gateway.cer -alias gateway
keytool -import -keystore API_a_ks.jks -file API_a.cer -alias API_a&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;hooking-it-up&quot;&gt;Hooking it up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Your APIs may not use Java, so you&amp;#8217;ll need to find the appropriate solution for enabling mutual TLS in your language&amp;#8217;s ecosystem. It doesn&amp;#8217;t really matter, as long as you have the appropriate certificates hooked in and have set &lt;strong&gt;client authentication to required&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;gateway-to-heaven&quot;&gt;Gateway to Heaven&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s easy to set up the gateway, but you should be especially careful about what you twiddle with, as the security implications could be important. Let&amp;#8217;s edit &lt;code&gt;apiman.properties&lt;/code&gt; on our gateway(s) with a few simple settings to test things out:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;properties&quot;&gt;# ---------------------------------------------------------------------
# SSL/TLS settings for the gateway connector(s).
# ---------------------------------------------------------------------

# Trust store contains certificate(s) trusted by gateway.
apiman-gateway.connector-factory.tls.trustStore=/path/to/shared_trust_store.jks
apiman-gateway.connector-factory.tls.trustStorePassword=password

# Key store contains gateway&#39;s keys (including private components: keep it safe).
apiman-gateway.connector-factory.tls.keyStore=/path/to/gateway_ks.jks
apiman-gateway.connector-factory.tls.keyStorePassword=password
apiman-gateway.connector-factory.tls.keyPassword=password

# Whether certificate host checks should be bypassed. *Use with great care.*
apiman-gateway.connector-factory.tls.allowAnyHost=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last option is to make our testing easier by removing hostname checks on the certificates, but you should disable that in production. Have a look at &lt;a href=&quot;http://www.apiman.io/latest/installation-guide.html#_make_changes_to_apiman_properties_3&quot;&gt;our setup guide&lt;/a&gt; for a full list of options.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;service-is-everything&quot;&gt;Service is Everything&lt;/h3&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You must explicitly enable client authentication for any APIs you want protected by mutual TLS.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s a small Java example using Jetty to create a tiny API with mutual authentication enabled. We hook up our &lt;em&gt;keystore&lt;/em&gt; and &lt;em&gt;truststore&lt;/em&gt; with respective hard-to-guess passwords, and set &lt;code&gt;setNeedClientAuth(true)&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; main(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;... args) &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;Exception&lt;/span&gt; {
      Server server = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Server();
      server.setStopAtShutdown(&lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;);

      HttpConfiguration http_config = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HttpConfiguration();
      http_config.setSecureScheme(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
      http_config.setSecurePort(&lt;span class=&quot;integer&quot;&gt;8009&lt;/span&gt;);

      SslContextFactory sslContextFactory = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SslContextFactory();
      sslContextFactory.setKeyStorePath(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/tmp/keys/API_a_ks.jks&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
      sslContextFactory.setKeyStorePassword(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
      sslContextFactory.setKeyManagerPassword(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
      sslContextFactory.setTrustStorePath(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/tmp/keys/shared_trust_store.jks&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
      sslContextFactory.setTrustStorePassword(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
      &lt;span class=&quot;comment&quot;&gt;// Important: Require client auth&lt;/span&gt;
      sslContextFactory.setNeedClientAuth(&lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;);

      HttpConfiguration https_config = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HttpConfiguration(http_config);
      https_config.addCustomizer(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SecureRequestCustomizer());

      ServerConnector sslConnector = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ServerConnector(server, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SslConnectionFactory(
              sslContextFactory, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http/1.1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;), &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HttpConnectionFactory(https_config));
      sslConnector.setPort(&lt;span class=&quot;integer&quot;&gt;8009&lt;/span&gt;);
      server.addConnector(sslConnector);
      server.setHandler(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AbstractHandler() {

          &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; handle(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; target, Request baseRequest,
                  HttpServletRequest request, HttpServletResponse response) &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;IOException&lt;/span&gt;,
                  ServletException {
              response.setContentType(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;text/html;charset=utf-8&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
              response.setStatus(HttpServletResponse.SC_OK);
              baseRequest.setHandled(&lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;);
              response.getWriter().println(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;apiman saves the day, again!&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
          }
      });
      server.start();
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fire-it-up&quot;&gt;Fire it up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Restart everything, and you should be ready to test it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When creating an API that is protected by mutual TLS you should set the &lt;strong&gt;API Security&lt;/strong&gt; dropdown in the &lt;strong&gt;Implementation&lt;/strong&gt; tab to &lt;code&gt;MTLS/Two-Way-SSL&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.apiman.io/blog/images/2016-01-08/enable-mtls.png&quot; alt=&quot;enable mtls&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If things don&amp;#8217;t seem to be working quite how you expected, you&amp;#8217;ll probably notice that the error messages emitted are fairly vague. If you need more information to figure out what&amp;#8217;s going on then you can pass the flag &lt;code&gt;-Djavax.net.debug=all&lt;/code&gt;, which will print helpful debug info from &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/guides/security/jsse/ReadDebug.html&quot;&gt;Java&amp;#8217;s SSL subsystems&lt;/a&gt; onto the console.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;./bin/standalone.sh -Djavax.net.debug=all -c standalone-apiman.xml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mutually authenticated TLS is a good way to ensure both client and server are who they claim to be before connecting to one another. If you need to prevent unauthorized direct access to your APIs, this is an option worth considering.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt; Also commonly referred to as MTLS, MSSL, 2WAY, client authenticated TLS/SSL, two-way SSL, amongst other names!
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt; Client Apps are the users of our APIs, like browsers, mobile apps, etc
&lt;/div&gt;
&lt;/div&gt;</description>
				
					<category term="gateway" />
				
					<category term="security" />
				
					<category term="mutual-auth" />
				
					<category term="ssl" />
				
					<category term="mtls" />
				
					<category term="1.2.x" />
				
				<pubDate>Fri, 22 Jan 2016 07:00:00 -0500</pubDate>
				<link>http://apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/1.2.x/2016/01/22/mtls-mutual-auth-redux.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/1.2.x/2016/01/22/mtls-mutual-auth-redux.html</guid>
			</item>
		
		
			<item>
				<title>Keycloak and dagger: Securing your APIs with OAuth2</title>
				
				        <dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author>
				
				<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One great advantage of API Management is centralising auth concerns, thereby avoiding burdensome reimplementation issues and streamlining your security processes. The good news is that you can easily configure apiman to handle many common auth use-cases, such as OAuth2 with our popular Keycloak OAuth2 policy which I&amp;#8217;ll outline in this blogpost.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;preparation&quot;&gt;Preparation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this example, let&amp;#8217;s assume we&amp;#8217;re using apiman&amp;#8217;s &lt;a href=&quot;http://www.apiman.io/latest/download.html&quot;&gt;quickstart&lt;/a&gt; setup and have it running. I suggest using the &lt;em&gt;&#39;Or simply try this&amp;#8230;&amp;#8203;&#39;&lt;/em&gt; box.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After you have your apiman quickstart running (replace &lt;strong&gt;apiman-1.2.0.Final&lt;/strong&gt; in the path below with whatever version you downloaded), we can live deploy a handy &lt;strong&gt;echo service&lt;/strong&gt; into our environment so we have an API to test against:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;cd /tmp
git clone https://github.com/apiman/apiman-quickstarts.git
cd apiman-quickstarts/echo-service
git checkout 1.2.0.Final
mvn clean install
mvn wildfly:deploy&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;installing-the-plugin&quot;&gt;Installing the Plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Those amongst you with some experience of apiman may have noticed that the OAuth2 policy doesn&amp;#8217;t appear in the standard list of policies in the manager UI; that&amp;#8217;s because the OAuth2 policy is an example of an &lt;strong&gt;apiman plugin&lt;/strong&gt;, all of which are shipped separately from apiman, but are trivially easy to install.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When logged into &lt;a href=&quot;http://localhost:8080/apimanui/&quot;&gt;the apiman manager UI&lt;/a&gt; as an administrator (for the quickstart that&amp;#8217;s u:`admin`, p:`admin123!`), navigate to the &lt;strong&gt;manage plugins&lt;/strong&gt; page:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;http://www.apiman.io/latest/user-guide.html#_plugins&quot;&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-01-08/sysadmin-manage-plugins.png&quot; alt=&quot;System Administration&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.apiman.io/blog/images/2016-01-08/available-plugins.png&quot; alt=&quot;Select Keycloak OAuth Policy Plugin from the available plugins list&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tab to &lt;strong&gt;Available Plugins&lt;/strong&gt;, select &lt;strong&gt;Install&lt;/strong&gt; for &lt;em&gt;Keycloak OAuth Policy Plugin&lt;/em&gt;, confirm the plugin coordinates, and click &lt;strong&gt;Add Plugin&lt;/strong&gt;. That&amp;#8217;s it!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;setting-up&quot;&gt;Setting Up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two essential components to our system. First, is the &lt;a href=&quot;http://keycloak.jboss.org&quot;&gt;Keycloak server&lt;/a&gt;, an all-in-one &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_sign-on&quot;&gt;SSO&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Identity_management&quot;&gt;IdM&lt;/a&gt; platform; we&amp;#8217;ll configure it to be our identity source and handle the issuance of OAuth2 bearer tokens. Second, is the apiman OAuth2 policy; we&amp;#8217;ll set it up to validate the tokens precisely to our requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s assume we&amp;#8217;re going to protect a very simple &lt;strong&gt;echo service&lt;/strong&gt;, which echoes back to the requestor the details of any request made to it. It is located at &lt;code&gt;&lt;a href=&quot;http://localhost:8080/apiman-echo&quot; class=&quot;bare&quot;&gt;http://localhost:8080/apiman-echo&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;keycloak-server&quot;&gt;Keycloak Server&lt;/h3&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
There are a huge number of configuration permutations with Keycloak, and the most suitable approach will vary according to your requirements. It is highly recommended to consult the &lt;a href=&quot;http://keycloak.jboss.org/docs.html&quot;&gt;Keycloak guides&lt;/a&gt; to determine your optimal setup, as for the sake of brevity we&amp;#8217;re only going to cover a couple of trivial preconfigured scenarios.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, log into the &lt;a href=&quot;http://localhost:8080/auth/admin&quot;&gt;Keycloak server&lt;/a&gt;. If you&amp;#8217;re following our walkthrough, the log-in details are identical to those mentioned earlier (&lt;code&gt;admin&lt;/code&gt;, &lt;code&gt;admin123!&lt;/code&gt;). You can see that there is already an &lt;strong&gt;apiman&lt;/strong&gt; realm defined, but we&amp;#8217;re going to create a new one, so navigate to &lt;strong&gt;Add Realm&lt;/strong&gt; (top right), and import and upload &lt;a href=&quot;http://www.apiman.io/blog/resources/2015-06-04/stottie.json&quot;&gt;this demonstration realm definition&lt;/a&gt;; it provides an extremely simple setup where we have:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A realm: &lt;code&gt;stottie&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A single user: &lt;code&gt;rincewind&lt;/code&gt;, with password: &lt;code&gt;apiman&lt;/code&gt; and a realm role: &lt;code&gt;echomeister&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And, a client: &lt;code&gt;apiman&lt;/code&gt;, which is allowed direct grants via Keycloak&amp;#8217;s &lt;a href=&quot;https://keycloak.github.io/docs/userguide/keycloak-server/html/direct-access-grants.html&quot;&gt;RESTful Direct Access Grants API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s quickly test requesting ourselves an OpenID Connect OAuth2 token:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;curl -X POST http://127.0.0.1:8080/auth/realms/stottie/protocol/openid-connect/token  -H &amp;quot;Content-Type: application/x-www-form-urlencoded&amp;quot; -d &amp;quot;username=rincewind&amp;quot; -d &#39;password=apiman&#39; -d &#39;grant_type=password&#39; -d &#39;client_id=apiman&#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This should return some JSON similar to the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;{
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;access_token&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;eyJhbGciOiJSUzI1NiJ9...&amp;lt;SNIP&amp;gt;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;expires_in&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;300&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;refresh_expires_in&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1800&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;refresh_token&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;eyJhbGcg...&amp;lt;SNIP&amp;gt;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;not-before-policy&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;session-state&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;69974623-be8b-49d7-840a-0330c6bdde21&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the OAuth2 token we&amp;#8217;re interested in is contained within the &lt;code&gt;access_token&lt;/code&gt; field, with useful ancillary information about token validity and refreshing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In this instance, the access token is a signed OpenID Connect JSON Web Token (JWT). Using the handy decoder available at &lt;a href=&quot;https://jwt.io&quot;&gt;jwt.io&lt;/a&gt;, we can see a lot interesting information, including the &lt;code&gt;echomiester&lt;/code&gt; realm role defined on &lt;code&gt;rincewind&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;{
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;jti&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;c89b8cf7-84ef-4f02-9954-f8d3d4321473&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1433414538&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;nbf&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;iat&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1433414238&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;iss&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://127.0.0.1:8080/auth/realms/stottie&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;aud&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;apiman&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;de4af322-85b2-4dbe-8d53-6a2ee29e4080&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;azp&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;apiman&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;session_state&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;69974623-be8b-49d7-840a-0330c6bdde21&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;client_session&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;b5bd36a0-d576-4593-be7b-4648612c25b8&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;allowed-origins&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [],
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;realm_access&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
        &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [
            &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;echomeister&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
        ]
    },
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;resource_access&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
        &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
            &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [
                &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;view-profile&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;manage-account&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
            ]
        }
    },
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;preferred_username&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;rincewind&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This demonstrates one OpenID Connect&amp;#8217;s most useful attributes: all the information required to validate a request is contained within the token itself.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;apiman-oauth2-policy&quot;&gt;Apiman OAuth2 Policy&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, log into apiman, and &lt;strong&gt;Create a New Organization&lt;/strong&gt;; let&amp;#8217;s call it &lt;strong&gt;&lt;em&gt;Newcastle&lt;/em&gt;&lt;/strong&gt;. Select the &lt;strong&gt;APIs&lt;/strong&gt; tab, and add a &lt;strong&gt;New API&lt;/strong&gt;; we&amp;#8217;ll name this one &lt;strong&gt;&lt;em&gt;EchoAPI&lt;/em&gt;&lt;/strong&gt; and then &lt;strong&gt;Create API&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Select the &lt;strong&gt;Implementation&lt;/strong&gt; tab, and set the endpoint to our echo service, &lt;code&gt;&lt;a href=&quot;http://localhost:8080/apiman-echo&quot; class=&quot;bare&quot;&gt;http://localhost:8080/apiman-echo&lt;/a&gt;&lt;/code&gt;. Save and move onto the &lt;strong&gt;Plans&lt;/strong&gt; tab, where you should opt to &lt;strong&gt;Make this API public&lt;/strong&gt;. After saving, we can move onto the &lt;strong&gt;Policies&lt;/strong&gt; tab, where the interesting stuff starts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Navigate to &lt;strong&gt;Add Policy&lt;/strong&gt;, and select &lt;strong&gt;Keycloak OAuth Policy&lt;/strong&gt; from the drop-down list. A substantial set of options are available for your perusal, but for the purposes of this blog demo we&amp;#8217;ll set the following:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33%;&quot;&gt;
&lt;col style=&quot;width: 33%;&quot;&gt;
&lt;col style=&quot;width: 33%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Option&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Value&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Details&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Realm&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://127.0.0.1:8080/auth/realms/stottie&quot; class=&quot;bare&quot;&gt;http://127.0.0.1:8080/auth/realms/stottie&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;The path to our realm &lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnote_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/span&gt;. Note that in older versions of Keycloak (pre &lt;code&gt;1.2.0&lt;/code&gt;), the realm will just be the &lt;strong&gt;stottie&lt;/strong&gt; (no path).&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Keycloak Realm Certificate&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Base64 encoded cert&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Paste your &lt;a href=&quot;http://localhost:8080/auth/admin/master/console/#/realms/stottie/keys-settings&quot;&gt;Keycloak realm certificate&lt;/a&gt;.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Forward Authorization Roles&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Forward Realm Roles, and set &lt;em&gt;Forward Realm Roles?&lt;/em&gt; to &lt;strong&gt;true&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;If we decide to use the authorization policy later, we&amp;#8217;ll forward the realm roles contained within the token (i.e. &lt;code&gt;echomeister&lt;/code&gt;). If we don&amp;#8217;t need the granularity of roles, you can still just validate the token.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Forward Keycloak Token Information&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Header: &lt;code&gt;X-AZP&lt;/code&gt; &amp;#8658; Field: &lt;code&gt;azp&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Set header &lt;code&gt;X-AZP&lt;/code&gt; to be value of token&amp;#8217;s &lt;code&gt;azp&lt;/code&gt; field. We would expect this to be &lt;code&gt;apiman&lt;/code&gt; for this case,  but you can set any field.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Select &lt;strong&gt;Add Policy&lt;/strong&gt;, and then &lt;strong&gt;Publish&lt;/strong&gt; the API. You can see its endpoint information in the &lt;strong&gt;Endpoint&lt;/strong&gt; tab, it should be similar to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://localhost:8443/apiman-gateway/Newcastle/EchoAPI/1.0&quot; class=&quot;bare&quot;&gt;https://localhost:8443/apiman-gateway/Newcastle/EchoAPI/1.0&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;testing-authentication&quot;&gt;Testing Authentication&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s test our setup with cURL to see whether our request is &lt;em&gt;denied&lt;/em&gt; if we don&amp;#8217;t use a token:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;[msavy@mmbp tmp]$ curl -k  https://127.0.0.1:8443/apiman-gateway/Newcastle/EchoAPI/1.0
{
    &amp;quot;type&amp;quot;: &amp;quot;Authentication&amp;quot;,
    &amp;quot;failureCode&amp;quot;: 11005,
    &amp;quot;responseCode&amp;quot;: 401,
    &amp;quot;message&amp;quot;: &amp;quot;OAuth2 &#39;Authorization&#39; header or &#39;access_token&#39; query parameter must be provided.&amp;quot;,
    &amp;quot;headers&amp;quot;: {}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Excellent, it all seems to be working! Notice that we&amp;#8217;re using self-signed certificates for this demo, so the &lt;code&gt;-k&lt;/code&gt; flag will skip certificate validation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, let&amp;#8217;s do a request with a token. There are two ways to attach your bearer token to a request. Either:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Authorization&lt;/code&gt; header, as &lt;code&gt;Authorization: Bearer &amp;lt;token&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;access_token&lt;/code&gt; query parameter, as &lt;code&gt;&lt;a href=&quot;http://example.org/the/path/?access_token=&quot;&gt;token&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, let&amp;#8217;s retrieve a fresh token from Keycloak, and extract the &lt;code&gt;access_token&lt;/code&gt; field from the json using &lt;code&gt;jq&lt;/code&gt; &lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnote_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;curl -X POST http://127.0.0.1:8080/auth/realms/stottie/protocol/openid-connect/token  -H &quot;Content-Type: application/x-www-form-urlencoded&quot; -d &#39;username=rincewind&#39; -d &#39;password=apiman&#39; -d &#39;grant_type=password&#39; -d &#39;client_id=apiman&#39; | jq -r &#39;.access_token&#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Second, we&amp;#8217;ll take the token and attach it to our request to the API&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;[msavy@mmbp tmp]$ curl -k -H &quot;Authorization: Bearer eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiJiNDY1YW...&quot; https://127.0.0.1:8443/apiman-gateway/Newcastle/EchoAPI/1.0
{
  &quot;method&quot; : &quot;GET&quot;,
  &quot;resource&quot; : &quot;/apiman-echo&quot;,
  &quot;uri&quot; : &quot;/apiman-echo&quot;,
  &quot;headers&quot; : {
    &quot;Authorization&quot; : &quot;Bearer eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiJiNDY1YWMzNi1hMTczLTRjOWMtYWJjZS00MzE2MJ...&quot;,
    &quot;Host&quot; : &quot;127.0.0.1:8080&quot;,
    &quot;User-Agent&quot; : &quot;curl/7.37.1&quot;,
    &quot;Accept&quot; : &quot;*/*&quot;,
    &quot;Connection&quot; : &quot;keep-alive&quot;,
    &quot;Cache-Control&quot; : &quot;no-cache&quot;,
    &quot;Pragma&quot; : &quot;no-cache&quot;,
    &quot;X-AZP&quot;: &quot;apiman&quot;
  },
  &quot;bodyLength&quot; : null,
  &quot;bodySha1&quot; : null,
  &quot;counter&quot; : 1
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Great, it worked! We can see EchoAPI has now been reached, meaning our OAuth2 token was validated successfully, and it sent us back a response which includes the bearer token we used (you can strip this out in the options).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Furthermore, you can see our &lt;code&gt;X-AZP&lt;/code&gt; header has been set to the expected value of &lt;code&gt;apiman&lt;/code&gt;, which was pulled from the token.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;re feeling lazy, here&amp;#8217;s &lt;a href=&quot;https://gist.github.com/msavy/eaa1841e0c7a50e6ea8c&quot;&gt;an all-in-one script&lt;/a&gt; to do it for you.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;adding-authorization&quot;&gt;Adding Authorization&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re going to develop our example a little bit further. At present, we simply have a binary approach where we either allow or disallow based upon which realm the token was issued from. If we want a more granular approach where we can discriminate upon roles, then we need to add another element: &lt;strong&gt;Authorization&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The more observant readers will note that we have already added two of the required elements when we imported the realm into Keycloak; namely, a user &lt;code&gt;rincewind&lt;/code&gt; and a realm role &lt;code&gt;echomeister&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we navigate back to the &lt;strong&gt;EchoAPI&lt;/strong&gt; API in the apiman UI, we can create a &lt;strong&gt;New Version&lt;/strong&gt;. We&amp;#8217;ll call it &lt;strong&gt;&lt;em&gt;2.0&lt;/em&gt;&lt;/strong&gt; and clone the previous configuration. Moving over to the &lt;strong&gt;Policies&lt;/strong&gt; tab again, we &lt;strong&gt;Add Policy&lt;/strong&gt; and select &lt;strong&gt;Authorization Policy&lt;/strong&gt; from the drop-down.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re going to add two rules:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33%;&quot;&gt;
&lt;col style=&quot;width: 33%;&quot;&gt;
&lt;col style=&quot;width: 33%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;To access resource&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;using verb/action&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;the user must have role&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;/rincewind/.*&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;echomeister&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;/secret/.*&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;overlord&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our example user has the first role, but not the second. &lt;strong&gt;Add&lt;/strong&gt; the policy and &lt;strong&gt;Publish&lt;/strong&gt; the API again. Our endpoint will now reflect the changed version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will probably need to issue a new bearer token, which you can achieve by repeating the previous shell command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;[msavy@mmbp tmp]$ curl -k -H &amp;quot;Authorization: Bearer eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiJmODAyZjFmMy1kN2JmLTQ0YjQtODA2N...&amp;quot; \
 https://127.0.0.1:8443/apiman-gateway/Newcastle/EchoAPI/2.0/rincewind/wizard
{
  &amp;quot;method&amp;quot; : &amp;quot;GET&amp;quot;,
  &amp;quot;resource&amp;quot; : &amp;quot;/apiman-echo/rincewind/wizard&amp;quot;,
  &amp;quot;uri&amp;quot; : &amp;quot;/apiman-echo/rincewind/wizard&amp;quot;,
  &amp;quot;headers&amp;quot; : {
    &amp;quot;Authorization&amp;quot; : &amp;quot;Bearer eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiJmODAyZjFmMy1kN2JmLTQ0YjQtODA2N...&amp;quot;,
    &amp;quot;Host&amp;quot; : &amp;quot;127.0.0.1:8080&amp;quot;,
    &amp;quot;User-Agent&amp;quot; : &amp;quot;curl/7.37.1&amp;quot;,
    &amp;quot;Accept&amp;quot; : &amp;quot;*/*&amp;quot;,
    &amp;quot;Connection&amp;quot; : &amp;quot;keep-alive&amp;quot;,
    &amp;quot;Cache-Control&amp;quot; : &amp;quot;no-cache&amp;quot;,
    &amp;quot;Pragma&amp;quot; : &amp;quot;no-cache&amp;quot;,
    &amp;quot;X-AZP&amp;quot;: &amp;quot;apiman&amp;quot;
  },
  &amp;quot;bodyLength&amp;quot; : null,
  &amp;quot;bodySha1&amp;quot; : null,
  &amp;quot;counter&amp;quot; : 19
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As our user &lt;code&gt;rincewind&lt;/code&gt; has the role &lt;code&gt;echomeister&lt;/code&gt;, his request went through successfully.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, if we try to access a resource for which he doesn&amp;#8217;t hold the appropriate role, we see an error message:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;[msavy@mmbp tmp]$ curl -k -H &amp;quot;Authorization: Bearer eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiJmODAyZjFmMy1kN2JmLTQ0YjQtODA2N...&amp;quot; \
 https://127.0.0.1:8443/apiman-gateway/Newcastle/EchoAPI/2.0/secret/not/allowed

{
    &amp;quot;type&amp;quot;: &amp;quot;Authorization&amp;quot;,
    &amp;quot;failureCode&amp;quot;: 10009,
    &amp;quot;responseCode&amp;quot;: 0,
    &amp;quot;message&amp;quot;: &amp;quot;The user is not authorized to make this request (a required role is missing).&amp;quot;,
    &amp;quot;headers&amp;quot;: {}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&amp;#8230;&amp;#8203;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We protected an API with apiman using OAuth2; with examples of both simple authentication and role-based authorization. It should be easy to design your own role-based auth setups in combination with Keycloak.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt; Ensure you use whatever the valid ISS value is for your Keycloak realm. One quick way to find this is by decoding an access_token looking at what Keycloak has set for the &lt;code&gt;iss&lt;/code&gt; field
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt; We&amp;#8217;re going to use &lt;code&gt;jq&lt;/code&gt; to select the &lt;code&gt;access_token&lt;/code&gt; field in our JSON, so if you don&amp;#8217;t have &lt;code&gt;jq&lt;/code&gt; installed you can use your package manager to get it: OS X Brew &lt;code&gt;brew install jq&lt;/code&gt;; On Fedora &lt;code&gt;sudo yum install jq&lt;/code&gt;; On Debian &lt;code&gt;sudo apt-get install jq&lt;/code&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
				
					<category term="gateway" />
				
					<category term="security" />
				
					<category term="oauth2" />
				
					<category term="keycloak" />
				
					<category term="authentication" />
				
					<category term="authorization" />
				
					<category term="1.2.x" />
				
				<pubDate>Fri, 22 Jan 2016 07:00:00 -0500</pubDate>
				<link>http://apiman.io/blog/gateway/security/oauth2/keycloak/authentication/authorization/1.2.x/2016/01/22/keycloak-oauth2-redux.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/gateway/security/oauth2/keycloak/authentication/authorization/1.2.x/2016/01/22/keycloak-oauth2-redux.html</guid>
			</item>
		
		
			<item>
				<title>CORS? Of Course!</title>
				
				        <dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author>
				
				<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;re looking to define &lt;a href=&quot;http://www.w3.org/TR/2014/REC-cors-20140116/&quot;&gt;CORS policies&lt;/a&gt; in your API Management layer, then we have an &lt;a href=&quot;https://github.com/apiman/apiman-plugins&quot;&gt;official plugin&lt;/a&gt; that should be perfect for the job.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For those &lt;a href=&quot;http://enable-cors.org/&quot;&gt;unfamiliar with CORS&lt;/a&gt;, it&amp;#8217;s a way of precisely defining who and how a remote origin may invoke an API&amp;#8217;s resources. Generally, due to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Same-origin_policy&quot;&gt;same-origin policy&lt;/a&gt;, a web browser will only allow the invocation of resources that reside on the same origin as the requesting page. This mitigates a range of malicious script attacks by preventing interaction with remote resources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, if we &lt;em&gt;want&lt;/em&gt; our resource to be callable by some (or all) other origins, then we need to define a CORS policy which let&amp;#8217;s user agent know what&amp;#8217;s allowed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;preparation&quot;&gt;Preparation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have the &lt;a href=&quot;http://www.apiman.io/latest/download.html&quot;&gt;apiman quickstart&lt;/a&gt; running &lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnote_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/span&gt;, you next need to deploy the &lt;strong&gt;&lt;em&gt;echo-service&lt;/em&gt;&lt;/strong&gt; to act as the backend API for our demo. &lt;strong&gt;Substitute the path below&lt;/strong&gt; for the appropriate one corresponding to the version you downloaded.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;cd /tmp
git clone https://github.com/apiman/apiman-quickstarts.git
cd apiman-quickstarts/echo-service
git checkout 1.2.0.Final
mvn clean install
mvn wildfly:deploy&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Return to the &lt;a href=&quot;http://127.0.0.1:8080/apimanui&quot;&gt;apiman UI&lt;/a&gt; and log in &lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnote_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/span&gt;, navigate to the &lt;strong&gt;manage plugins&lt;/strong&gt; page:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;http://www.apiman.io/latest/user-guide.html#_plugins&quot;&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2016-01-08/sysadmin-manage-plugins.png&quot; alt=&quot;System Administration&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.apiman.io/blog/images/2016-01-09/available-plugins.png&quot; alt=&quot;Select CORS plugin from the available plugins list&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Tab to &lt;strong&gt;Available Plugins&lt;/strong&gt;, select &lt;strong&gt;Install&lt;/strong&gt; for &lt;em&gt;CORS Policy Plugin&lt;/em&gt;, confirm the plugin coordinates, and click &lt;strong&gt;Add Plugin&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;let-s-give-it-a-go&quot;&gt;Let&amp;#8217;s give it a go&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the purposes of this blogpost we&amp;#8217;ll contrive a scenario that allows us to demonstrate a variety of the plugin&amp;#8217;s functionality. However, if your precise use-case isn&amp;#8217;t covered here, you should still investigate the settings page, as a raft of configuration options are available that will likely achieve what you need.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Create an &lt;strong&gt;Organization&lt;/strong&gt; called &lt;strong&gt;&lt;em&gt;Foo&lt;/em&gt;&lt;/strong&gt;, then create an &lt;strong&gt;API&lt;/strong&gt; called &lt;strong&gt;&lt;em&gt;Bar&lt;/em&gt;&lt;/strong&gt;. Set your API&amp;#8217;s &lt;strong&gt;Implementation&lt;/strong&gt; URL to be &lt;code&gt;&lt;a href=&quot;http://127.0.0.1:8080/apiman-echo&quot; class=&quot;bare&quot;&gt;http://127.0.0.1:8080/apiman-echo&lt;/a&gt;&lt;/code&gt;, and select &lt;strong&gt;&lt;em&gt;Rest&lt;/em&gt;&lt;/strong&gt; as the type. Move to the &lt;strong&gt;Plans&lt;/strong&gt; tab and tick &lt;strong&gt;&lt;em&gt;Make this API public&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, move to the &lt;strong&gt;Policies&lt;/strong&gt; tab, click &lt;strong&gt;&lt;em&gt;Add Policy&lt;/em&gt;&lt;/strong&gt; and select &lt;strong&gt;&lt;em&gt;CORS Policy&lt;/em&gt;&lt;/strong&gt; from the dropdown list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;plugin-settings&quot;&gt;Plugin settings&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s configure the settings as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 55%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Option&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Value(s)&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Explanation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Terminate on CORS error&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ll not hit the backend if there&amp;#8217;s a CORS validation error. In some instances, a non-preflighted CORS request would otherwise cause a real invocation of the API whose results would be ignored by the user agent.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Access-Control-Allow-Origin&quot;&gt;Access-Control-Allow-Origin&lt;/a&gt;&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&quot;http://newcastle.local&quot; class=&quot;bare&quot;&gt;http://newcastle.local&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re going to use cURL to simulate a CORS request from this allowed origin.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Access-Control-Expose-Headers&quot;&gt;Access-Control-Expose-Headers&lt;/a&gt;&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Response-Counter&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default CORS will only allow a set of &lt;a href=&quot;http://www.w3.org/TR/cors/#simple-header&quot;&gt;simple headers&lt;/a&gt; to be exposed in a &lt;em&gt;response&lt;/em&gt; to the user agent, so we&amp;#8217;ll set this additional one we want to see.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Access-Control-Allow-Headers&quot;&gt;Access-Control-Allow-Headers&lt;/a&gt;&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;X-APIMAN-EXCELLENT&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default CORS only allows &lt;em&gt;requests&lt;/em&gt; to include a set of basic headers, and we want our API to be able to see the value of our &lt;em&gt;X-APIMAN-EXCELLENT&lt;/em&gt; header, so we specify it as allowed here.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Access-Control-Allow-Methods&quot;&gt;Access-Control-Allow-Methods&lt;/a&gt;&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;TRACE&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, only &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt; are allowed verbs. We want to use &lt;code&gt;TRACE&lt;/code&gt;, so we add it to the list.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Access-Control-Max-Age&quot;&gt;Access-Control-Max-Age&lt;/a&gt;&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;9001&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How long the browser should cache your CORS policy for (to avoid repeated preflight requests).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After saving you&amp;#8217;ll see it&amp;#8217;s description says something along the lines of:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Cross-origin requests from  1  origin(s) will be permitted upon satisfying method, header and credential constraints.  Denied requests will be terminated.  Preflight requests will be cached for 9001 delta seconds.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Assuming you&amp;#8217;ve saved everything, hit &lt;strong&gt;Publish&lt;/strong&gt; and we&amp;#8217;ll be ready to test.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;access-control-to-major-tom&quot;&gt;Access Control to Major Tom&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Generally, it&amp;#8217;s the job of the user agent to set the &lt;code&gt;Origin&lt;/code&gt; header, such as a browser or mobile client. However, we&amp;#8217;ll be using cURL to simulate a variety of scenarios so we can test things out without actually needing to set up a load of different domains.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;unwelcome-guests&quot;&gt;Unwelcome guests&lt;/h4&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;no-ticket-to-fly&quot;&gt;No ticket to fly&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In our first example, we&amp;#8217;ll set an &lt;code&gt;Origin&lt;/code&gt; that we didn&amp;#8217;t permit:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;curl -k -v -H &#39;Origin: http://panacalty.local&#39; https://127.0.0.1:8443/apiman-gateway/Foo/Bar/1.0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s what comes back:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;{
   &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;CORS: Origin not permitted.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
   &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : {
      &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Access-Control-Expose-Headers&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Response-Counter&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
   },
   &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;responseCode&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;integer&quot;&gt;400&lt;/span&gt;,
   &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Authorization&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
   &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;failureCode&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;integer&quot;&gt;400&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that we were given the thumbs down without the API ever being hit; for most use cases this is a good thing, as it avoids unnecessary load on a API where the user agent is going to throw away the response anyway.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;not-got-the-head-er-for-it&quot;&gt;Not got the head(er) for it&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even if our origin is correct, we need to pass other checks, such as headers. In this preflighted example, we&amp;#8217;ll try to make a request with a header that we&amp;#8217;ve not allowed: &lt;code&gt;X-SECRET&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;curl -X OPTIONS -k -v -H &#39;Origin: http://newcastle.local&#39; -H &#39;Access-Control-Request-Headers: X-SECRET&#39; &#39;Access-Control-Request-Method: TRACE&#39; https://127.0.0.1:8443/apiman-gateway/Foo/Bar/1.0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Correctly, CORS turned the preflight request down:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;{
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Authorization&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;failureCode&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;400&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;responseCode&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;400&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;CORS: Requested header not allowed&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
        &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Access-Control-Max-Age&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;9001&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The same goes for Request-Method (verb), and of course, whether the CORS request itself is valid.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;playing-by-the-rules&quot;&gt;Playing by the rules&lt;/h4&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
When &lt;code&gt;Host&lt;/code&gt; and &lt;code&gt;Origin&lt;/code&gt; are equal, a request will automatically be allowed, as it is a &lt;em&gt;non-CORS&lt;/em&gt; request. Some browsers still make the superfluous CORS requests anyway.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;keep-it-simple&quot;&gt;Keep it simple&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s set up a request that finally is playing by the parameters we configured earlier:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;curl -X GET -k -v -H &#39;Origin: http://newcastle.local&#39; https://127.0.0.1:8443/apiman-gateway/Foo/Bar/1.0
&amp;gt; GET /apiman-gateway/Foo/Bar/1.0 HTTP/1.1
&amp;gt; User-Agent: curl/7.37.1
&amp;gt; Host: 127.0.0.1:8443
&amp;gt; Accept: */*
&amp;gt; Origin: http://newcastle.local
&amp;gt;
&amp;lt; HTTP/1.1 200 OK
&amp;lt; X-Powered-By: Undertow/1
&amp;lt; Server: WildFly/8
&amp;lt; Access-Control-Expose-Headers: Response-Counter
&amp;lt; Response-Counter: 1
&amp;lt; Date: Sat, 13 Jun 2015 16:06:32 GMT
&amp;lt; Connection: keep-alive
&amp;lt; Access-Control-Allow-Origin: http://newcastle.local
&amp;lt; Content-Type: application/json
&amp;lt; Content-Length: 345
&amp;lt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It works: excellent! Here&amp;#8217;s our response body:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;{
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/apiman-echo&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/apiman-echo&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : {
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;127.0.0.1:8080&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;User-Agent&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;curl/7.37.1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;*/*&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;keep-alive&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Cache-Control&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;no-cache&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Pragma&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;no-cache&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can see that the &lt;code&gt;Response-Counter&lt;/code&gt; header is in our list of headers that can be exposed. If we were building a Javascript XHR then the browser would allow you to see the &lt;code&gt;Response-Counter&lt;/code&gt; but not other non-standard fields such as &lt;code&gt;X-Powered-By&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;preflight-checks&quot;&gt;Preflight checks&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s do something a bit more complex that requires a &lt;strong&gt;preflight request&lt;/strong&gt;, which is essentially a pre-check to see whether our request is acceptable before attempting it for real. We&amp;#8217;ll set the headers &lt;code&gt;Access-Control-Request-Method&lt;/code&gt; to &lt;code&gt;PATCH&lt;/code&gt; and &lt;code&gt;Access-Control-Request-Headers&lt;/code&gt; to &lt;code&gt;X-APIMAN-EXCELLENT&lt;/code&gt;. Again, we&amp;#8217;re using a permitted origin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To simulate it using cURL, let&amp;#8217;s do:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;curl -X OPTIONS -k -v -H &#39;Origin: http://newcastle.local&#39; -H &#39;Access-Control-Request-Method: PATCH&#39; -H &#39;Access-Control-Request-Headers: X-APIMAN-EXCELLENT&#39; https://127.0.0.1:8443/apiman-gateway/Foo/Bar/1.0
&amp;gt; OPTIONS /apiman-gateway/Foo/Bar/1.0 HTTP/1.1
&amp;gt; User-Agent: curl/7.37.1
&amp;gt; Host: 127.0.0.1:8443
&amp;gt; Accept: */*
&amp;gt; Origin: http://newcastle.local
&amp;gt; Access-Control-Request-Method: PATCH
&amp;gt; Access-Control-Request-Headers: X-APIMAN-EXCELLENT
&amp;gt;
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Access-Control-Allow-Headers: X-APIMAN-EXCELLENT
&amp;lt; Access-Control-Expose-Headers: Response-Counter
&amp;lt; Access-Control-Allow-Origin: http://newcastle.local
&amp;lt; Access-Control-Max-Age: 9001
&amp;lt; Access-Control-Allow-Methods: PATCH
&amp;lt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;liftoff&quot;&gt;Liftoff&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, the plugin gave us permission to continue on and make our real request with that origin, header and verb. In the real world, the browser would go ahead and do exactly that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the preflight requests never go through to the API itself, they are CORS specific and the response is generated on the gateway by the CORS policy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;in-conclusion&quot;&gt;In conclusion&amp;#8230;&amp;#8203;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We built up a CORS configuration and tested out its functionality. Thankfully, it was pretty easy!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt; For simplicity&amp;#8217;s sake, I suggest using the instructions in the &lt;em&gt;&#39;Or simply try this&amp;#8230;&amp;#8203;&#39;&lt;/em&gt; box
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt; If you used the quickstart, the defaults are U: admin P: admin123!
&lt;/div&gt;
&lt;/div&gt;</description>
				
					<category term="security" />
				
					<category term="plugin" />
				
					<category term="policy" />
				
					<category term="cors" />
				
					<category term="1.2.x" />
				
				<pubDate>Fri, 22 Jan 2016 07:00:00 -0500</pubDate>
				<link>http://apiman.io/blog/security/plugin/policy/cors/1.2.x/2016/01/22/cors-redux.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/security/plugin/policy/cors/1.2.x/2016/01/22/cors-redux.html</guid>
			</item>
		
		
			<item>
				<title>Finally!  Apiman 1.2.1.Final is released!</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				
				<description>&lt;p&gt;It’s been ages since apiman had a new release!  Well the reason for that is we’ve been
pushing to get the first version of &lt;em&gt;1.2.x&lt;/em&gt; out the door.  I’m here to tell you - that
day has finally arrived.&lt;/p&gt;

&lt;p&gt;We’re happy to announce apiman &lt;em&gt;1.2.1.Final&lt;/em&gt;.  Our goal is now to go back to our previous,
more frequent, release schedule.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;where-can-i-find-more-information&quot;&gt;Where can I find more information?&lt;/h2&gt;

&lt;p&gt;We’ve updated the website, the guides, and other collateral information to reflect all
of the additions and changes in the new version.  For more information about this latest
release of apiman, here are some useful links:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://red.ht/1OK3LG7&quot;&gt;1.2.0.Final Release Notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://red.ht/1OC1Tf7&quot;&gt;1.2.1.Final Release Notes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.apiman.io/&quot;&gt;The apiman project site&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.apiman.io/latest/user-guide.html&quot;&gt;Latest User Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;but-i-dont-like-following-links&quot;&gt;But I don’t like following links!&lt;/h2&gt;

&lt;p&gt;Don’t want to slog through the links above?  I totally understand - let me give you a quick
high level overview of what’s new in 1.2 (rhyming ftw).&lt;/p&gt;

&lt;p&gt;You should probably expect to see more detailed blog posts and documentation for each of the
following, so stay tuned!&lt;/p&gt;

&lt;h3 id=&quot;entity-renaming&quot;&gt;Entity Renaming&lt;/h3&gt;

&lt;p&gt;I suspect this will become a separate blog post, because it probably needs repeating.  After
getting feedback from users, it has become clear that the names of the apiman entities/objects
aren’t very intuitive.  The &lt;em&gt;1.1.x&lt;/em&gt; version of apiman used the following names:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Organization&lt;/li&gt;
  &lt;li&gt;Plan&lt;/li&gt;
  &lt;li&gt;Service&lt;/li&gt;
  &lt;li&gt;Application&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the new version of apiman, we made some changes to try and make things a bit more clear.
It turns out that the first two concepts are clear enough, but Service and Application are
a little bit ambiguous.  So the new names in apiman &lt;em&gt;1.2.x&lt;/em&gt; are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Organization&lt;/li&gt;
  &lt;li&gt;Plan&lt;/li&gt;
  &lt;li&gt;API&lt;/li&gt;
  &lt;li&gt;Client App  (aka Client)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Functionally everything works the same, it’s just the names that have changed.  It’s worth
pointing out that the renaming isn’t just superficial (e.g. text in the UI).  Instead, we 
refactored all of the code and the REST endpoints to reflect these new concepts.&lt;/p&gt;

&lt;h3 id=&quot;plugin-support&quot;&gt;Plugin Support&lt;/h3&gt;

&lt;p&gt;We already had interesting support for plugins, but now we’ve gone further and made it much
easier to find, install, test, and upgrade apiman plugins.  There’s a new Administration UI
where you can see a list of available plugins and easily install them.  If you are creating
your own plugin you can easily reload and/or uninstall plugins to make it easier to test your
changes.  And finally, if your plugin version ends with &lt;em&gt;-SNAPSHOT&lt;/em&gt; then apiman will 
automatically reload the plugin every time it is used.  This makes it VERY easy to iterate on
the plugin code and see the results quickly, without doing anything in the UI and without
restarting apiman!&lt;/p&gt;

&lt;h3 id=&quot;importexport&quot;&gt;Import/Export&lt;/h3&gt;

&lt;p&gt;One of the really nice new features in &lt;em&gt;1.2.x&lt;/em&gt; is the ability to export your apiman configuration
to a file, which can later be imported into a different apiman system.  This feature is
designed to satisfy the following use-cases:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Backing up your apiman data&lt;/li&gt;
  &lt;li&gt;Migrating apiman data from a &lt;em&gt;Test&lt;/em&gt; environment to a &lt;em&gt;Production&lt;/em&gt; environment&lt;/li&gt;
  &lt;li&gt;Upgrading to a newer version of apiman&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ll follow up this blog post with one that goes into this feature in more depth.&lt;/p&gt;

&lt;h2 id=&quot;what-happened-to-120final&quot;&gt;What happened to 1.2.0.Final?&lt;/h2&gt;

&lt;p&gt;You know what, don’t even worry about it.&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description>
				
					<category term="apiman" />
				
				<pubDate>Fri, 22 Jan 2016 06:30:00 -0500</pubDate>
				<link>http://apiman.io/blog/apiman/2016/01/22/release-1.2.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/apiman/2016/01/22/release-1.2.html</guid>
			</item>
		
		
			<item>
				<title>The More You Know: apiman micro-services?</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				
				<description>&lt;p&gt;Let’s spend a little bit of time learning more about one of the newer ways you
can run apiman:  as a set of micro-services.&lt;/p&gt;

&lt;p&gt;Running apiman in this way has several advantages, including (but not limited to):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fast startup time&lt;/li&gt;
  &lt;li&gt;Fully decoupled&lt;/li&gt;
  &lt;li&gt;Easily debuggable from an IDE&lt;/li&gt;
  &lt;li&gt;Quick to test different configurations&lt;/li&gt;
  &lt;li&gt;Independently scale (esp. via fabric8/openshift/kubernetes)&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;p&gt;On the other hand, breaking everything apart has some disadvantages as well.
Some of these include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Need to fire up multiple, separate Java processes&lt;/li&gt;
  &lt;li&gt;No authentication integration with Keycloak out of the box&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-are-they&quot;&gt;What are they?&lt;/h2&gt;
&lt;p&gt;What do we mean by “apiman micro-services”?  Well, by default if you download 
apiman from the &lt;a href=&quot;http://apiman.io/&quot;&gt;project site&lt;/a&gt;, you’ll get everything delivered
to you in one convenient package.  This package extracts into an existing WildFly
installation, and thus everything runs as a web application within the application
server.  This is very convenient to evaluate the software, but it’s not ideal for
development or for dockerizing.&lt;/p&gt;

&lt;p&gt;In addition to our support for WildFly and EAP, we also now support simply running
the various components of apiman as standalone Java applications.  You can find 
the specific source modules that provide this functionality here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apiman/apiman/tree/master/manager/api/micro&quot;&gt;API Manager Micro-Service (source)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apiman/apiman/tree/master/gateway/platforms/war/micro&quot;&gt;API Gateway Micro-Service (source)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These two modules provide Java classes which use an embedded version of Jetty to 
start up the API Manager and API Gateway as simple standalone Java processes.  Each
micro-service includes a Starter class with a Java main method.  Both micro-services
are designed to be easily extensible/customizable to fit whatever purpose or 
configuration is desired.&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-use-them&quot;&gt;How do I use them?&lt;/h2&gt;
&lt;p&gt;As I mentioned, the micro-services are intended to be extended and customized.  So
you could create a new maven project and add the specific apiman micro service
module as a dependency and then….&lt;/p&gt;

&lt;p&gt;OK I probably lost you already.  It’s actually not very hard, so here’s a whole
github repository full of examples:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apiman/apiman-servers&quot;&gt;https://github.com/apiman/apiman-servers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each of the modules in there is a very simple pre-baked and configured micro-service
based on what apiman provides.  So for example, if you want to run an Elasticsearch
version of the API Gateway along with a Postgres version of the API Manager, you 
could follow these two sets of directions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apiman/apiman-servers/blob/master/gateway-es/README.md&quot;&gt;API Gateway micro-service with Elastic&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apiman/apiman-servers/blob/master/manager-postgres/README.md&quot;&gt;API Manager micro-service with Postgres&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you run both of these at the same time, you will end up with two entirely separate
Java processes running embedded Jetty and listening on different ports.&lt;/p&gt;

&lt;h2 id=&quot;what-about-the-api-manager-ui&quot;&gt;What about the API Manager UI?&lt;/h2&gt;
&lt;p&gt;There are two ways you can access the API Manager User Interface.  The first is that
it’s built into the API Manager micro-service!  Once you have the Manager micro-service
running, you should be able to go here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://localhost:8080/apimanui/&quot;&gt;http://localhost:8080/apimanui/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;using-gulp-development-only&quot;&gt;Using gulp (development only)&lt;/h3&gt;
&lt;p&gt;If you’re looking to use the micro-services to make it easier to do development
work on apiman, then you might find yourself needing to modify the User Interface.
You can do this by running “gulp” in the UI module of the apiman source tree:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/git/apiman/manager/ui/hawtio/
ewittman@falcon ~/git/apiman/apiman/manager/ui/hawtio
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gulp
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Using gulpfile ~/git/apiman/apiman/manager/ui/hawtio/gulpfile.js
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;build&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;browserify&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;css&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;fonts&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;images&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;build&amp;#39;&lt;/span&gt; after &lt;span class=&quot;m&quot;&gt;58&lt;/span&gt; ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;watch&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;watch&amp;#39;&lt;/span&gt; after &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;connect&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;connect&amp;#39;&lt;/span&gt; after &lt;span class=&quot;m&quot;&gt;49&lt;/span&gt; ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;default&amp;#39;&lt;/span&gt; after &lt;span class=&quot;m&quot;&gt;126&lt;/span&gt; ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Server started http://localhost:2772
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:30&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;css&amp;#39;&lt;/span&gt; after &lt;span class=&quot;m&quot;&gt;589&lt;/span&gt; ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:37&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;images&amp;#39;&lt;/span&gt; after 7.49 s
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:41&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;fonts&amp;#39;&lt;/span&gt; after &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt; s
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:41&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;browserify&amp;#39;&lt;/span&gt; after &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt; s
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:41&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;path-adjust&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:41&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;path-adjust&amp;#39;&lt;/span&gt; after &lt;span class=&quot;m&quot;&gt;38&lt;/span&gt; ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:41&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;clean-defs&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:41&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;clean-defs&amp;#39;&lt;/span&gt; after 7.87 ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:41&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;tsc&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:45&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;tsc&amp;#39;&lt;/span&gt; after 4.19 s
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:45&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;template&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:45&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;template&amp;#39;&lt;/span&gt; after &lt;span class=&quot;m&quot;&gt;132&lt;/span&gt; ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:45&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;concat&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:45&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;concat&amp;#39;&lt;/span&gt; after &lt;span class=&quot;m&quot;&gt;72&lt;/span&gt; ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:45&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;clean&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:45&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;clean&amp;#39;&lt;/span&gt; after 8.82 ms&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once you have the API Manager micro-service &lt;em&gt;and&lt;/em&gt; gulp running, you should be
able to access the UI by going here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://localhost:2772/api-manager&quot;&gt;http://localhost:2772/api-manager&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;warning-authentication&quot;&gt;Warning: Authentication&lt;/h2&gt;
&lt;p&gt;At the moment, the biggest problem with the micro-services is the issue of user
authentication.  Currently, only very simple BASIC authentication is supported.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It’s always tricky talking about authentication with apiman - but in this context
I’m referring to authenticating into the apiman UI and REST services.  All of the
authentication related &lt;em&gt;Policies&lt;/em&gt; will work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The micro-services allow you to specify your own users.list file, which should
include the static set of users you wish to allow access.  In the future, we will
be improving the micro-services to support other authentication mechanisms.  Note
that you can do this yourself by overriding this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apiman/apiman/blob/master/gateway/platforms/war/micro/src/main/java/io/apiman/gateway/platforms/war/micro/GatewayMicroService.java#L319-L332&quot;&gt;Gateway Micro-Service Authentication Handler+Filter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apiman/apiman/blob/master/manager/api/micro/src/main/java/io/apiman/manager/api/micro/ManagerApiMicroService.java#L192-L211&quot;&gt;Manager Micro-Service Authentication Handler+Filter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good luck and come find us on the mailing list or IRC if you have any trouble!&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description>
				
					<category term="micro-services" />
				
					<category term="development" />
				
				<pubDate>Thu, 12 Nov 2015 08:30:00 -0500</pubDate>
				<link>http://apiman.io/blog/micro-services/development/2015/11/12/micro-services.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/micro-services/development/2015/11/12/micro-services.html</guid>
			</item>
		
		
			<item>
				<title>apiman Limiting Policies</title>
				
				        <dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author>
				
				<description>&lt;p&gt;In this, the sixth article in the series on apiman, JBoss’ new API Management framework, we’ll examine how apiman enables you to govern access to managed APIs through the use of rate limiting policies.&lt;/p&gt;

&lt;p&gt;The runtime core of apiman is the API Gateway and the policies that it applies to incoming requests to APIs. apiman is configured out of the box with a variety of policies that can be used to govern access to APIs managed by the API Gateway based on IP address, user authentication, and usage levels. From its first release, apiman has supported rate limiting policies, where the upper limit for use of an API could be governed by a policy. In its new 1.1.6 release, apiman has expanded this support to include quota based limiting policies.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;types-of-limiting-policies&quot;&gt;Types of Limiting Policies&lt;/h2&gt;

&lt;p&gt;As of release 1.1.6, apiman supports these types of limiting policies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rate Limiting - This policy type governs the number of times requests are made to an API within a specified time period. The requests can be filtered by user, client app, or API and can set the level of granularity for the time period to second, minute, hour, day, month, or year. The intended use of this policy type is for fine grained processing (e.g., 10 requests per second).&lt;/li&gt;
  &lt;li&gt;Quota - This policy type performs the same basic functionality as the Rate Limiting policy type., however, the intended use of this policy type is for less fine grained processing (e.g., 10,000 requests per month).&lt;/li&gt;
  &lt;li&gt;Transfer Quota - In contrast to the other policy types, Transfer Quota tracks the number of bytes transferred (either uploaded or downloaded) rather than the total number of requests made.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these policies, if used singly, can be effective in throttling requests. apiman, however, adds an additional layer of flexibility to your use of these policy types by enabling you to use them in combinations. Let’s look at a few examples.&lt;/p&gt;

&lt;h2 id=&quot;combinations-of-limiting-policies--flexibility&quot;&gt;Combinations of Limiting Policies = Flexibility&lt;/h2&gt;

&lt;p&gt;Limiting the total number of API requests within a period of time, is a straightforward task as this can be configured in a quota policy. This policy, however, may not have the desired effect as the quota may be reached early in the defined time period. If this happens, the requests made to the API during the remainder of the time period will be blocked by the policy. A better way to deal with a situation like this is to implement a more flexible approach where the monthly quota policy is combined with a fine grained rate limiting policy that will act as a throttle on the traffic.&lt;/p&gt;

&lt;p&gt;To illustrate, there are about 2.5 million seconds in a month. If we want to set the API request quota for a month to .5 million, then we can also set a rate limit policy to a limit of 5 requests per second to ensure that API requests are throttled and the API can be accessed throughout the entire month.&lt;/p&gt;

&lt;p&gt;Here’s a visual view of a rate limiting policy based on a time period of one week. If we define a weekly quota, there is no guarantee that users will not consume that quota before the week is over. This will result in an API requests being denied at the end of the week:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-08-17/rate_limit1-redux.png&quot; alt=&quot;rate limit coarse grain&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In contrast, if we augment the weekly quota with a more fine grained policy, we can maintain the API’s ability to respond to requests throughout the week:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-08-17/rate_limit2-redux.png&quot; alt=&quot;rate limit fine grain&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The ability to throttle API requests based on API request counts and bytes transferred provides even greater flexibility in implementing policies. APIs that transfer larger amounts of data, but rely on fewer API requests can have that data transfer throttled on a per byte basis. For example, an API that is data intensive, will return a large amount of data in response to each API request. The API may only receive a request a few hundreds of times a day, but each request may result in several megabytes of data being transferred. Let’s say that we want to limit the amount of data transferred to 6GB per hour. For this type of API, we could set a rate limiting policy to allow for one request per minute, and then augment that policy with a transfer quota policy of 100Mb per hour.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;When you configure limiting policies with apiman, it’s important to remember that the limits you set can not only function as hard limits for API requests, they can also be used to throttle API requests. This throttling gives you the flexibility to control the level of incoming API requests over a period of time that you designate in the policies without blocking all incoming API requests. The flexibility that apiman provides you in configuring limiting policies is further enhanced by its support for you to create combinations of limiting policies. These combined policies work together to give you both coarse grained and fine grained control over incoming API requests.&lt;/p&gt;

&lt;h2 id=&quot;author-acknowledgements&quot;&gt;Author Acknowledgements&lt;/h2&gt;

&lt;p&gt;As always, the author would like to acknowledge Eric Wittmann, and the apiman team for their review comments and suggestions on writing this article!&lt;/p&gt;
</description>
				
					<category term="policies" />
				
				<pubDate>Mon, 17 Aug 2015 07:00:00 -0400</pubDate>
				<link>http://apiman.io/blog/policies/2015/08/17/limiting-policies-redux.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/policies/2015/08/17/limiting-policies-redux.html</guid>
			</item>
		
		
			<item>
				<title>apiman Limiting Policies</title>
				
				        <dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author>
				
				<description>&lt;p&gt;In this, the sixth article in the series on apiman, JBoss’ new API Management framework, we’ll examine how apiman enables you to govern access to managed services through the use of rate limiting policies.&lt;/p&gt;

&lt;p&gt;The runtime core of apiman is the API Gateway and the policies that it applies to incoming requests to services. apiman is configured out of the box with a variety of policies that can be used to govern access to services managed by the API Gateway based on IP address, user authentication, and usage levels. From its first release, apiman has supported rate limiting policies, where the upper limit for use of a service could be governed by a policy. In its new 1.1.6 release, apiman has expanded this support to include quota based limiting policies.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;types-of-limiting-policies&quot;&gt;Types of Limiting Policies&lt;/h2&gt;

&lt;p&gt;As of release 1.1.6, apiman supports these types of limiting policies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rate Limiting - This policy type governs the number of times requests are made to a service within a specified time period. The requests can be filtered by user, application, or service and can set the level of granularity for the time period to second, minute, hour, day, month, or year. The intended use of this policy type is for fine grained processing (e.g., 10 requests per second).&lt;/li&gt;
  &lt;li&gt;Quota - This policy type performs the same basic functionality as the Rate Limiting policy type., however, the intended use of this policy type is for less fine grained processing (e.g., 10,000 requests per month).&lt;/li&gt;
  &lt;li&gt;Transfer Quota - In contrast to the other policy types, Transfer Quota tracks the number of bytes transferred (either uploaded or downloaded) rather than the total number of requests made.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these policies, if used singly, can be effective in throttling requests. apiman, however, adds an additional layer of flexibility to your use of these policy types by enabling you to use them in combinations. Let’s look at a few examples.&lt;/p&gt;

&lt;h2 id=&quot;combinations-of-limiting-policies--flexibility&quot;&gt;Combinations of Limiting Policies = Flexibility&lt;/h2&gt;

&lt;p&gt;Limiting the total number of service requests within a period of time, is a straightforward task as this can be configured in a quota policy. This policy, however, may not have the desired effect as the quota may be reached early in the defined time period. If this happens, the requests made to the service during the remainder of the time period will be blocked by the policy. A better way to deal with a situation like this is to implement a more flexible approach where the monthly quota policy is combined with a fine grained rate limiting policy that will act as a throttle on the traffic.&lt;/p&gt;

&lt;p&gt;To illustrate, there are about 2.5 million seconds in a month. If we want to set the service request quota for a month to .5 million, then we can also set a rate limit policy to a limit of 5 requests per second to ensure that service requests are throttled and the service can be accessed throughout the entire month.&lt;/p&gt;

&lt;p&gt;Here’s a visual view of a rate limiting policy based on a time period of one week. If we define a weekly quota, there is no guarantee that users will not consume that quota before the week is over. This will result in a service requests being denied at the end of the week:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-08-17/rate_limit1.png&quot; alt=&quot;rate limit coarse grain&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In contrast, if we augment the weekly quota with a more fine grained policy, we can maintain the service’s ability to respond to requests throughout the week:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-08-17/rate_limit2.png&quot; alt=&quot;rate limit fine grain&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The ability to throttle service requests based on service request counts and bytes transferred provides even greater flexibility in implementing policies. Services that transfer larger amounts of data, but rely on fewer service requests can have that data transfer throttled on a per byte basis. For example, a service that is data intensive, will return a large amount of data in response to each service request. The service may only receive a request a few hundreds of times a day, but each request may result in several megabytes of data being transferred. Let’s say that we want to limit the amount of data transferred to 6GB per hour. For this type of service, we could set a rate limiting policy to allow for one request per minute, and then augment that policy with a transfer quota policy of 100Mb per hour.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;When you configure limiting policies with apiman, it’s important to remember that the limits you set can not only function as hard limits for service requests, they can also be used to throttle service request. This throttling gives you the flexibility to control the level of incoming service requests over a period of time that you designate in the policies without blocking all incoming service requests. The flexibility that apiman provides you in configuring limiting policies is further enhanced by its support for you to create combinations of limiting policies. These combined policies work together to give you both coarse grained and fine grained control over incoming service requests.&lt;/p&gt;

&lt;h2 id=&quot;author-acknowledgements&quot;&gt;Author Acknowledgements&lt;/h2&gt;

&lt;p&gt;As always, the author would like to acknowledge Eric Wittmann, and the apiman team for their review comments and suggestions on writing this article!&lt;/p&gt;
</description>
				
					<category term="policies" />
				
				<pubDate>Mon, 17 Aug 2015 07:00:00 -0400</pubDate>
				<link>http://apiman.io/blog/policies/2015/08/17/limiting-policies.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/policies/2015/08/17/limiting-policies.html</guid>
			</item>
		
		
			<item>
				<title>apiman Policy and Endpoint Security</title>
				
				        <dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author>
				
				<description>&lt;p&gt;In this, the fifth article in the series on apiman, JBoss’ new API Management framework, we’ll examine how apiman enables you to provide security for your managed APIs at the policy level, and and at the endpoint level for its managed and unmanaged endpoints.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;unintentionally-insecure&quot;&gt;Unintentionally Insecure?&lt;/h2&gt;

&lt;p&gt;If you read the first article in this series closely (https://dzone.com/articles/impatient-new-users) you might have noticed that in the course of creating an API whose endpoint was managed by the apiman API Gateway, we also inadvertently left that API in a very insecure state as unauthorized client apps could bypass the gateway and access the API directly.  We discussed how to configure authentication in a policy for the managed API endpoint in the most recent post in this series (https://dzone.com/articles/adding-basic-authentication). This authentication policy provides username/password security for clients as they access the managed API through the API Gateway, but it does not protect the API from unauthorized access attempts that bypass the Gateway completely. To make the API secure from unauthorized client apps, endpoint level security should also be configured.&lt;/p&gt;

&lt;p&gt;In this article, we’ll examine both apiman policy level and endpoint level security, how they compare, and how they differ.&lt;/p&gt;

&lt;h2 id=&quot;complementary-types-of-security-provided-by-apiman&quot;&gt;Complementary Types of Security Provided by apiman&lt;/h2&gt;

&lt;p&gt;The best way to start our discussion of the different, but complementary types of security that we’ll examine in this article is with a diagram. The nodes involved are the client apps that will access our APIs, the apiman API Gateway, and the servers that host our APIs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-08-03/apiman_security-redux.png&quot; alt=&quot;apiman logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s work our way through the diagram from left to right and start by taking a look at Policy Level Security.&lt;/p&gt;

&lt;h2 id=&quot;policy-level-security&quot;&gt;Policy Level Security&lt;/h2&gt;

&lt;p&gt;apiman includes several pre-defined policies OOTB. The policies provide support for controlling access to APIs based on the rate at which the APIs are invoked, the IP address of the client apps that access the APIs, authorization, and authentication. In the most recent article in this series, we showed how to configure an authentication policy. To keep things simple, we chose BASIC authentication. This BASIC Authentication policy provides security for the communication channel between the client apps and the apiman API Gateway. An incoming request to the API Gateway from a client initiates the policy chain, the policy is applied and the client is requested to supply a username and password.  The level of security provided by this policy can be enhanced if the policy is configured with SSL encryption.&lt;/p&gt;

&lt;p&gt;But, this policy level security only secures the left side of the diagram, that is the communication channel between the client apps and the API Gateway. In this communication channel, the client apps play the role of the client, and the API Gateway plays the role of the server.&lt;/p&gt;

&lt;p&gt;We also want to secure the right side of the diagram, where the API Gateway plays the role of a client, and the APIs play the role of the servers.&lt;/p&gt;

&lt;p&gt;(It’s also worth noting that while policy security protects the managed API, it does nothing to protect the unmanaged API as this API can be reached directly, without going through the API Gateway. This is illustrated by the red line in the diagram. So, while access to the managed API through the apiman API Gateway is secure, policy security does not secure the unmanaged API endpoint.)&lt;/p&gt;

&lt;h2 id=&quot;endpoint-level-security&quot;&gt;Endpoint Level Security&lt;/h2&gt;

&lt;p&gt;In contrast to policy level security, with endpoint security we are securing the right side of the diagram.&lt;/p&gt;

&lt;p&gt;A recent post by Marc Savy to the apiman blog &lt;a href=&quot;http://www.apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/2015/06/16/mtls-mutual-auth.html&quot;&gt;http://www.apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/2015/06/16/mtls-mutual-auth.html&lt;/a&gt; described how to configure Mutually Authenticated TLS (Transport Layer Security) between the API Gateway and the managed APIs. With Mutual TLS, bi-direction authentication is configured so that the identities of both the client and server are verified before a connection can be made.&lt;/p&gt;

&lt;p&gt;In setting up Mutual TLS, keystores, containing a node’s private key, and truststores, containing public certificates to govern the other nodes that the node should trust, were created. The API Gateway was configured in its apiman.properties file to reference the keystores and truststores.  The API was configured with mutual authentication by setting the API Security dropdown in the Implementation tab to MTLS/Two-Way-SSL. Finally, the API was programmed with mutual authentication enabled. With Mutual TLS configured, the communication channel on the right side of the diagram, from the API Gateway to the APIs, was made secure.&lt;/p&gt;

&lt;p&gt;We should also note that, unlike policy security, endpoint security also secures the APIs from attempts to bypass the API Gateway. With Mutual TLS, a two-way trust pattern is created. The API Gateway trusts the APIs and the APIs trust the API Gateway. The APIs, however, do not trust the client apps. As is shown by the large “X” character that indicates that a client app cannot bypass the API Gateway and access the APIs directly.&lt;/p&gt;

&lt;p&gt;One last point that is important to remember is that the endpoint level of security applies to all requests made to the APIs, regardless of whatever policies are configured.&lt;/p&gt;

&lt;h2 id=&quot;compare-and-contrast&quot;&gt;Compare and Contrast&lt;/h2&gt;

&lt;p&gt;To summarize, the differences between policy level security and endpoint level security are:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Policy Level Security&lt;/th&gt;
      &lt;th&gt;End Point Level Security&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Secures communications between the client apps (clients) and API Gateway (server)&lt;/td&gt;
      &lt;td&gt;Secures communications between the API Gateway (client) and APIs (servers)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Configured in an API Gateway policy&lt;/td&gt;
      &lt;td&gt;Configured for the API Gateway as a whole in apiman.properties and with key/certificates infrastructure&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Applied by the policy at runtime&lt;/td&gt;
      &lt;td&gt;Applied for all API requests, regardless of the policies configured for an API&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Does not secure the unmanaged API from access by unauthorized clients&lt;/td&gt;
      &lt;td&gt;Secures the unmanaged API endpoints from access by unauthorized clients&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;author-acknowledgements&quot;&gt;Author Acknowledgements&lt;/h2&gt;

&lt;p&gt;As always, the author would like to acknowledge Marc Savy, Eric Wittmann, and the apiman team for their review comments and suggestions on writing this article!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/2015/06/16/mtls-mutual-auth.html&quot;&gt;http://www.apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/2015/06/16/mtls-mutual-auth.html&lt;/a&gt; (written by Marc Savy)&lt;/li&gt;
  &lt;li&gt;https://dzone.com/articles/adding-basic-authentication&lt;/li&gt;
&lt;/ul&gt;
</description>
				
					<category term="security" />
				
				<pubDate>Mon, 03 Aug 2015 07:00:00 -0400</pubDate>
				<link>http://apiman.io/blog/security/2015/08/03/policy-endpoint-security-redux.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/security/2015/08/03/policy-endpoint-security-redux.html</guid>
			</item>
		
		
			<item>
				<title>apiman Policy and Endpoint Security</title>
				
				        <dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author>
				
				<description>&lt;p&gt;In this, the fifth article in the series on apiman, JBoss’ new API Management framework, we’ll examine how apiman enables you to provide security for your managed services at the policy level, and and at the endpoint level for its managed and unmanaged endpoints.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;unintentionally-insecure&quot;&gt;Unintentionally Insecure?&lt;/h2&gt;

&lt;p&gt;If you read the first article in this series closely (https://dzone.com/articles/impatient-new-users) you might have noticed that in the course of creating a service whose endpoint was managed by the apiman API Gateway, we also inadvertently left that service in a very insecure state as unauthorized client applications could bypass the gateway and access the service directly.  We discussed how to configure authentication in a policy for the managed service endpoint in the most recent post in this series (https://dzone.com/articles/adding-basic-authentication). This authentication policy provides username/password security for clients as they access the managed service through the API Gateway, but it does not protect the service from unauthorized access attempts that bypass the Gateway completely. To make the service secure from unauthorized client applications, endpoint level security should also be configured.&lt;/p&gt;

&lt;p&gt;In this article, we’ll examine both apiman policy level and endpoint level security, how they compare, and how they differ.&lt;/p&gt;

&lt;h2 id=&quot;complementary-types-of-security-provided-by-apiman&quot;&gt;Complementary Types of Security Provided by apiman&lt;/h2&gt;

&lt;p&gt;The best way to start our discussion of the different, but complementary types of security that we’ll examine in this article is with a diagram. The nodes involved are the client applications that will access our services, the apiman API Gateway, and the servers that host our services:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-08-03/apiman_security.png&quot; alt=&quot;apiman logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s work our way through the diagram from left to right and start by taking a look at Policy Level Security.&lt;/p&gt;

&lt;h2 id=&quot;policy-level-security&quot;&gt;Policy Level Security&lt;/h2&gt;

&lt;p&gt;apiman includes several pre-defined policies OOTB. The policies provide support for controlling access to services based on the rate at which the services are invoked, the IP address of the client applications that access the services, authorization, and authentication. In the most recent article in this series, we showed how to configure an authentication policy. To keep things simple, we chose BASIC authentication. This BASIC Authentication policy provides security for the communication channel between the client applications and the apiman API Gateway. An incoming request to the API Gateway from a client initiates the policy chain, the policy is applied and the client is requested to supply a username and password.  The level of security provided by this policy can be enhanced if the policy is configured with SSL encryption.&lt;/p&gt;

&lt;p&gt;But, this policy level security only secures the left side of the diagram, that is the communication channel between the applications and the API Gateway. In this communication channel, the applications play the role of the client, and the API Gateway plays the role of the server.&lt;/p&gt;

&lt;p&gt;We also want to secure the right side of the diagram, where the API Gateway plays the role of a client, and the services play the role of the servers.&lt;/p&gt;

&lt;p&gt;(It’s also worth noting that while policy security protects the managed service, it does nothing to protect the unmanaged service as this service can be reached directly, without going through the API Gateway. This is illustrated by the red line in the diagram. So, while access to the managed service through the apiman API Gateway is secure, policy security does not secure the unmanaged service endpoint.)&lt;/p&gt;

&lt;h2 id=&quot;endpoint-level-security&quot;&gt;Endpoint Level Security&lt;/h2&gt;

&lt;p&gt;In contrast to policy level security, with endpoint security we are securing the right side of the diagram.&lt;/p&gt;

&lt;p&gt;A recent post by Marc Savy to the apiman blog &lt;a href=&quot;http://www.apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/2015/06/16/mtls-mutual-auth.html&quot;&gt;http://www.apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/2015/06/16/mtls-mutual-auth.html&lt;/a&gt; described how to configure Mutually Authenticated TLS (Transport Layer Security) between the API Gateway and the managed services. With Mutual TLS, bi-direction authentication is configured so that the identities of both the client and server are verified before a connection can be made.&lt;/p&gt;

&lt;p&gt;In setting up Mutual TLS, keystores, containing a node’s private key, and truststores, containing public certificates to govern the other nodes that the node should trust, were created. The API Gateway was configured in its apiman.properties file to reference the keystores and truststores.  The service was configured with mutual authentication by setting the API Security dropdown in the Implementation tab to MTLS/Two-Way-SSL. Finally, the service was programmed with mutual authentication enabled. With Mutual TLS configured, the communication channel on the right side of the diagram, from the API Gateway to the services, was made secure.&lt;/p&gt;

&lt;p&gt;We should also note that, unlike policy security, endpoint security also secures the services from attempts to bypass the API Gateway. With Mutual TLS, a two-way trust pattern is created. The API Gateway trusts the services and the services trust the API Gateway. The services, however, do not trust the client applications. As is shown by the large “X” character that indicates that an application cannot bypass the API Gateway and access the services directly.&lt;/p&gt;

&lt;p&gt;One last point that is important to remember is that the endpoint level of security applies to all requests made to the services, regardless of whatever policies are configured.&lt;/p&gt;

&lt;h2 id=&quot;compare-and-contrast&quot;&gt;Compare and Contrast&lt;/h2&gt;

&lt;p&gt;To summarize, the differences between policy level security and endpoint level security are:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Policy Level Security&lt;/th&gt;
      &lt;th&gt;End Point Level Security&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Secures communications between the applications (clients) and API Gateway (server)&lt;/td&gt;
      &lt;td&gt;Secures communications between the API Gateway (client) and services (servers)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Configured in an API Gateway policy&lt;/td&gt;
      &lt;td&gt;Configured for the API Gateway as a whole in apiman.properties and with key/certificates infrastructure&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Applied by the policy at runtime&lt;/td&gt;
      &lt;td&gt;Applied for all service requests, regardless of the policies configured for a service&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Does not secure the unmanaged service from access by unauthorized clients&lt;/td&gt;
      &lt;td&gt;Secures the unmanaged service endpoints from access by unauthorized clients&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;author-acknowledgements&quot;&gt;Author Acknowledgements&lt;/h2&gt;

&lt;p&gt;As always, the author would like to acknowledge Marc Savy, Eric Wittmann, and the apiman team for their review comments and suggestions on writing this article!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/2015/06/16/mtls-mutual-auth.html&quot;&gt;http://www.apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/2015/06/16/mtls-mutual-auth.html&lt;/a&gt; (written by Marc Savy)&lt;/li&gt;
  &lt;li&gt;https://dzone.com/articles/adding-basic-authentication&lt;/li&gt;
&lt;/ul&gt;
</description>
				
					<category term="security" />
				
				<pubDate>Mon, 03 Aug 2015 07:00:00 -0400</pubDate>
				<link>http://apiman.io/blog/security/2015/08/03/policy-endpoint-security.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/security/2015/08/03/policy-endpoint-security.html</guid>
			</item>
		
		
			<item>
				<title>Plugins - Not Just For Policies Anymore</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				
				<description>&lt;p&gt;As you may know, apiman has long supported custom policies provided by users.  If you
aren’t familiar with apiman plugins, you can find more about them by &lt;a href=&quot;http://www.apiman.io/blog/plugins/policies/development/maven/2015/03/06/custom-policies.html&quot;&gt;clicking here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As of version 1.1.5.Final, plugins are now even more useful.  You can provide custom
implementations of various core apiman system components via plugins.  This allows users
to customize apiman easily, without any changes to the classpath and without rebuilding
the core apiman application.&lt;/p&gt;

&lt;p&gt;In this blog post I’ll explain how it works.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;review-what-is-a-plugin&quot;&gt;Review: What is a plugin?&lt;/h2&gt;
&lt;p&gt;First, here are some good resources you can use to learn more about apiman plugins:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.apiman.io/blog/plugins/policies/development/maven/2015/03/06/custom-policies.html&quot;&gt;Customizing JBoss apiman Through Policy Plugins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.apiman.io/latest/developer-guide.html#_plugins&quot;&gt;apiman Developer Guide: Plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No patience to read those links?  That’s OK - I’ll give you a quick breakdown.&lt;/p&gt;

&lt;p&gt;An apiman plugin is basically a WAR file with one additional required file.  The additional
file is &lt;code&gt;META-INF/apiman/plugin.json&lt;/code&gt; and it contains some meta-data about the plugin.  An
example of a plugin.json file (from the JSONP policy plugin):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;frameworkVersion&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;JSONP Policy Plugin&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;This plugin turns an endpoint into a JSONP compatible endpoint.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;version&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1.1.5.Final&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We chose WAR as the plugin format because it allows all of the file types we need, it
is a well-known structure, and it’s easy to create (e.g. via maven).&lt;/p&gt;

&lt;p&gt;When contributing a custom apiman component via a plugin, all you need is the &lt;code&gt;plugin.json&lt;/code&gt;
file and the java class file(s) that implement the appropriate component interface.  Of
course, because a plugin is a WAR, you can also include any library dependencies your 
component might need.&lt;/p&gt;

&lt;h2 id=&quot;what-are-these-components-are-you-talking-about&quot;&gt;What are these components are you talking about?&lt;/h2&gt;
&lt;p&gt;apiman is made up of a number of components that work together to accomplish the goal of
API Management.  There are two primary pieces of the apiman story:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;API Manager&lt;/li&gt;
  &lt;li&gt;API Gateway&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these consists of its own components.  For example, the API Manager is made up of
the following (not necessarily an exhaustive list):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Storage Component&lt;/li&gt;
  &lt;li&gt;Query Component&lt;/li&gt;
  &lt;li&gt;IDM Component&lt;/li&gt;
  &lt;li&gt;Metrics Accessor Component (consumes metrics data)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the other hand, the API Gateway consists of a separate set of components, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Configuration Registry&lt;/li&gt;
  &lt;li&gt;Rate Limiting Component&lt;/li&gt;
  &lt;li&gt;Shared State Component&lt;/li&gt;
  &lt;li&gt;Metrics Component (produces metrics data)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, the apiman quickstart uses default values for all of these, resulting in
a stable, working system with the following characteristics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Stores API Manager data in a JDBC database&lt;/li&gt;
  &lt;li&gt;Records and queries metrics data via Elasticsearch&lt;/li&gt;
  &lt;li&gt;Stores Gateway configuration information in Infinispan&lt;/li&gt;
  &lt;li&gt;Uses infinispan to share rate limiting state across gateway nodes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are alternative configurations of apiman that you can use without needing to
resort to plugins.  For example, we provide Elasticsearch implementations of many of
the components mentioned above.  So you could easily switch from Infinispan to ES in
the Gateway, if you wanted.  However, if you wish to provide a custom implementation
of something, plugins are now the way to go!&lt;/p&gt;

&lt;h2 id=&quot;example-scenario&quot;&gt;Example Scenario&lt;/h2&gt;
&lt;p&gt;There is a lot you can do now that we support plugin components.  But it’s probably
easiest to explain and understand if we take a simple example scenario.&lt;/p&gt;

&lt;h3 id=&quot;use-mongodb-to-store-gateway-configuration-information&quot;&gt;Use mongodb to store Gateway configuration information&lt;/h3&gt;
&lt;p&gt;If you download the apiman quickstart, the default configuration is to use the built
in WildFly 8 infinispan subsystem to store the API Gateway configuration info.  This
includes all APIs published to the Gateway, and all client apps registered with
it as well.  Perhaps you would rather that data be stored in mongodb?  Since we don’t
have a mongodb implementation of the Gateway Registry, you’ll need to implement it
yourself and bundle it up into a plugin!&lt;/p&gt;

&lt;h3 id=&quot;create-a-apiman-gateway-mongodb-plugin&quot;&gt;Create a apiman-gateway-mongodb plugin&lt;/h3&gt;
&lt;p&gt;I won’t go through the entire process of creating an apiman plugin here, since it is
already well documented (and linked above).  You’ll need a WAR maven project with a
&lt;code&gt;plugin.json&lt;/code&gt; file in the right place, which might look something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;frameworkVersion&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;mongodb plugin&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;This plugin provides a mongodb implementation of the Gateway registry.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;version&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will also need an implementation of the Gateway’s &lt;code&gt;io.apiman.gateway.engine.IRegistry&lt;/code&gt;
interface.  Let’s call it &lt;code&gt;MongoDbRegistry.java&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apiman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.apiman.gateway.engine.async.IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.apiman.gateway.engine.beans.ClientApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.apiman.gateway.engine.beans.Api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.apiman.gateway.engine.beans.ApiContract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.apiman.gateway.engine.beans.ApiRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * An implementation of the {@link IRegistry} interface using mongodb.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MongoDbRegistry&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IRegistry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * Constructor.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * @param config&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MongoDbRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * @see io.apiman.gateway.engine.IRegistry#getContract(io.apiman.gateway.engine.beans.ApiRequest, io.apiman.gateway.engine.async.IAsyncResultHandler)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getContract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ApiContract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * @see io.apiman.gateway.engine.IRegistry#publishApi(io.apiman.gateway.engine.beans.Api, io.apiman.gateway.engine.async.IAsyncResultHandler)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;publishApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Api&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * @see io.apiman.gateway.engine.IRegistry#retireApi(io.apiman.gateway.engine.beans.Api, io.apiman.gateway.engine.async.IAsyncResultHandler)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;retireApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Api&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * @see io.apiman.gateway.engine.IRegistry#registerClientApp(io.apiman.gateway.engine.beans.ClientApp, io.apiman.gateway.engine.async.IAsyncResultHandler)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registerClientApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClientApp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * @see io.apiman.gateway.engine.IRegistry#unregisterClientApp(io.apiman.gateway.engine.beans.ClientApp, io.apiman.gateway.engine.async.IAsyncResultHandler)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unregisterClientApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ClientApp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * @see io.apiman.gateway.engine.IRegistry#getApi(java.lang.String, java.lang.String, java.lang.String, io.apiman.gateway.engine.async.IAsyncResultHandler)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;organizationId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apiId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Api&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Obviously you will want to include any mongodb client libraries you need, and then
implement the actual functionality of the class.  I leave that as an exercise for the
reader.  Note that most of the Gateway components have asynchronous APIs.  If possible
you should attempt to use asynchronous techniques when providing implementations.&lt;/p&gt;

&lt;h3 id=&quot;switching-to-your-custom-implementation-in-apimanproperties&quot;&gt;Switching to your custom implementation in apiman.properties&lt;/h3&gt;
&lt;p&gt;Now you’ve got a component you want to use, and it’s all nicely wrapped up in a shiny
new plugin.  Your next step is to actually use it!  Using a custom component is as
simple as referencing it in the &lt;code&gt;apiman.properties&lt;/code&gt; file.  You’ll need to remove
this line first:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;apiman-gateway.registry=io.apiman.gateway.engine.ispn.InfinispanRegistry&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and then add something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;apiman-gateway.registry=plugin:GROUP_ID:ARTIFACT_ID:VERSION/org.example.apiman.gateway.MongoDbRegistry&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The format of the value of &lt;code&gt;apiman-gateway.registry&lt;/code&gt; is very important - when 
using a plugin you must specify the maven information of your plugin so that 
apiman can locate and download it.  See the apiman documentation for additional
details about how plugins are loaded.&lt;/p&gt;

&lt;p&gt;Note that you can also provide configuration parameters to your component.  That
will obviously be helpful since it will probably need connection details.  So 
really your configuration might look something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;apiman-gateway.registry=plugin:GROUP_ID:ARTIFACT_ID:VERSION/org.example.apiman.gateway.MongoDbRegistry
apiman-gateway.registry.mongo.host=localhost
apiman-gateway.registry.mongo.port=27017
apiman-gateway.registry.mongo.username=sa
apiman-gateway.registry.mongo.password=sa123!
apiman-gateway.registry.mongo.database=apiman&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These configuration options will be passed to your component in its constructor if
your class has a &lt;code&gt;Map&amp;lt;String,String&amp;gt;&lt;/code&gt; constructor.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is a powerful new feature for extending and customizing apiman to better suit
your needs.  Of course we will want to continue offering the most popular component
implementations as a core part of apiman.  However there will always be many more
options than we can easily implement and support.  For this reason we wanted to 
provide an easy way for users (and the apiman community at large) to contribute.&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description>
				
					<category term="api-manager" />
				
					<category term="api-gateway" />
				
					<category term="plugins" />
				
					<category term="development" />
				
					<category term="maven" />
				
				<pubDate>Fri, 24 Jul 2015 10:10:10 -0400</pubDate>
				<link>http://apiman.io/blog/api-manager/api-gateway/plugins/development/maven/2015/07/24/plugin-components-redux.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/api-manager/api-gateway/plugins/development/maven/2015/07/24/plugin-components-redux.html</guid>
			</item>
		
		
			<item>
				<title>Plugins - Not Just For Policies Anymore</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				
				<description>&lt;p&gt;As you may know, apiman has long supported custom policies provided by users.  If you
aren’t familiar with apiman plugins, you can find more about them by &lt;a href=&quot;http://www.apiman.io/blog/plugins/policies/development/maven/2015/03/06/custom-policies.html&quot;&gt;clicking here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As of version 1.1.5.Final, plugins are now even more useful.  You can provide custom
implementations of various core apiman system components via plugins.  This allows users
to customize apiman easily, without any changes to the classpath and without rebuilding
the core apiman application.&lt;/p&gt;

&lt;p&gt;In this blog post I’ll explain how it works.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;review-what-is-a-plugin&quot;&gt;Review: What is a plugin?&lt;/h2&gt;
&lt;p&gt;First, here are some good resources you can use to learn more about apiman plugins:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.apiman.io/blog/plugins/policies/development/maven/2015/03/06/custom-policies.html&quot;&gt;Customizing JBoss apiman Through Policy Plugins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.apiman.io/latest/developer-guide.html#_plugins&quot;&gt;apiman Developer Guide: Plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No patience to read those links?  That’s OK - I’ll give you a quick breakdown.&lt;/p&gt;

&lt;p&gt;An apiman plugin is basically a WAR file with one additional required file.  The additional
file is &lt;code&gt;META-INF/apiman/plugin.json&lt;/code&gt; and it contains some meta-data about the plugin.  An
example of a plugin.json file (from the JSONP policy plugin):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;frameworkVersion&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;JSONP Policy Plugin&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;This plugin turns an endpoint into a JSONP compatible endpoint.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;version&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1.1.5.Final&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We chose WAR as the plugin format because it allows all of the file types we need, it
is a well-known structure, and it’s easy to create (e.g. via maven).&lt;/p&gt;

&lt;p&gt;When contributing a custom apiman component via a plugin, all you need is the &lt;code&gt;plugin.json&lt;/code&gt;
file and the java class file(s) that implement the appropriate component interface.  Of
course, because a plugin is a WAR, you can also include any library dependencies your 
component might need.&lt;/p&gt;

&lt;h2 id=&quot;what-are-these-components-are-you-talking-about&quot;&gt;What are these components are you talking about?&lt;/h2&gt;
&lt;p&gt;apiman is made up of a number of components that work together to accomplish the goal of
API Management.  There are two primary pieces of the apiman story:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;API Manager&lt;/li&gt;
  &lt;li&gt;API Gateway&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these consists of its own components.  For example, the API Manager is made up of
the following (not necessarily an exhaustive list):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Storage Component&lt;/li&gt;
  &lt;li&gt;Query Component&lt;/li&gt;
  &lt;li&gt;IDM Component&lt;/li&gt;
  &lt;li&gt;Metrics Accessor Component (consumes metrics data)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the other hand, the API Gateway consists of a separate set of components, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Configuration Registry&lt;/li&gt;
  &lt;li&gt;Rate Limiting Component&lt;/li&gt;
  &lt;li&gt;Shared State Component&lt;/li&gt;
  &lt;li&gt;Metrics Component (produces metrics data)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, the apiman quickstart uses default values for all of these, resulting in
a stable, working system with the following characteristics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Stores API Manager data in a JDBC database&lt;/li&gt;
  &lt;li&gt;Records and queries metrics data via Elasticsearch&lt;/li&gt;
  &lt;li&gt;Stores Gateway configuration information in Infinispan&lt;/li&gt;
  &lt;li&gt;Uses infinispan to share rate limiting state across gateway nodes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are alternative configurations of apiman that you can use without needing to
resort to plugins.  For example, we provide Elasticsearch implementations of many of
the components mentioned above.  So you could easily switch from Infinispan to ES in
the Gateway, if you wanted.  However, if you wish to provide a custom implementation
of something, plugins are now the way to go!&lt;/p&gt;

&lt;h2 id=&quot;example-scenario&quot;&gt;Example Scenario&lt;/h2&gt;
&lt;p&gt;There is a lot you can do now that we support plugin components.  But it’s probably
easiest to explain and understand if we take a simple example scenario.&lt;/p&gt;

&lt;h3 id=&quot;use-mongodb-to-store-gateway-configuration-information&quot;&gt;Use mongodb to store Gateway configuration information&lt;/h3&gt;
&lt;p&gt;If you download the apiman quickstart, the default configuration is to use the built
in WildFly 8 infinispan subsystem to store the API Gateway configuration info.  This
includes all services published to the Gateway, and all applications registered with
it as well.  Perhaps you would rather that data be stored in mongodb?  Since we don’t
have a mongodb implementation of the Gateway Registry, you’ll need to implement it
yourself and bundle it up into a plugin!&lt;/p&gt;

&lt;h3 id=&quot;create-a-apiman-gateway-mongodb-plugin&quot;&gt;Create a apiman-gateway-mongodb plugin&lt;/h3&gt;
&lt;p&gt;I won’t go through the entire process of creating an apiman plugin here, since it is
already well documented (and linked above).  You’ll need a WAR maven project with a
&lt;code&gt;plugin.json&lt;/code&gt; file in the right place, which might look something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;frameworkVersion&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;mongodb plugin&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;This plugin provides a mongodb implementation of the Gateway registry.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;version&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will also need an implementation of the Gateway’s &lt;code&gt;io.apiman.gateway.engine.IRegistry&lt;/code&gt;
interface.  Let’s call it &lt;code&gt;MongoDbRegistry.java&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apiman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.apiman.gateway.engine.async.IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.apiman.gateway.engine.beans.Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.apiman.gateway.engine.beans.Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.apiman.gateway.engine.beans.ServiceContract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.apiman.gateway.engine.beans.ServiceRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * An implementation of the {@link IRegistry} interface using mongodb.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MongoDbRegistry&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IRegistry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * Constructor.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * @param config&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MongoDbRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * @see io.apiman.gateway.engine.IRegistry#getContract(io.apiman.gateway.engine.beans.ServiceRequest, io.apiman.gateway.engine.async.IAsyncResultHandler)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getContract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceContract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * @see io.apiman.gateway.engine.IRegistry#publishService(io.apiman.gateway.engine.beans.Service, io.apiman.gateway.engine.async.IAsyncResultHandler)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;publishService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * @see io.apiman.gateway.engine.IRegistry#retireService(io.apiman.gateway.engine.beans.Service, io.apiman.gateway.engine.async.IAsyncResultHandler)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;retireService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * @see io.apiman.gateway.engine.IRegistry#registerApplication(io.apiman.gateway.engine.beans.Application, io.apiman.gateway.engine.async.IAsyncResultHandler)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registerApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * @see io.apiman.gateway.engine.IRegistry#unregisterApplication(io.apiman.gateway.engine.beans.Application, io.apiman.gateway.engine.async.IAsyncResultHandler)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unregisterApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * @see io.apiman.gateway.engine.IRegistry#getService(java.lang.String, java.lang.String, java.lang.String, io.apiman.gateway.engine.async.IAsyncResultHandler)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;organizationId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Obviously you will want to include any mongodb client libraries you need, and then
implement the actual functionality of the class.  I leave that as an exercise for the
reader.  Note that most of the Gateway components have asynchronous APIs.  If possible
you should attempt to use asynchronous techniques when providing implementations.&lt;/p&gt;

&lt;h3 id=&quot;switching-to-your-custom-implementation-in-apimanproperties&quot;&gt;Switching to your custom implementation in apiman.properties&lt;/h3&gt;
&lt;p&gt;Now you’ve got a component you want to use, and it’s all nicely wrapped up in a shiny
new plugin.  Your next step is to actually use it!  Using a custom component is as
simple as referencing it in the &lt;code&gt;apiman.properties&lt;/code&gt; file.  You’ll need to remove
this line first:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;apiman-gateway.registry=io.apiman.gateway.engine.ispn.InfinispanRegistry&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and then add something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;apiman-gateway.registry=plugin:GROUP_ID:ARTIFACT_ID:VERSION/org.example.apiman.gateway.MongoDbRegistry&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The format of the value of &lt;code&gt;apiman-gateway.registry&lt;/code&gt; is very important - when 
using a plugin you must specify the maven information of your plugin so that 
apiman can locate and download it.  See the apiman documentation for additional
details about how plugins are loaded.&lt;/p&gt;

&lt;p&gt;Note that you can also provide configuration parameters to your component.  That
will obviously be helpful since it will probably need connection details.  So 
really your configuration might look something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;apiman-gateway.registry=plugin:GROUP_ID:ARTIFACT_ID:VERSION/org.example.apiman.gateway.MongoDbRegistry
apiman-gateway.registry.mongo.host=localhost
apiman-gateway.registry.mongo.port=27017
apiman-gateway.registry.mongo.username=sa
apiman-gateway.registry.mongo.password=sa123!
apiman-gateway.registry.mongo.database=apiman&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These configuration options will be passed to your component in its constructor if
your class has a &lt;code&gt;Map&amp;lt;String,String&amp;gt;&lt;/code&gt; constructor.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is a powerful new feature for extending and customizing apiman to better suit
your needs.  Of course we will want to continue offering the most popular component
implementations as a core part of apiman.  However there will always be many more
options than we can easily implement and support.  For this reason we wanted to 
provide an easy way for users (and the apiman community at large) to contribute.&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description>
				
					<category term="api-manager" />
				
					<category term="api-gateway" />
				
					<category term="plugins" />
				
					<category term="development" />
				
					<category term="maven" />
				
				<pubDate>Fri, 24 Jul 2015 10:10:10 -0400</pubDate>
				<link>http://apiman.io/blog/api-manager/api-gateway/plugins/development/maven/2015/07/24/plugin-components.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/api-manager/api-gateway/plugins/development/maven/2015/07/24/plugin-components.html</guid>
			</item>
		
		
			<item>
				<title>Manage Fuse APIs with apiman</title>
				
				        <dc:creator>Stefan Bunciak</dc:creator>
				        <author>sbunciak@redhat.com</author>
				
				<description>&lt;p&gt;This article aims to provide a short guide on how to get API Management capabilities provided by apiman to work with JBoss Fuse, a lightweight, flexible, integration platform that is based on &lt;a href=&quot;http://camel.apache.org&quot;&gt;Apache Camel&lt;/a&gt;, an implementation of many of the most commonly used enterprise integration patterns (EIP).&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;creating-api-provider-in-jboss-fuse&quot;&gt;Creating API provider in JBoss Fuse&lt;/h1&gt;

&lt;p&gt;The following few steps should quickly get you started with deploying applications into JBoss Fuse. For demonstration purposes I’m using a sample REST application (quickstart) shipped along with Fuse installation. For more information about developing applications for JBoss Fuse inspect the &lt;a href=&quot;http://www.jboss.org/products/fuse/developer-materials/#!project=fuse&quot;&gt;developer materials&lt;/a&gt; and other &lt;a href=&quot;http://www.jboss.org/products/fuse/resources/&quot;&gt;resources&lt;/a&gt; at jboss.org.&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;
&lt;p&gt;To obtain a distribution of JBoss Fuse please visit the JBoss Fuse &lt;a href=&quot;http://www.jboss.org/products/fuse/download/&quot;&gt;download page&lt;/a&gt;.
Installation of JBoss Fuse is very simple, as the only thing you need to do is to unzip the distribution, e.g.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;unzip jboss-fuse-full-6.2.0.redhat-133.zip&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You might also want to enable the default admin user by uncommenting the last line in &lt;code&gt;&amp;lt;fuse_dir&amp;gt;/etc/users.properties&lt;/code&gt;. Without a user configured you won’t be able to log into Fuse management console.&lt;/p&gt;

&lt;h3 id=&quot;server-startup&quot;&gt;Server startup&lt;/h3&gt;

&lt;p&gt;To start Fuse simply execute the following command from &lt;code&gt;&amp;lt;fuse_dir&amp;gt;/bin&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;./fuse&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once JBoss Fuse is loaded proceed by creating a new Fuse Fabric instance. To do that execute &lt;code&gt;fabric:create&lt;/code&gt; command from Fuse CLI:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;JBossFuse:karaf@root&amp;gt; fabric:create&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After Fuse Fabric is up and running, log into Hawt.io management console, it should be by default available at &lt;a href=&quot;http://localhost:8181&quot;&gt;http://localhost:8181&lt;/a&gt;. 
In Fabric perspective, under Containers tabs click on the &lt;em&gt;Create&lt;/em&gt; button to open the &lt;em&gt;Create New Container form&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-07-07/fabric.png&quot; alt=&quot;List of Fabric containers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the &lt;em&gt;Create New Container&lt;/em&gt; page fill in the name you wish to use for your container (e.g. my-rest-container) and be sure to select the ‘rest’ profile for it. This will ensure that Fabric pickups the REST Quickstart and deploys it to this container. Finish the operation by hitting the &lt;em&gt;Create and start container&lt;/em&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-07-07/container.png&quot; alt=&quot;Create Fabric Container&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The container should start automatically right after it has been created and the REST endpoint should become available. If not, select the appropriate container and hit Start. 
You can inspect all the APIs deployed to your Fuse Fabric instance by clicking on &lt;em&gt;APIs&lt;/em&gt; section under the &lt;em&gt;APIs&lt;/em&gt; tab. 
Note the &lt;em&gt;Location&lt;/em&gt; field - that’s the &lt;strong&gt;base url&lt;/strong&gt; the for endpoint implementation. We will use it later in the apiman manager.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-07-07/services.png&quot; alt=&quot;APIs deployed to Fuse Fabric&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is a default user preconfigured so you can verify if the application was successfully deployed. It’s available at &lt;code&gt;&amp;lt;location&amp;gt;/customerservice/customers/123&lt;/code&gt; (e.g. &lt;a href=&quot;http://localhost:8182/cxf/crm/customerservice/customers/123&quot;&gt;http://localhost:8182/cxf/crm/customerservice/customers/123&lt;/a&gt;)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;[sbunciak@sbunciak ~]$ http http://localhost:8182/cxf/crm/customerservice/customers/123
HTTP/1.1 200 OK
Content-Type: application/xml
Date: Tue, 07 Jul 2015 22:17:13 GMT
Server: Jetty(8.1.17.v20150415)
Transfer-Encoding: chunked

&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:Customer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:ns0=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://rest.fabric.quickstarts.fabric8.io/&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:id&amp;gt;&lt;/span&gt;123&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:id&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:name&amp;gt;&lt;/span&gt;John&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:name&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:Customer&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;configure-apiman-to-manage-fuse-endpoint&quot;&gt;Configure apiman to manage Fuse endpoint&lt;/h1&gt;

&lt;p&gt;To install the latest version of apiman follow this &lt;a href=&quot;http://www.apiman.io/latest/download.html&quot;&gt;guide&lt;/a&gt;. The installation process is again very simple, all you need to do is to extract the apiman overlay zip on top of &lt;a href=&quot;http://www.wildfly.org/&quot;&gt;Wildly 8&lt;/a&gt; server.&lt;/p&gt;

&lt;p&gt;After completing the installation, start apiman by executing the following command from &lt;code&gt;&amp;lt;wildfly&amp;gt;/bin&lt;/code&gt; folder:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;./standalone.sh -c standalone-apiman.xml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;quick-public-api-setup&quot;&gt;Quick public API setup&lt;/h3&gt;

&lt;p&gt;For demonstration purposes I’ll be creating a Public API, however in real life you might want to configure different plans, various contracts, etc. 
Please consult the apiman &lt;a href=&quot;http://www.apiman.io/latest/user-guide.html&quot;&gt;user guide&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;In order to manage APIs in apiman you need to create a new Organization to which your APIs will belong. 
You can do that easily in apiman manager, typically available at: &lt;a href=&quot;http://localhost:8080/apimanui&quot;&gt;http://localhost:8080/apimanui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once logged into the apiman manager, locate the Organizations sections on the initial page, select &lt;em&gt;Create a New Organization&lt;/em&gt; link, provide a name and hit &lt;em&gt;Create Organization&lt;/em&gt; button. This will take you to organization details page where you can create a new API by clicking on &lt;em&gt;New API&lt;/em&gt; button under &lt;em&gt;APIs&lt;/em&gt; tab:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-07-07/api.png&quot; alt=&quot;Image: Create API&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will be asked to provide a name and a version for this API. Once the API is successfully created there are few things remaining before you can publish and start using it. 
First, you need to provide an implementation base url on the &lt;em&gt;Implementation&lt;/em&gt; tab. Use the base URL of the REST Quickstart and save your changes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-07-07/implementation.png&quot; alt=&quot;Image: Provide Endpoint Implementation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Second, you may want to apply some policies to this Public API. To do that, go to the Policies tab and configure a policy of your choice. 
I used the Rate Limiting policy to limit usage of this API to 5 per minute:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-07-07/policy.png&quot; alt=&quot;Image: Assign policy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you are all set to make the API public by checking &lt;em&gt;Make this API public&lt;/em&gt; under &lt;em&gt;Plans&lt;/em&gt; tab, saving the changes and clicking the &lt;em&gt;Publish&lt;/em&gt; button (which should be now enabled).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-07-07/publish.png&quot; alt=&quot;Image: Publish API&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After you have published the API, have a look at the &lt;em&gt;Endpoint&lt;/em&gt; tab to look up the URL to be used to invoke this public API:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-07-07/endpoint.png&quot; alt=&quot;Image: Managed API Endpoint&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;testing-your-setup&quot;&gt;Testing your setup&lt;/h1&gt;

&lt;p&gt;Depending on which policy you assinged to the Public API you might experience different behavior. However, if you followed the tutorial and assigned the Rate Limiting policy after reaching the maximum number of allowed requests you will get an output similar to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First request should succeed:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;[sbunciak@sbunciak ~]$ http https://localhost:8443/apiman-gateway/CustomerOrganization/CrmRestApi/1.0/customerservice/customers/123 --verify=no
HTTP/1.1 200 OK
Connection: keep-alive
Content-Type: application/xml
Date: Tue, 07 Jul 2015 21:01:02 GMT
Server: Jetty(8.1.17.v20150415)
Transfer-Encoding: chunked
X-Powered-By: Undertow/1
X-RateLimit-Limit: 5
X-RateLimit-Remaining: 4
X-RateLimit-Reset: 57

&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:Customer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:ns0=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://rest.fabric.quickstarts.fabric8.io/&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:id&amp;gt;&lt;/span&gt;123&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:id&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:name&amp;gt;&lt;/span&gt;John&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:name&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:Customer&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Executing 5 consecutive requests should fail with &lt;code&gt;HTTP 429 Too Many Requests&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;sbunciak@sbunciak ~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;http https://localhost:8443/apiman-gateway/CustomerOrganization/CrmRestApi/1.0/customerservice/customers/123 --verify&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no
HTTP/1.1 &lt;span class=&quot;m&quot;&gt;429&lt;/span&gt; Too Many Requests
Connection: keep-alive
Content-Length: 176
Content-Type: application/json
Date: Tue, &lt;span class=&quot;m&quot;&gt;07&lt;/span&gt; Jul &lt;span class=&quot;m&quot;&gt;2015&lt;/span&gt; 21:00:51 GMT
Server: WildFly/8
X-Policy-Failure-Code: 10005
X-Policy-Failure-Message: Rate limit exceeded.
X-Policy-Failure-Type: Other
X-Powered-By: Undertow/1
X-RateLimit-Limit: 5
X-RateLimit-Remaining: 0
X-RateLimit-Reset: 8

&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;failureCode&amp;quot;&lt;/span&gt;: 10005, 
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;headers&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;X-RateLimit-Limit&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;, 
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;X-RateLimit-Remaining&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;, 
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;X-RateLimit-Reset&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;8&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, 
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;Rate limit exceeded.&amp;quot;&lt;/span&gt;, 
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;responseCode&amp;quot;&lt;/span&gt;: 429, 
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;Other&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
				
					<category term="api" />
				
					<category term="management" />
				
					<category term="jboss" />
				
					<category term="fuse" />
				
				<pubDate>Tue, 07 Jul 2015 11:15:15 -0400</pubDate>
				<link>http://apiman.io/blog/api/management/jboss/fuse/2015/07/07/fuse-apis-redux.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/api/management/jboss/fuse/2015/07/07/fuse-apis-redux.html</guid>
			</item>
		
		
			<item>
				<title>Manage Fuse APIs with apiman</title>
				
				        <dc:creator>Stefan Bunciak</dc:creator>
				        <author>sbunciak@redhat.com</author>
				
				<description>&lt;p&gt;This article aims to provide a short guide on how to get API Management capabilities provided by apiman to work with JBoss Fuse, a lightweight, flexible, integration platform that is based on &lt;a href=&quot;http://camel.apache.org&quot;&gt;Apache Camel&lt;/a&gt;, an implementation of many of the most commonly used enterprise integration patterns (EIP).&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;creating-api-provider-in-jboss-fuse&quot;&gt;Creating API provider in JBoss Fuse&lt;/h1&gt;

&lt;p&gt;The following few steps should quickly get you started with deploying applications into JBoss Fuse. For demonstration purposes I’m using a sample REST application (quickstart) shipped along with Fuse installation. For more information about developing applications for JBoss Fuse inspect the &lt;a href=&quot;http://www.jboss.org/products/fuse/developer-materials/#!project=fuse&quot;&gt;developer materials&lt;/a&gt; and other &lt;a href=&quot;http://www.jboss.org/products/fuse/resources/&quot;&gt;resources&lt;/a&gt; at jboss.org.&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;
&lt;p&gt;To obtain a distribution of JBoss Fuse please visit the JBoss Fuse &lt;a href=&quot;http://www.jboss.org/products/fuse/download/&quot;&gt;download page&lt;/a&gt;.
Installation of JBoss Fuse is very simple, as the only thing you need to do is to unzip the distribution, e.g.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;unzip jboss-fuse-full-6.2.0.redhat-133.zip&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You might also want to enable the default admin user by uncommenting the last line in &lt;code&gt;&amp;lt;fuse_dir&amp;gt;/etc/users.properties&lt;/code&gt;. Without a user configured you won’t be able to log into Fuse management console.&lt;/p&gt;

&lt;h3 id=&quot;server-startup&quot;&gt;Server startup&lt;/h3&gt;

&lt;p&gt;To start Fuse simply execute the following command from &lt;code&gt;&amp;lt;fuse_dir&amp;gt;/bin&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;./fuse&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once JBoss Fuse is loaded proceed by creating a new Fuse Fabric instance. To do that execute &lt;code&gt;fabric:create&lt;/code&gt; command from Fuse CLI:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;JBossFuse:karaf@root&amp;gt; fabric:create&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After Fuse Fabric is up and running, log into Hawt.io management console, it should be by default available at &lt;a href=&quot;http://localhost:8181&quot;&gt;http://localhost:8181&lt;/a&gt;. 
In Fabric perspective, under Containers tabs click on the &lt;em&gt;Create&lt;/em&gt; button to open the &lt;em&gt;Create New Container form&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-07-07/fabric.png&quot; alt=&quot;List of Fabric containers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the &lt;em&gt;Create New Container&lt;/em&gt; page fill in the name you wish to use for your container (e.g. my-rest-container) and be sure to select the ‘rest’ profile for it. This will ensure that Fabric pickups the REST Quickstart and deploys it to this container. Finish the operation by hitting the &lt;em&gt;Create and start container&lt;/em&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-07-07/container.png&quot; alt=&quot;Create Fabric Container&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The container should start automatically right after it has been created and the REST endpoint should become available. If not, select the appropriate container and hit Start. 
You can inspect all the APIs deployed to your Fuse Fabric instance by clicking on &lt;em&gt;APIs&lt;/em&gt; section under the &lt;em&gt;Services&lt;/em&gt; tab. 
Note the &lt;em&gt;Location&lt;/em&gt; field - that’s the &lt;strong&gt;base url&lt;/strong&gt; the for endpoint implementation. We will use it later in the apiman manager.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-07-07/apis.png&quot; alt=&quot;APIs deployed to Fuse Fabric&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is a default user preconfigured so you can verify if the application was successfully deployed. It’s available at &lt;code&gt;&amp;lt;location&amp;gt;/customerservice/customers/123&lt;/code&gt; (e.g. &lt;a href=&quot;http://localhost:8182/cxf/crm/customerservice/customers/123&quot;&gt;http://localhost:8182/cxf/crm/customerservice/customers/123&lt;/a&gt;)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;[sbunciak@sbunciak ~]$ http http://localhost:8182/cxf/crm/customerservice/customers/123
HTTP/1.1 200 OK
Content-Type: application/xml
Date: Tue, 07 Jul 2015 22:17:13 GMT
Server: Jetty(8.1.17.v20150415)
Transfer-Encoding: chunked

&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:Customer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:ns0=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://rest.fabric.quickstarts.fabric8.io/&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:id&amp;gt;&lt;/span&gt;123&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:id&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:name&amp;gt;&lt;/span&gt;John&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:name&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:Customer&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;configure-apiman-to-manage-fuse-endpoint&quot;&gt;Configure apiman to manage Fuse endpoint&lt;/h1&gt;

&lt;p&gt;To install the latest version of apiman follow this &lt;a href=&quot;http://www.apiman.io/latest/download.html&quot;&gt;guide&lt;/a&gt;. The installation process is again very simple, all you need to do is to extract the apiman overlay zip on top of &lt;a href=&quot;http://www.wildfly.org/&quot;&gt;Wildly 8&lt;/a&gt; server.&lt;/p&gt;

&lt;p&gt;After completing the installation, start apiman by executing the following command from &lt;code&gt;&amp;lt;wildfly&amp;gt;/bin&lt;/code&gt; folder:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;./standalone.sh -c standalone-apiman.xml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;quick-public-service-setup&quot;&gt;Quick public service setup&lt;/h3&gt;

&lt;p&gt;For demonstration purposes I’ll be creating a Public Service, however in real life you might want to configure different plans, various contracts, etc. 
Please consult the apiman &lt;a href=&quot;http://www.apiman.io/latest/user-guide.html&quot;&gt;user guide&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;In order to manage APIs in apiman you need to create a new Organization to which your APIs will belong. 
You can do that easily in apiman manager, typically available at: &lt;a href=&quot;http://localhost:8080/apimanui&quot;&gt;http://localhost:8080/apimanui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once logged into the apiman manager, locate the Organizations sections on the initial page, select &lt;em&gt;Create a New Organization&lt;/em&gt; link, provide a name and hit &lt;em&gt;Create Organization&lt;/em&gt; button. This will take you to organization details page where you can create a new Service by clicking on &lt;em&gt;New Service&lt;/em&gt; button under &lt;em&gt;Services&lt;/em&gt; tab:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-07-07/service.png&quot; alt=&quot;Image: Create Service&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will be asked to provide a name and a version for this Service. Once the service is successfully created there are few things remaining before you can publish and start using it. 
First, you need to provide an implementation base url on the &lt;em&gt;Implementation&lt;/em&gt; tab. Use the base URL of the REST Quickstart and save your changes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-07-07/implementation.png&quot; alt=&quot;Image: Provide Endpoint Implementation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Second, you may want to apply some policies to this Public Service. To do that, go to the Policies tab and configure a policy of your choice. 
I used the Rate Limiting policy to limit usage of this service to 5 per minute:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-07-07/policy.png&quot; alt=&quot;Image: Assign policy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you are all set to make the service public by checking &lt;em&gt;Make this service public&lt;/em&gt; under &lt;em&gt;Plans&lt;/em&gt; tab, saving the changes and clicking the &lt;em&gt;Publish&lt;/em&gt; button (which should be now enabled).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-07-07/publish.png&quot; alt=&quot;Image: Publish Service&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After you have published the service, have a look at the &lt;em&gt;Endpoint&lt;/em&gt; tab to look up the URL to be used to invoke this public service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-07-07/endpoint.png&quot; alt=&quot;Image: Managed Service Endpoint&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;testing-your-setup&quot;&gt;Testing your setup&lt;/h1&gt;

&lt;p&gt;Depending on which policy you assinged to the Public Service you might experience different behavior. However, if you followed the tutorial and assigned the Rate Limiting policy after reaching the maximum number of allowed requests you will get an output similar to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First request should succeed:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;[sbunciak@sbunciak ~]$ http https://localhost:8443/apiman-gateway/CustomerOrganization/CrmRestService/1.0/customerservice/customers/123 --verify=no
HTTP/1.1 200 OK
Connection: keep-alive
Content-Type: application/xml
Date: Tue, 07 Jul 2015 21:01:02 GMT
Server: Jetty(8.1.17.v20150415)
Transfer-Encoding: chunked
X-Powered-By: Undertow/1
X-RateLimit-Limit: 5
X-RateLimit-Remaining: 4
X-RateLimit-Reset: 57

&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:Customer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:ns0=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://rest.fabric.quickstarts.fabric8.io/&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:id&amp;gt;&lt;/span&gt;123&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:id&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:name&amp;gt;&lt;/span&gt;John&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:name&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:Customer&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Executing 5 consecutive requests should fail with &lt;code&gt;HTTP 429 Too Many Requests&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;sbunciak@sbunciak ~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;http https://localhost:8443/apiman-gateway/CustomerOrganization/CrmRestService/1.0/customerservice/customers/123 --verify&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no
HTTP/1.1 &lt;span class=&quot;m&quot;&gt;429&lt;/span&gt; Too Many Requests
Connection: keep-alive
Content-Length: 176
Content-Type: application/json
Date: Tue, &lt;span class=&quot;m&quot;&gt;07&lt;/span&gt; Jul &lt;span class=&quot;m&quot;&gt;2015&lt;/span&gt; 21:00:51 GMT
Server: WildFly/8
X-Policy-Failure-Code: 10005
X-Policy-Failure-Message: Rate limit exceeded.
X-Policy-Failure-Type: Other
X-Powered-By: Undertow/1
X-RateLimit-Limit: 5
X-RateLimit-Remaining: 0
X-RateLimit-Reset: 8

&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;failureCode&amp;quot;&lt;/span&gt;: 10005, 
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;headers&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;X-RateLimit-Limit&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;, 
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;X-RateLimit-Remaining&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;, 
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;X-RateLimit-Reset&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;8&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, 
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;Rate limit exceeded.&amp;quot;&lt;/span&gt;, 
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;responseCode&amp;quot;&lt;/span&gt;: 429, 
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;Other&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
				
					<category term="api" />
				
					<category term="management" />
				
					<category term="jboss" />
				
					<category term="fuse" />
				
				<pubDate>Tue, 07 Jul 2015 11:15:15 -0400</pubDate>
				<link>http://apiman.io/blog/api/management/jboss/fuse/2015/07/07/fuse-apis.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/api/management/jboss/fuse/2015/07/07/fuse-apis.html</guid>
			</item>
		
		<lastBuildDate>Wed, 28 Jun 2017 11:19:06 -0400</lastBuildDate>
	</channel>
</rss>
