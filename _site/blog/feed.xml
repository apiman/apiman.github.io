<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
	<channel>
		<title></title>
		<description>The apiman project brings an open source development methodology to API Management, coupling a rich API design &amp; configuration layer with a blazingly fast runtime.  This is the official apiman blog, where we discuss....whatever we&#39;re thinking about!
</description>
		<link>http://apiman.io</link>
		<atom:link href="http://apiman.io/feed.xml" rel="self" type="application/rss+xml" />
		
		
			<item>
				<title>The More You Know: apiman micro-services?</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				
				<description>&lt;p&gt;Let’s spend a little bit of time learning more about one of the newer ways you
can run apiman:  as a set of micro-services.&lt;/p&gt;

&lt;p&gt;Running apiman in this way has several advantages, including (but not limited to):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fast startup time&lt;/li&gt;
  &lt;li&gt;Fully decoupled&lt;/li&gt;
  &lt;li&gt;Easily debuggable from an IDE&lt;/li&gt;
  &lt;li&gt;Quick to test different configurations&lt;/li&gt;
  &lt;li&gt;Independently scale (esp. via fabric8/openshift/kubernetes)&lt;/li&gt;
&lt;/ul&gt;

&lt;!--more--&gt;

&lt;p&gt;On the other hand, breaking everything apart has some disadvantages as well.
Some of these include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Need to fire up multiple, separate Java processes&lt;/li&gt;
  &lt;li&gt;No authentication integration with Keycloak out of the box&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-are-they&quot;&gt;What are they?&lt;/h2&gt;
&lt;p&gt;What do we mean by “apiman micro-services”?  Well, by default if you download 
apiman from the &lt;a href=&quot;http://apiman.io/&quot;&gt;project site&lt;/a&gt;, you’ll get everything delivered
to you in one convenient package.  This package extracts into an existing WildFly
installation, and thus everything runs as a web application within the application
server.  This is very convenient to evaluate the software, but it’s not ideal for
development or for dockerizing.&lt;/p&gt;

&lt;p&gt;In addition to our support for WildFly and EAP, we also now support simply running
the various components of apiman as standalone Java applications.  You can find 
the specific source modules that provide this functionality here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apiman/apiman/tree/master/manager/api/micro&quot;&gt;API Manager Micro-Service (source)&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apiman/apiman/tree/master/gateway/platforms/war/micro&quot;&gt;API Gateway Micro-Service (source)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These two modules provide Java classes which use an embedded version of Jetty to 
start up the API Manager and API Gateway as simple standalone Java processes.  Each
micro-service includes a Starter class with a Java main method.  Both micro-services
are designed to be easily extensible/customizable to fit whatever purpose or 
configuration is desired.&lt;/p&gt;

&lt;h2 id=&quot;how-do-i-use-them&quot;&gt;How do I use them?&lt;/h2&gt;
&lt;p&gt;As I mentioned, the micro-services are intended to be extended and customized.  So
you could create a new maven project and add the specific apiman micro service
module as a dependency and then….&lt;/p&gt;

&lt;p&gt;OK I probably lost you already.  It’s actually not very hard, so here’s a whole
github repository full of examples:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apiman/apiman-servers&quot;&gt;https://github.com/apiman/apiman-servers&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Each of the modules in there is a very simple pre-baked and configured micro-service
based on what apiman provides.  So for example, if you want to run an Elasticsearch
version of the API Gateway along with a Postgres version of the API Manager, you 
could follow these two sets of directions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apiman/apiman-servers/blob/master/gateway-es/README.md&quot;&gt;API Gateway micro-service with Elastic&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apiman/apiman-servers/blob/master/manager-postgres/README.md&quot;&gt;API Manager micro-service with Postgres&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you run both of these at the same time, you will end up with two entirely separate
Java processes running embedded Jetty and listening on different ports.&lt;/p&gt;

&lt;h2 id=&quot;what-about-the-api-manager-ui&quot;&gt;What about the API Manager UI?&lt;/h2&gt;
&lt;p&gt;There are two ways you can access the API Manager User Interface.  The first is that
it’s built into the API Manager micro-service!  Once you have the Manager micro-service
running, you should be able to go here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://localhost:8080/apimanui/&quot;&gt;http://localhost:8080/apimanui/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;using-gulp-development-only&quot;&gt;Using gulp (development only)&lt;/h3&gt;
&lt;p&gt;If you’re looking to use the micro-services to make it easier to do development
work on apiman, then you might find yourself needing to modify the User Interface.
You can do this by running “gulp” in the UI module of the apiman source tree:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/git/apiman/manager/ui/hawtio/
ewittman@falcon ~/git/apiman/apiman/manager/ui/hawtio
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gulp
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Using gulpfile ~/git/apiman/apiman/manager/ui/hawtio/gulpfile.js
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;build&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;browserify&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;css&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;fonts&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;images&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;build&amp;#39;&lt;/span&gt; after &lt;span class=&quot;m&quot;&gt;58&lt;/span&gt; ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;watch&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;watch&amp;#39;&lt;/span&gt; after &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt; ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;connect&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;connect&amp;#39;&lt;/span&gt; after &lt;span class=&quot;m&quot;&gt;49&lt;/span&gt; ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;default&amp;#39;&lt;/span&gt; after &lt;span class=&quot;m&quot;&gt;126&lt;/span&gt; ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:29&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Server started http://localhost:2772
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:30&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;css&amp;#39;&lt;/span&gt; after &lt;span class=&quot;m&quot;&gt;589&lt;/span&gt; ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:37&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;images&amp;#39;&lt;/span&gt; after 7.49 s
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:41&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;fonts&amp;#39;&lt;/span&gt; after &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt; s
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:41&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;browserify&amp;#39;&lt;/span&gt; after &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt; s
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:41&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;path-adjust&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:41&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;path-adjust&amp;#39;&lt;/span&gt; after &lt;span class=&quot;m&quot;&gt;38&lt;/span&gt; ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:41&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;clean-defs&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:41&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;clean-defs&amp;#39;&lt;/span&gt; after 7.87 ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:41&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;tsc&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:45&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;tsc&amp;#39;&lt;/span&gt; after 4.19 s
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:45&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;template&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:45&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;template&amp;#39;&lt;/span&gt; after &lt;span class=&quot;m&quot;&gt;132&lt;/span&gt; ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:45&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;concat&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:45&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;concat&amp;#39;&lt;/span&gt; after &lt;span class=&quot;m&quot;&gt;72&lt;/span&gt; ms
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:45&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Starting &lt;span class=&quot;s1&quot;&gt;&amp;#39;clean&amp;#39;&lt;/span&gt;...
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;14:56:45&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; Finished &lt;span class=&quot;s1&quot;&gt;&amp;#39;clean&amp;#39;&lt;/span&gt; after 8.82 ms&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once you have the API Manager micro-service &lt;em&gt;and&lt;/em&gt; gulp running, you should be
able to access the UI by going here:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://localhost:2772/api-manager&quot;&gt;http://localhost:2772/api-manager&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;warning-authentication&quot;&gt;Warning: Authentication&lt;/h2&gt;
&lt;p&gt;At the moment, the biggest problem with the micro-services is the issue of user
authentication.  Currently, only very simple BASIC authentication is supported.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;It’s always tricky talking about authentication with apiman - but in this context
I’m referring to authenticating into the apiman UI and REST services.  All of the
authentication related &lt;em&gt;Policies&lt;/em&gt; will work.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The micro-services allow you to specify your own users.list file, which should
include the static set of users you wish to allow access.  In the future, we will
be improving the micro-services to support other authentication mechanisms.  Note
that you can do this yourself by overriding this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apiman/apiman/blob/master/gateway/platforms/war/micro/src/main/java/io/apiman/gateway/platforms/war/micro/GatewayMicroService.java#L319-L332&quot;&gt;Gateway Micro-Service Authentication Handler+Filter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/apiman/apiman/blob/master/manager/api/micro/src/main/java/io/apiman/manager/api/micro/ManagerApiMicroService.java#L192-L211&quot;&gt;Manager Micro-Service Authentication Handler+Filter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good luck and come find us on the mailing list or IRC if you have any trouble!&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description>
				
					<category term="micro-services" />
				
					<category term="development" />
				
				<pubDate>Thu, 12 Nov 2015 08:30:00 -0500</pubDate>
				<link>http://apiman.io/blog/micro-services/development/2015/11/12/micro-services.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/micro-services/development/2015/11/12/micro-services.html</guid>
			</item>
		
		
			<item>
				<title>apiman Limiting Policies</title>
				
				        <dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author>
				
				<description>&lt;p&gt;In this, the sixth article in the series on apiman, JBoss’ new API Management framework, we’ll examine how apiman enables you to govern access to managed services through the use of rate limiting policies.&lt;/p&gt;

&lt;p&gt;The runtime core of apiman is the API Gateway and the policies that it applies to incoming requests to services. apiman is configured out of the box with a variety of policies that can be used to govern access to services managed by the API Gateway based on IP address, user authentication, and usage levels. From its first release, apiman has supported rate limiting policies, where the upper limit for use of a service could be governed by a policy. In its new 1.1.6 release, apiman has expanded this support to include quota based limiting policies.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;types-of-limiting-policies&quot;&gt;Types of Limiting Policies&lt;/h2&gt;

&lt;p&gt;As of release 1.1.6, apiman supports these types of limiting policies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Rate Limiting - This policy type governs the number of times requests are made to a service within a specified time period. The requests can be filtered by user, application, or service and can set the level of granularity for the time period to second, minute, hour, day, month, or year. The intended use of this policy type is for fine grained processing (e.g., 10 requests per second).&lt;/li&gt;
  &lt;li&gt;Quota - This policy type performs the same basic functionality as the Rate Limiting policy type., however, the intended use of this policy type is for less fine grained processing (e.g., 10,000 requests per month).&lt;/li&gt;
  &lt;li&gt;Transfer Quota - In contrast to the other policy types, Transfer Quota tracks the number of bytes transferred (either uploaded or downloaded) rather than the total number of requests made.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these policies, if used singly, can be effective in throttling requests. apiman, however, adds an additional layer of flexibility to your use of these policy types by enabling you to use them in combinations. Let’s look at a few examples.&lt;/p&gt;

&lt;h2 id=&quot;combinations-of-limiting-policies--flexibility&quot;&gt;Combinations of Limiting Policies = Flexibility&lt;/h2&gt;

&lt;p&gt;Limiting the total number of service requests within a period of time, is a straightforward task as this can be configured in a quota policy. This policy, however, may not have the desired effect as the quota may be reached early in the defined time period. If this happens, the requests made to the service during the remainder of the time period will be blocked by the policy. A better way to deal with a situation like this is to implement a more flexible approach where the monthly quota policy is combined with a fine grained rate limiting policy that will act as a throttle on the traffic.&lt;/p&gt;

&lt;p&gt;To illustrate, there are about 2.5 million seconds in a month. If we want to set the service request quota for a month to .5 million, then we can also set a rate limit policy to a limit of 5 requests per second to ensure that service requests are throttled and the service can be accessed throughout the entire month.&lt;/p&gt;

&lt;p&gt;Here’s a visual view of a rate limiting policy based on a time period of one week. If we define a weekly quota, there is no guarantee that users will not consume that quota before the week is over. This will result in a service requests being denied at the end of the week:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-08-17/rate_limit1.png&quot; alt=&quot;rate limit coarse grain&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In contrast, if we augment the weekly quota with a more fine grained policy, we can maintain the service’s ability to respond to requests throughout the week:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-08-17/rate_limit2.png&quot; alt=&quot;rate limit fine grain&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The ability to throttle service requests based on service request counts and bytes transferred provides even greater flexibility in implementing policies. Services that transfer larger amounts of data, but rely on fewer service requests can have that data transfer throttled on a per byte basis. For example, a service that is data intensive, will return a large amount of data in response to each service request. The service may only receive a request a few hundreds of times a day, but each request may result in several megabytes of data being transferred. Let’s say that we want to limit the amount of data transferred to 6GB per hour. For this type of service, we could set a rate limiting policy to allow for one request per minute, and then augment that policy with a transfer quota policy of 100Mb per hour.&lt;/p&gt;

&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;

&lt;p&gt;When you configure limiting policies with apiman, it’s important to remember that the limits you set can not only function as hard limits for service requests, they can also be used to throttle service request. This throttling gives you the flexibility to control the level of incoming service requests over a period of time that you designate in the policies without blocking all incoming service requests. The flexibility that apiman provides you in configuring limiting policies is further enhanced by its support for you to create combinations of limiting policies. These combined policies work together to give you both coarse grained and fine grained control over incoming service requests.&lt;/p&gt;

&lt;h2 id=&quot;author-acknowledgements&quot;&gt;Author Acknowledgements&lt;/h2&gt;

&lt;p&gt;As always, the author would like to acknowledge Eric Wittmann, and the apiman team for their review comments and suggestions on writing this article!&lt;/p&gt;

</description>
				
					<category term="policies" />
				
				<pubDate>Mon, 17 Aug 2015 07:00:00 -0400</pubDate>
				<link>http://apiman.io/blog/policies/2015/08/17/limiting-policies.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/policies/2015/08/17/limiting-policies.html</guid>
			</item>
		
		
			<item>
				<title>apiman Policy and Endpoint Security</title>
				
				        <dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author>
				
				<description>&lt;p&gt;In this, the fifth article in the series on apiman, JBoss’ new API Management framework, we’ll examine how apiman enables you to provide security for your managed services at the policy level, and and at the endpoint level for its managed and unmanaged endpoints.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;unintentionally-insecure&quot;&gt;Unintentionally Insecure?&lt;/h2&gt;

&lt;p&gt;If you read the first article in this series closely (https://dzone.com/articles/impatient-new-users) you might have noticed that in the course of creating a service whose endpoint was managed by the apiman API Gateway, we also inadvertently left that service in a very insecure state as unauthorized client applications could bypass the gateway and access the service directly.  We discussed how to configure authentication in a policy for the managed service endpoint in the most recent post in this series (https://dzone.com/articles/adding-basic-authentication). This authentication policy provides username/password security for clients as they access the managed service through the API Gateway, but it does not protect the service from unauthorized access attempts that bypass the Gateway completely. To make the service secure from unauthorized client applications, endpoint level security should also be configured.&lt;/p&gt;

&lt;p&gt;In this article, we’ll examine both apiman policy level and endpoint level security, how they compare, and how they differ.&lt;/p&gt;

&lt;h2 id=&quot;complementary-types-of-security-provided-by-apiman&quot;&gt;Complementary Types of Security Provided by apiman&lt;/h2&gt;

&lt;p&gt;The best way to start our discussion of the different, but complementary types of security that we’ll examine in this article is with a diagram. The nodes involved are the client applications that will access our services, the apiman API Gateway, and the servers that host our services:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-08-03/apiman_security.png&quot; alt=&quot;apiman logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s work our way through the diagram from left to right and start by taking a look at Policy Level Security.&lt;/p&gt;

&lt;h2 id=&quot;policy-level-security&quot;&gt;Policy Level Security&lt;/h2&gt;

&lt;p&gt;apiman includes several pre-defined policies OOTB. The policies provide support for controlling access to services based on the rate at which the services are invoked, the IP address of the client applications that access the services, authorization, and authentication. In the most recent article in this series, we showed how to configure an authentication policy. To keep things simple, we chose BASIC authentication. This BASIC Authentication policy provides security for the communication channel between the client applications and the apiman API Gateway. An incoming request to the API Gateway from a client initiates the policy chain, the policy is applied and the client is requested to supply a username and password.  The level of security provided by this policy can be enhanced if the policy is configured with SSL encryption.&lt;/p&gt;

&lt;p&gt;But, this policy level security only secures the left side of the diagram, that is the communication channel between the applications and the API Gateway. In this communication channel, the applications play the role of the client, and the API Gateway plays the role of the server.&lt;/p&gt;

&lt;p&gt;We also want to secure the right side of the diagram, where the API Gateway plays the role of a client, and the services play the role of the servers.&lt;/p&gt;

&lt;p&gt;(It’s also worth noting that while policy security protects the managed service, it does nothing to protect the unmanaged service as this service can be reached directly, without going through the API Gateway. This is illustrated by the red line in the diagram. So, while access to the managed service through the apiman API Gateway is secure, policy security does not secure the unmanaged service endpoint.)&lt;/p&gt;

&lt;h2 id=&quot;endpoint-level-security&quot;&gt;Endpoint Level Security&lt;/h2&gt;

&lt;p&gt;In contrast to policy level security, with endpoint security we are securing the right side of the diagram.&lt;/p&gt;

&lt;p&gt;A recent post by Marc Savy to the apiman blog &lt;a href=&quot;http://www.apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/2015/06/16/mtls-mutual-auth.html&quot;&gt;http://www.apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/2015/06/16/mtls-mutual-auth.html&lt;/a&gt; described how to configure Mutually Authenticated TLS (Transport Layer Security) between the API Gateway and the managed services. With Mutual TLS, bi-direction authentication is configured so that the identities of both the client and server are verified before a connection can be made.&lt;/p&gt;

&lt;p&gt;In setting up Mutual TLS, keystores, containing a node’s private key, and truststores, containing public certificates to govern the other nodes that the node should trust, were created. The API Gateway was configured in its apiman.properties file to reference the keystores and truststores.  The service was configured with mutual authentication by setting the API Security dropdown in the Implementation tab to MTLS/Two-Way-SSL. Finally, the service was programmed with mutual authentication enabled. With Mutual TLS configured, the communication channel on the right side of the diagram, from the API Gateway to the services, was made secure.&lt;/p&gt;

&lt;p&gt;We should also note that, unlike policy security, endpoint security also secures the services from attempts to bypass the API Gateway. With Mutual TLS, a two-way trust pattern is created. The API Gateway trusts the services and the services trust the API Gateway. The services, however, do not trust the client applications. As is shown by the large “X” character that indicates that an application cannot bypass the API Gateway and access the services directly.&lt;/p&gt;

&lt;p&gt;One last point that is important to remember is that the endpoint level of security applies to all requests made to the services, regardless of whatever policies are configured.&lt;/p&gt;

&lt;h2 id=&quot;compare-and-contrast&quot;&gt;Compare and Contrast&lt;/h2&gt;

&lt;p&gt;To summarize, the differences between policy level security and endpoint level security are:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Policy Level Security&lt;/th&gt;
      &lt;th&gt;End Point Level Security&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Secures communications between the applications (clients) and API Gateway (server)&lt;/td&gt;
      &lt;td&gt;Secures communications between the API Gateway (client) and services (servers)&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Configured in an API Gateway policy&lt;/td&gt;
      &lt;td&gt;Configured for the API Gateway as a whole in apiman.properties and with key/certificates infrastructure&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Applied by the policy at runtime&lt;/td&gt;
      &lt;td&gt;Applied for all service requests, regardless of the policies configured for a service&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Does not secure the unmanaged service from access by unauthorized clients&lt;/td&gt;
      &lt;td&gt;Secures the unmanaged service endpoints from access by unauthorized clients&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;author-acknowledgements&quot;&gt;Author Acknowledgements&lt;/h2&gt;

&lt;p&gt;As always, the author would like to acknowledge Marc Savy, Eric Wittmann, and the apiman team for their review comments and suggestions on writing this article!&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/2015/06/16/mtls-mutual-auth.html&quot;&gt;http://www.apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/2015/06/16/mtls-mutual-auth.html&lt;/a&gt; (written by Marc Savy)&lt;/li&gt;
  &lt;li&gt;https://dzone.com/articles/adding-basic-authentication&lt;/li&gt;
&lt;/ul&gt;

</description>
				
					<category term="security" />
				
				<pubDate>Mon, 03 Aug 2015 07:00:00 -0400</pubDate>
				<link>http://apiman.io/blog/security/2015/08/03/policy-endpoint-security.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/security/2015/08/03/policy-endpoint-security.html</guid>
			</item>
		
		
			<item>
				<title>Plugins - Not Just For Policies Anymore</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				
				<description>&lt;p&gt;As you may know, apiman has long supported custom policies provided by users.  If you
aren’t familiar with apiman plugins, you can find more about them by &lt;a href=&quot;http://www.apiman.io/blog/plugins/policies/development/maven/2015/03/06/custom-policies.html&quot;&gt;clicking here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As of version 1.1.5.Final, plugins are now even more useful.  You can provide custom
implementations of various core apiman system components via plugins.  This allows users
to customize apiman easily, without any changes to the classpath and without rebuilding
the core apiman application.&lt;/p&gt;

&lt;p&gt;In this blog post I’ll explain how it works.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;review-what-is-a-plugin&quot;&gt;Review: What is a plugin?&lt;/h2&gt;
&lt;p&gt;First, here are some good resources you can use to learn more about apiman plugins:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.apiman.io/blog/plugins/policies/development/maven/2015/03/06/custom-policies.html&quot;&gt;Customizing JBoss apiman Through Policy Plugins&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.apiman.io/latest/developer-guide.html#_plugins&quot;&gt;apiman Developer Guide: Plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;No patience to read those links?  That’s OK - I’ll give you a quick breakdown.&lt;/p&gt;

&lt;p&gt;An apiman plugin is basically a WAR file with one additional required file.  The additional
file is &lt;code&gt;META-INF/apiman/plugin.json&lt;/code&gt; and it contains some meta-data about the plugin.  An
example of a plugin.json file (from the JSONP policy plugin):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;frameworkVersion&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;JSONP Policy Plugin&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;This plugin turns an endpoint into a JSONP compatible endpoint.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;version&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1.1.5.Final&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We chose WAR as the plugin format because it allows all of the file types we need, it
is a well-known structure, and it’s easy to create (e.g. via maven).&lt;/p&gt;

&lt;p&gt;When contributing a custom apiman component via a plugin, all you need is the &lt;code&gt;plugin.json&lt;/code&gt;
file and the java class file(s) that implement the appropriate component interface.  Of
course, because a plugin is a WAR, you can also include any library dependencies your 
component might need.&lt;/p&gt;

&lt;h2 id=&quot;what-are-these-components-are-you-talking-about&quot;&gt;What are these components are you talking about?&lt;/h2&gt;
&lt;p&gt;apiman is made up of a number of components that work together to accomplish the goal of
API Management.  There are two primary pieces of the apiman story:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;API Manager&lt;/li&gt;
  &lt;li&gt;API Gateway&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Each of these consists of its own components.  For example, the API Manager is made up of
the following (not necessarily an exhaustive list):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Storage Component&lt;/li&gt;
  &lt;li&gt;Query Component&lt;/li&gt;
  &lt;li&gt;IDM Component&lt;/li&gt;
  &lt;li&gt;Metrics Accessor Component (consumes metrics data)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the other hand, the API Gateway consists of a separate set of components, such as:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Configuration Registry&lt;/li&gt;
  &lt;li&gt;Rate Limiting Component&lt;/li&gt;
  &lt;li&gt;Shared State Component&lt;/li&gt;
  &lt;li&gt;Metrics Component (produces metrics data)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;By default, the apiman quickstart uses default values for all of these, resulting in
a stable, working system with the following characteristics:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Stores API Manager data in a JDBC database&lt;/li&gt;
  &lt;li&gt;Records and queries metrics data via Elasticsearch&lt;/li&gt;
  &lt;li&gt;Stores Gateway configuration information in Infinispan&lt;/li&gt;
  &lt;li&gt;Uses infinispan to share rate limiting state across gateway nodes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are alternative configurations of apiman that you can use without needing to
resort to plugins.  For example, we provide Elasticsearch implementations of many of
the components mentioned above.  So you could easily switch from Infinispan to ES in
the Gateway, if you wanted.  However, if you wish to provide a custom implementation
of something, plugins are now the way to go!&lt;/p&gt;

&lt;h2 id=&quot;example-scenario&quot;&gt;Example Scenario&lt;/h2&gt;
&lt;p&gt;There is a lot you can do now taht we support plugin components.  But it’s probably
easiest to explain and understand if we take a simple example scenario.&lt;/p&gt;

&lt;h3 id=&quot;use-mongodb-to-store-gateway-configuration-information&quot;&gt;Use mongodb to store Gateway configuration information&lt;/h3&gt;
&lt;p&gt;If you download the apiman quickstart, the default configuration is to use the built
in WildFly 8 infinispan subsystem to store the API Gateway configuration info.  This
includes all services published to the Gateway, and all applications registered with
it as well.  Perhaps you would rather that data be stored in mongodb?  Since we don’t
have a mongodb implementation of the Gateway Registry, you’ll need to implement it
yourself and bundle it up into a plugin!&lt;/p&gt;

&lt;h3 id=&quot;create-a-apiman-gateway-mongodb-plugin&quot;&gt;Create a apiman-gateway-mongodb plugin&lt;/h3&gt;
&lt;p&gt;I won’t go through the entire process of creating an apiman plugin here, since it is
already well documented (and linked above).  You’ll need a WAR maven project with a
&lt;code&gt;plugin.json&lt;/code&gt; file in the right place, which might look something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;frameworkVersion&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;mongodb plugin&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;This plugin provides a mongodb implementation of the Gateway registry.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;version&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You will also need an implementation of the Gateway’s &lt;code&gt;io.apiman.gateway.engine.IRegistry&lt;/code&gt;
interface.  Let’s call it &lt;code&gt;MongoDbRegistry.java&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;example&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apiman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.apiman.gateway.engine.async.IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.apiman.gateway.engine.beans.Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.apiman.gateway.engine.beans.Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.apiman.gateway.engine.beans.ServiceContract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io.apiman.gateway.engine.beans.ServiceRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * An implementation of the {@link IRegistry} interface using mongodb.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MongoDbRegistry&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IRegistry&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * Constructor.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * @param config&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MongoDbRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * @see io.apiman.gateway.engine.IRegistry#getContract(io.apiman.gateway.engine.beans.ServiceRequest, io.apiman.gateway.engine.async.IAsyncResultHandler)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getContract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceContract&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * @see io.apiman.gateway.engine.IRegistry#publishService(io.apiman.gateway.engine.beans.Service, io.apiman.gateway.engine.async.IAsyncResultHandler)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;publishService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * @see io.apiman.gateway.engine.IRegistry#retireService(io.apiman.gateway.engine.beans.Service, io.apiman.gateway.engine.async.IAsyncResultHandler)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;retireService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * @see io.apiman.gateway.engine.IRegistry#registerApplication(io.apiman.gateway.engine.beans.Application, io.apiman.gateway.engine.async.IAsyncResultHandler)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registerApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * @see io.apiman.gateway.engine.IRegistry#unregisterApplication(io.apiman.gateway.engine.beans.Application, io.apiman.gateway.engine.async.IAsyncResultHandler)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unregisterApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     * @see io.apiman.gateway.engine.IRegistry#getService(java.lang.String, java.lang.String, java.lang.String, io.apiman.gateway.engine.async.IAsyncResultHandler)&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;     */&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;organizationId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceVersion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;IAsyncResultHandler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// TODO Auto-generated method stub&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Obviously you will want to include any mongodb client libraries you need, and then
implement the actual functionality of the class.  I leave that as an exercise for the
reader.  Note that most of the Gateway components have asynchronous APIs.  If possible
you should attempt to use asynchronous techniques when providing implementations.&lt;/p&gt;

&lt;h3 id=&quot;switching-to-your-custom-implementation-in-apimanproperties&quot;&gt;Switching to your custom implementation in apiman.properties&lt;/h3&gt;
&lt;p&gt;Now you’ve got a component you want to use, and it’s all nicely wrapped up in a shiny
new plugin.  Your next step is to actually use it!  Using a custom component is as
simple as referencing it in the &lt;code&gt;apiman.properties&lt;/code&gt; file.  You’ll need to remove
this line first:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;apiman-gateway.registry=io.apiman.gateway.engine.ispn.InfinispanRegistry&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and then add something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;apiman-gateway.registry=plugin:GROUP_ID:ARTIFACT_ID:VERSION/org.example.apiman.gateway.MongoDbRegistry&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The format of the value of &lt;code&gt;apiman-gateway.registry&lt;/code&gt; is very important - when 
using a plugin you must specify the maven information of your plugin so that 
apiman can locate and download it.  See the apiman documentation for additional
details about how plugins are loaded.&lt;/p&gt;

&lt;p&gt;Note that you can also provide configuration parameters to your component.  That
will obviously be helpful since it will probably need connection details.  So 
really your configuration might look something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;apiman-gateway.registry=plugin:GROUP_ID:ARTIFACT_ID:VERSION/org.example.apiman.gateway.MongoDbRegistry
apiman-gateway.registry.mongo.host=localhost
apiman-gateway.registry.mongo.port=27017
apiman-gateway.registry.mongo.username=sa
apiman-gateway.registry.mongo.password=sa123!
apiman-gateway.registry.mongo.database=apiman&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These configuration options will be passed to your component in its constructor if
your class has a &lt;code&gt;Map&amp;lt;String,String&amp;gt;&lt;/code&gt; constructor.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;This is a powerful new feature for extending and customizing apiman to better suit
your needs.  Of course we will want to continue offering the most popular component
implementations as a core part of apiman.  However there will always be many more
options than we can easily implement and support.  For this reason we wanted to 
provide an easy way for users (and the apiman community at large) to contribute.&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description>
				
					<category term="api-manager" />
				
					<category term="api-gateway" />
				
					<category term="plugins" />
				
					<category term="development" />
				
					<category term="maven" />
				
				<pubDate>Fri, 24 Jul 2015 10:10:10 -0400</pubDate>
				<link>http://apiman.io/blog/api-manager/api-gateway/plugins/development/maven/2015/07/24/plugin-components.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/api-manager/api-gateway/plugins/development/maven/2015/07/24/plugin-components.html</guid>
			</item>
		
		
			<item>
				<title>Manage Fuse APIs with apiman</title>
				
				        <dc:creator>Stefan Bunciak</dc:creator>
				        <author>sbunciak@redhat.com</author>
				
				<description>&lt;p&gt;This article aims to provide a short guide on how to get API Management capabilities provided by apiman to work with JBoss Fuse, a lightweight, flexible, integration platform that is based on &lt;a href=&quot;http://camel.apache.org&quot;&gt;Apache Camel&lt;/a&gt;, an implementation of many of the most commonly used enterprise integration patterns (EIP).&lt;/p&gt;

&lt;!--more--&gt;

&lt;h1 id=&quot;creating-api-provider-in-jboss-fuse&quot;&gt;Creating API provider in JBoss Fuse&lt;/h1&gt;

&lt;p&gt;The following few steps should quickly get you started with deploying applications into JBoss Fuse. For demonstration purposes I’m using a sample REST application (quickstart) shipped along with Fuse installation. For more information about developing applications for JBoss Fuse inspect the &lt;a href=&quot;http://www.jboss.org/products/fuse/developer-materials/#!project=fuse&quot;&gt;developer materials&lt;/a&gt; and other &lt;a href=&quot;http://www.jboss.org/products/fuse/resources/&quot;&gt;resources&lt;/a&gt; at jboss.org.&lt;/p&gt;

&lt;h3 id=&quot;installation&quot;&gt;Installation&lt;/h3&gt;
&lt;p&gt;To obtain a distribution of JBoss Fuse please visit the JBoss Fuse &lt;a href=&quot;http://www.jboss.org/products/fuse/download/&quot;&gt;download page&lt;/a&gt;.
Installation of JBoss Fuse is very simple, as the only thing you need to do is to unzip the distribution, e.g.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;unzip jboss-fuse-full-6.2.0.redhat-133.zip&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You might also want to enable the default admin user by uncommenting the last line in &lt;code&gt;&amp;lt;fuse_dir&amp;gt;/etc/users.properties&lt;/code&gt;. Without a user configured you won’t be able to log into Fuse management console.&lt;/p&gt;

&lt;h3 id=&quot;server-startup&quot;&gt;Server startup&lt;/h3&gt;

&lt;p&gt;To start Fuse simply execute the following command from &lt;code&gt;&amp;lt;fuse_dir&amp;gt;/bin&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;./fuse&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once JBoss Fuse is loaded proceed by creating a new Fuse Fabric instance. To do that execute &lt;code&gt;fabric:create&lt;/code&gt; command from Fuse CLI:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;JBossFuse:karaf@root&amp;gt; fabric:create&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After Fuse Fabric is up and running, log into Hawt.io management console, it should be by default available at &lt;a href=&quot;http://localhost:8181&quot;&gt;http://localhost:8181&lt;/a&gt;. 
In Fabric perspective, under Containers tabs click on the &lt;em&gt;Create&lt;/em&gt; button to open the &lt;em&gt;Create New Container form&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-07-07/fabric.png&quot; alt=&quot;List of Fabric containers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;On the &lt;em&gt;Create New Container&lt;/em&gt; page fill in the name you wish to use for your container (e.g. my-rest-container) and be sure to select the ‘rest’ profile for it. This will ensure that Fabric pickups the REST Quickstart and deploys it to this container. Finish the operation by hitting the &lt;em&gt;Create and start container&lt;/em&gt; button.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-07-07/container.png&quot; alt=&quot;Create Fabric Container&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The container should start automatically right after it has been created and the REST endpoint should become available. If not, select the appropriate container and hit Start. 
You can inspect all the APIs deployed to your Fuse Fabric instance by clicking on &lt;em&gt;APIs&lt;/em&gt; section under the &lt;em&gt;Services&lt;/em&gt; tab. 
Note the &lt;em&gt;Location&lt;/em&gt; field - that’s the &lt;strong&gt;base url&lt;/strong&gt; the for endpoint implementation. We will use it later in the apiman manager.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-07-07/apis.png&quot; alt=&quot;APIs deployed to Fuse Fabric&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There is a default user preconfigured so you can verify if the application was successfully deployed. It’s available at &lt;code&gt;&amp;lt;location&amp;gt;/customerservice/customers/123&lt;/code&gt; (e.g. &lt;a href=&quot;http://localhost:8182/cxf/crm/customerservice/customers/123&quot;&gt;http://localhost:8182/cxf/crm/customerservice/customers/123&lt;/a&gt;)&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;[sbunciak@sbunciak ~]$ http http://localhost:8182/cxf/crm/customerservice/customers/123
HTTP/1.1 200 OK
Content-Type: application/xml
Date: Tue, 07 Jul 2015 22:17:13 GMT
Server: Jetty(8.1.17.v20150415)
Transfer-Encoding: chunked

&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:Customer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:ns0=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://rest.fabric.quickstarts.fabric8.io/&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:id&amp;gt;&lt;/span&gt;123&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:id&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:name&amp;gt;&lt;/span&gt;John&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:name&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:Customer&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&quot;configure-apiman-to-manage-fuse-endpoint&quot;&gt;Configure apiman to manage Fuse endpoint&lt;/h1&gt;

&lt;p&gt;To install the latest version of apiman follow this &lt;a href=&quot;http://www.apiman.io/latest/download.html&quot;&gt;guide&lt;/a&gt;. The installation process is again very simple, all you need to do is to extract the apiman overlay zip on top of &lt;a href=&quot;http://www.wildfly.org/&quot;&gt;Wildly 8&lt;/a&gt; server.&lt;/p&gt;

&lt;p&gt;After completing the installation, start apiman by executing the following command from &lt;code&gt;&amp;lt;wildfly&amp;gt;/bin&lt;/code&gt; folder:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;./standalone.sh -c standalone-apiman.xml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;quick-public-service-setup&quot;&gt;Quick public service setup&lt;/h3&gt;

&lt;p&gt;For demonstration purposes I’ll be creating a Public Service, however in real life you might want to configure different plans, various contracts, etc. 
Please consult the apiman &lt;a href=&quot;http://www.apiman.io/latest/user-guide.html&quot;&gt;user guide&lt;/a&gt; for more details.&lt;/p&gt;

&lt;p&gt;In order to manage APIs in apiman you need to create a new Organization to which your APIs will belong. 
You can do that easily in apiman manager, typically available at: &lt;a href=&quot;http://localhost:8080/apimanui&quot;&gt;http://localhost:8080/apimanui&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once logged into the apiman manager, locate the Organizations sections on the initial page, select &lt;em&gt;Create a New Organization&lt;/em&gt; link, provide a name and hit &lt;em&gt;Create Organization&lt;/em&gt; button. This will take you to organization details page where you can create a new Service by clicking on &lt;em&gt;New Service&lt;/em&gt; button under &lt;em&gt;Services&lt;/em&gt; tab:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-07-07/service.png&quot; alt=&quot;Image: Create Service&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will be asked to provide a name and a version for this Service. Once the service is successfully created there are few things remaining before you can publish and start using it. 
First, you need to provide an implementation base url on the &lt;em&gt;Implementation&lt;/em&gt; tab. Use the base URL of the REST Quickstart and save your changes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-07-07/implementation.png&quot; alt=&quot;Image: Provide Endpoint Implementation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Second, you may want to apply some policies to this Public Service. To do that, go to the Policies tab and configure a policy of your choice. 
I used the Rate Limiting policy to limit usage of this service to 5 per minute:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-07-07/policy.png&quot; alt=&quot;Image: Assign policy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you are all set to make the service public by checking &lt;em&gt;Make this service public&lt;/em&gt; under &lt;em&gt;Plans&lt;/em&gt; tab, saving the changes and clicking the &lt;em&gt;Publish&lt;/em&gt; button (which should be now enabled).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-07-07/publish.png&quot; alt=&quot;Image: Publish Service&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After you have published the service, have a look at the &lt;em&gt;Endpoint&lt;/em&gt; tab to look up the URL to be used to invoke this public service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-07-07/endpoint.png&quot; alt=&quot;Image: Managed Service Endpoint&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;testing-your-setup&quot;&gt;Testing your setup&lt;/h1&gt;

&lt;p&gt;Depending on which policy you assinged to the Public Service you might experience different behavior. However, if you followed the tutorial and assigned the Rate Limiting policy after reaching the maximum number of allowed requests you will get an output similar to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First request should succeed:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;[sbunciak@sbunciak ~]$ http https://localhost:8443/apiman-gateway/CustomerOrganization/CrmRestService/1.0/customerservice/customers/123 --verify=no
HTTP/1.1 200 OK
Connection: keep-alive
Content-Type: application/xml
Date: Tue, 07 Jul 2015 21:01:02 GMT
Server: Jetty(8.1.17.v20150415)
Transfer-Encoding: chunked
X-Powered-By: Undertow/1
X-RateLimit-Limit: 5
X-RateLimit-Remaining: 4
X-RateLimit-Reset: 57

&lt;span class=&quot;cp&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot; standalone=&amp;quot;yes&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:Customer&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:ns0=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://rest.fabric.quickstarts.fabric8.io/&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:id&amp;gt;&lt;/span&gt;123&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:id&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ns0:name&amp;gt;&lt;/span&gt;John&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:name&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ns0:Customer&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Executing 5 consecutive requests should fail with &lt;code&gt;HTTP 429 Too Many Requests&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;sbunciak@sbunciak ~&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;http https://localhost:8443/apiman-gateway/CustomerOrganization/CrmRestService/1.0/customerservice/customers/123 --verify&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;no
HTTP/1.1 &lt;span class=&quot;m&quot;&gt;429&lt;/span&gt; Too Many Requests
Connection: keep-alive
Content-Length: 176
Content-Type: application/json
Date: Tue, &lt;span class=&quot;m&quot;&gt;07&lt;/span&gt; Jul &lt;span class=&quot;m&quot;&gt;2015&lt;/span&gt; 21:00:51 GMT
Server: WildFly/8
X-Policy-Failure-Code: 10005
X-Policy-Failure-Message: Rate limit exceeded.
X-Policy-Failure-Type: Other
X-Powered-By: Undertow/1
X-RateLimit-Limit: 5
X-RateLimit-Remaining: 0
X-RateLimit-Reset: 8

&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;failureCode&amp;quot;&lt;/span&gt;: 10005, 
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;headers&amp;quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;X-RateLimit-Limit&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;5&amp;quot;&lt;/span&gt;, 
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;X-RateLimit-Remaining&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;0&amp;quot;&lt;/span&gt;, 
        &lt;span class=&quot;s2&quot;&gt;&amp;quot;X-RateLimit-Reset&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;8&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;, 
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;Rate limit exceeded.&amp;quot;&lt;/span&gt;, 
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;responseCode&amp;quot;&lt;/span&gt;: 429, 
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&amp;quot;Other&amp;quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
				
					<category term="api" />
				
					<category term="management" />
				
					<category term="jboss" />
				
					<category term="fuse" />
				
				<pubDate>Tue, 07 Jul 2015 11:15:15 -0400</pubDate>
				<link>http://apiman.io/blog/api/management/jboss/fuse/2015/07/07/fuse-apis.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/api/management/jboss/fuse/2015/07/07/fuse-apis.html</guid>
			</item>
		
		
			<item>
				<title>At long last, Metrics R Us!</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				
				<description>&lt;p&gt;A core feature of any good API Management solution is the recording of and reporting on
interesting metrics related to API requests.  Because apiman acts as a central Gateway
for all managed API traffic, it is the perfect location to record information about each
and every request.  This allows it to report on interesting data it has recorded, related
to response times, successful vs. failed requests, total number of requests broken down
by time, consumer id, or plan used.  As you can imagine, this is extremely valuable
information and it is a bit embarrassing that we haven’t offered this functionality until
now!&lt;/p&gt;

&lt;p&gt;But that gap is finally filled with version 1.1.4.Final.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
&lt;p&gt;First let me give you just a high level overview of what this is all about.  Every time
the API Gateway gets a request from an API client, it will add a record in the metrics
system with a bunch of interesting fields.  These include but are not limited to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Request start and end times&lt;/li&gt;
  &lt;li&gt;Service start and end times (i.e. just the part of the request taken up by the back end service)&lt;/li&gt;
  &lt;li&gt;Resource path&lt;/li&gt;
  &lt;li&gt;Response type (success, failure, error)&lt;/li&gt;
  &lt;li&gt;Service info (org id, id, version)&lt;/li&gt;
  &lt;li&gt;Application info (org id, id, version)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;All of this information is recorded in the metrics storage system so that later on it
can be analyzed/mined for interesting trends.&lt;/p&gt;

&lt;p&gt;In the API Manager, we extract interesting reports from the recorded metrics data and
display it as graphs in the UI (as well as provide the data via a set of metrics
related REST endpoints in the API Manager’s own API).&lt;/p&gt;

&lt;h2 id=&quot;how-do-we-store-metrics&quot;&gt;How do we store metrics?&lt;/h2&gt;
&lt;p&gt;Out of the box, apiman stores the metrics information into an elasticsearch index.  This
elasticsearch instance is provided as part of the apiman distribution and is enabled and
running by default.  If you wish to use a different elasticsearch instance that’s of
course no problem - all it requires is some tweaking of settings in the apiman.properties
file.  I recommend having a look at the &lt;a href=&quot;http://www.apiman.io/latest/installation-guide.html&quot;&gt;Installation Guide&lt;/a&gt;
for more details.&lt;/p&gt;

&lt;p&gt;The intention is to support various metrics storage systems, not just elasticsearch.
For example, we have InfluxDB and Hawkular implementations in progres.  You can even
implement your own!  Custom metrics systems is likely a separate blog post, but note
that &lt;em&gt;storing&lt;/em&gt; metrics data into an alternate system is easy - simply implement the
&lt;em&gt;IMetrics&lt;/em&gt; interface:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apiman&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;gateway&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;engine&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IMetrics&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  * Records the metrics for a single request.  Most implementations will likely&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  * asynchronously process this information.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;record&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RequestMetric&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;metric&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  * Provides the component registry (before any call to {@link #record(RequestMetric)})&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  * is made. Metrics can then access HTTP client components, etc.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;  */&lt;/span&gt;
  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setComponentRegistry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IComponentRegistry&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A little bit of configuration foo in the apiman.properties is all it takes to switch
from elasticsearch to your custom provider.&lt;/p&gt;

&lt;h2 id=&quot;metrics-data-from-the-api-managers-rest-api&quot;&gt;Metrics data from the API Manager’s REST API&lt;/h2&gt;
&lt;p&gt;There is no way to extract arbitrary metrics information from the metrics source unless
you hit the metrics storage directly.  For example, you could use Kibana to directly
view the apiman metrics information stored in elasticsearch.  In the future we will
be exploring ways to integrate the data visualization tools that come with each of the
providers we support (elasticsearch, hawkular, influxcb, etc).  However, we do provide
a set of REST endpoints you can use to extract common metrics.  These REST endpoints are
available as a part of the standard API Manager’s REST API.&lt;/p&gt;

&lt;p&gt;Please refer to the &lt;a href=&quot;http://www.apiman.io/latest/api-manager-restdocs.html&quot;&gt;API documentation&lt;/a&gt;
for the latest information, but at the time of this blog post the available metrics
endpoints are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;/organizations/&lt;org_id&gt;/services/&lt;svc_id&gt;/versions/&lt;version&gt;/metrics/usage&lt;/version&gt;&lt;/svc_id&gt;&lt;/org_id&gt;&lt;/li&gt;
  &lt;li&gt;/organizations/&lt;org_id&gt;/services/&lt;svc_id&gt;/versions/&lt;version&gt;/metrics/appUsage&lt;/version&gt;&lt;/svc_id&gt;&lt;/org_id&gt;&lt;/li&gt;
  &lt;li&gt;/organizations/&lt;org_id&gt;/services/&lt;svc_id&gt;/versions/&lt;version&gt;/metrics/planUsage&lt;/version&gt;&lt;/svc_id&gt;&lt;/org_id&gt;&lt;/li&gt;
  &lt;li&gt;/organizations/&lt;org_id&gt;/services/&lt;svc_id&gt;/versions/&lt;version&gt;/metrics/responseStats&lt;/version&gt;&lt;/svc_id&gt;&lt;/org_id&gt;&lt;/li&gt;
  &lt;li&gt;/organizations/&lt;org_id&gt;/services/&lt;svc_id&gt;/versions/&lt;version&gt;/metrics/summaryResponseStats&lt;/version&gt;&lt;/svc_id&gt;&lt;/org_id&gt;&lt;/li&gt;
  &lt;li&gt;/organizations/&lt;org_id&gt;/services/&lt;svc_id&gt;/versions/&lt;version&gt;/metrics/planResponseStats&lt;/version&gt;&lt;/svc_id&gt;&lt;/org_id&gt;&lt;/li&gt;
  &lt;li&gt;/organizations/&lt;org_id&gt;/services/&lt;svc_id&gt;/versions/&lt;version&gt;/metrics/appResponseStats&lt;/version&gt;&lt;/svc_id&gt;&lt;/org_id&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The ‘usage’ endpoints return information about the number of requests made.  The
‘responseStats’ endpoints are similar, but are broken down by response type (successful
vs. failed vs. error responses).  All endpoints require a time range (from and to).  The
&lt;em&gt;/usage&lt;/em&gt; and &lt;em&gt;/responseStats&lt;/em&gt; endpoints also require a time interval, because they both
return a histogram/time series dataset.&lt;/p&gt;

&lt;p&gt;Sensible limits are enforced on all these endpoints to discourage abuse.  For example,
don’t ask for a per-minute granularity time series dataset over a ten year data range.
The system won’t like that one bit.&lt;/p&gt;

&lt;h2 id=&quot;viewing-metrics-info-in-the-ui&quot;&gt;Viewing metrics info in the UI&lt;/h2&gt;
&lt;p&gt;The metrics information provided by the API is also available directly in the API Manager
UI.  For any published service, simply navigate to the &lt;em&gt;Metrics&lt;/em&gt; tab for that Service
(in the provider section of the UI).  The UI should be pretty easy to use - simply pick
a type of metric you want to see and a pre-configured time period!  Here is what the
usage metrics might look like for a typical service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-07-06/usage-metrics.png&quot; alt=&quot;Usage Metrics&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And here is what you might expect to find for typical response type metrics:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-07-06/response-type-metrics.png&quot; alt=&quot;Response Type Metrics&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;As you can see, this is highly valuable information to have.  We only have a couple of
different categories of metrics exposed via the API and UI right now - so this is
your opportunity to come tell us what you’d like to see!  Join the apiman metrics
conversation on our &lt;a href=&quot;https://lists.jboss.org/mailman/listinfo/apiman-user&quot;&gt;mailing list&lt;/a&gt;
or &lt;a href=&quot;http://www.apiman.io/latest/chat.html&quot;&gt;IRC channel&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description>
				
					<category term="api-manager" />
				
					<category term="service" />
				
					<category term="ui" />
				
					<category term="metrics" />
				
				<pubDate>Mon, 06 Jul 2015 11:10:22 -0400</pubDate>
				<link>http://apiman.io/blog/api-manager/service/ui/metrics/2015/07/06/metrics.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/api-manager/service/ui/metrics/2015/07/06/metrics.html</guid>
			</item>
		
		
			<item>
				<title>CORS? Of Course!</title>
				
				        <dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author>
				
				<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;re looking to define &lt;a href=&quot;http://www.w3.org/TR/2014/REC-cors-20140116/&quot;&gt;CORS policies&lt;/a&gt; in your API Management layer, then we have an &lt;a href=&quot;https://github.com/apiman/apiman-plugins&quot;&gt;official plugin&lt;/a&gt; policy that should be perfect for the job.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For those &lt;a href=&quot;http://enable-cors.org/&quot;&gt;unfamiliar with CORS&lt;/a&gt;, it&amp;#8217;s a way of precisely defining who and how a remote origin may invoke a service&amp;#8217;s resources. Generally, due to the &lt;a href=&quot;https://en.wikipedia.org/wiki/Same-origin_policy&quot;&gt;same-origin policy&lt;/a&gt;, a web browser will only allow the invocation of resources that reside on the same origin as the requesting page. This mitigates a range of malicious script attacks from interacting with the remote resources.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, if we &lt;em&gt;want&lt;/em&gt; our resource to be callable by some other, or all, origins, then we need to define a CORS policy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Apiman plugins are referenced via their Maven coordinates, and can be installed most easily &lt;a href=&quot;http://www.apiman.io/blog/plugins/policies/development/maven/2015/03/06/custom-policies.html#installing-a-plugin-into-apiman&quot;&gt;via the apiman Admin UI&lt;/a&gt; (or &lt;a href=&quot;http://www.apiman.io/blog/rest/api/automation/2015/05/19/rest-api.html&quot;&gt;REST interfaces&lt;/a&gt; if you&amp;#8217;re looking to automate things).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the &lt;a href=&quot;https://github.com/apiman/apiman-plugins/tree/master/cors-policy&quot;&gt;CORS plugin&lt;/a&gt; &lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnote_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/span&gt;, the coordinates are as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;GAV&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Group&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;io.apiman.plugins&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Artifact&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;apiman-plugins-cors-policy&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Version&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.1.3.Final&lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnote_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;let-s-give-it-a-go&quot;&gt;Let&amp;#8217;s give it a go&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For the purposes of this blogpost we&amp;#8217;ll contrive a scenario that allows us to demonstrate a variety of the plugin&amp;#8217;s functionality. However, if your precise use-case isn&amp;#8217;t covered here, you should still investigate the settings page, as a raft of configuration options are available that will likely achieve what you need.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;preparation&quot;&gt;Preparation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have the &lt;a href=&quot;http://www.apiman.io/latest/download.html&quot;&gt;apiman quickstart&lt;/a&gt; running &lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_3&quot; class=&quot;footnote&quot; href=&quot;#_footnote_3&quot; title=&quot;View footnote.&quot;&gt;3&lt;/a&gt;]&lt;/span&gt;, you next need to deploy the &lt;strong&gt;&lt;em&gt;echo-service&lt;/em&gt;&lt;/strong&gt; to act as the backend service for our demo. &lt;strong&gt;Substitute the path below&lt;/strong&gt; for the appropriate one corresponding to the version you downloaded.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;cd ~/apiman-1.1.3.Final/wildfly-8.2.0.Final/apiman/quickstarts/echo-service/
mvn clean install
mvn wildfly:deploy&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Return to the &lt;a href=&quot;http://127.0.0.1:8080/apimanui&quot;&gt;apiman UI&lt;/a&gt; and log in &lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_4&quot; class=&quot;footnote&quot; href=&quot;#_footnote_4&quot; title=&quot;View footnote.&quot;&gt;4&lt;/a&gt;]&lt;/span&gt;. Create an &lt;strong&gt;Organization&lt;/strong&gt; called &lt;strong&gt;&lt;em&gt;Foo&lt;/em&gt;&lt;/strong&gt;, then create a &lt;strong&gt;Service&lt;/strong&gt; called &lt;strong&gt;&lt;em&gt;Bar&lt;/em&gt;&lt;/strong&gt;. Set your Service&amp;#8217;s implementation URL to be &lt;code&gt;&lt;a href=&quot;http://127.0.0.1:8080/services/apiman-echo&quot; class=&quot;bare&quot;&gt;http://127.0.0.1:8080/services/apiman-echo&lt;/a&gt;&lt;/code&gt;, and select &lt;strong&gt;&lt;em&gt;Rest&lt;/em&gt;&lt;/strong&gt; as the type. Move to the &lt;strong&gt;Plans&lt;/strong&gt; tab and tick &lt;strong&gt;Make this service public&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, move to the &lt;strong&gt;Policies&lt;/strong&gt; tab, click &lt;strong&gt;&lt;em&gt;Add Policy&lt;/em&gt;&lt;/strong&gt; and select &lt;strong&gt;CORS Policy&lt;/strong&gt; from the dropdown list.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;plugin-settings&quot;&gt;Plugin settings&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s configure the settings as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 55%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Option&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Value(s)&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Explanation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Terminate on CORS error&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;true&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;ll not hit the backend if there&amp;#8217;s a CORS validation error. In some instances, a non-preflighted CORS request would otherwise cause a real invocation of the service whose results would be ignored by the user agent.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Access-Control-Allow-Origin&quot;&gt;Access-Control-Allow-Origin&lt;/a&gt;&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;&lt;a href=&quot;http://newcastle.local&quot; class=&quot;bare&quot;&gt;http://newcastle.local&lt;/a&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re going to use cURL to simulate a CORS request from this allowed origin.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Access-Control-Expose-Headers&quot;&gt;Access-Control-Expose-Headers&lt;/a&gt;&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;Response-Counter&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default CORS will only allow a set of &lt;a href=&quot;http://www.w3.org/TR/cors/#simple-header&quot;&gt;simple headers&lt;/a&gt; to be exposed in a &lt;em&gt;response&lt;/em&gt; to the user agent, so we&amp;#8217;ll set this additional one we want to see.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Access-Control-Allow-Headers&quot;&gt;Access-Control-Allow-Headers&lt;/a&gt;&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;X-APIMAN-EXCELLENT&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default CORS only allows &lt;em&gt;requests&lt;/em&gt; to include a set of basic headers, and we want our service to be able to see the value of our &lt;em&gt;X-APIMAN-EXCELLENT&lt;/em&gt; header, so we specify it as allowed here.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Access-Control-Allow-Methods&quot;&gt;Access-Control-Allow-Methods&lt;/a&gt;&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;TRACE&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, only &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt; are allowed verbs. We want to use &lt;code&gt;TRACE&lt;/code&gt;, so we add it to the list.&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Access-Control-Max-Age&quot;&gt;Access-Control-Max-Age&lt;/a&gt;&lt;/p&gt;&lt;/th&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;9001&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How long the browser should cache your CORS policy for (to avoid repeated preflight requests).&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After saving you&amp;#8217;ll see it&amp;#8217;s description says something along the lines of:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;quoteblock&quot;&gt;
&lt;blockquote&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Cross-origin requests from  1  origin(s) will be permitted upon satisfying method, header and credential constraints.  Denied requests will be terminated.  Preflight requests will be cached for 9001 delta seconds.&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Assuming you&amp;#8217;ve saved everything, hit &lt;strong&gt;Publish&lt;/strong&gt; and we&amp;#8217;ll be ready to test.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;access-control-to-major-tom&quot;&gt;Access Control to Major Tom&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Generally, it&amp;#8217;s the job of the user agent to set the &lt;code&gt;Origin&lt;/code&gt; header, such as a browser or mobile client. However, we&amp;#8217;ll be using cURL to simulate a variety of scenarios so we can test things out without actually needing to set up a load of different domains.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;unwelcome-guests&quot;&gt;Unwelcome guests&lt;/h4&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;no-ticket-to-fly&quot;&gt;No ticket to fly&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In our first example, we&amp;#8217;ll set an &lt;code&gt;Origin&lt;/code&gt; that we didn&amp;#8217;t permit:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;curl -k -v -H &#39;Origin: http://panacalty.local&#39; https://127.0.0.1:8443/apiman-gateway/Foo/Bar/1.0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s what comes back:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;{
   &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;CORS: Origin not permitted.&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
   &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : {
      &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Access-Control-Allow-Origin&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
      &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Access-Control-Expose-Headers&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Response-Counter&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
   },
   &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;responseCode&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;integer&quot;&gt;400&lt;/span&gt;,
   &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Authorization&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
   &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;failureCode&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;integer&quot;&gt;400&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that we were given the thumbs down without the service ever being hit; for most use cases this is a good thing, as it avoids unnecessary load on a service where the user agent is going to throw away the response anyway.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;not-got-the-head-er-for-it&quot;&gt;Not got the head(er) for it&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even if our origin is correct, we need to pass other checks, such as headers. In this preflighted example, we&amp;#8217;ll try to make a request with a header that we&amp;#8217;ve not allowed: &lt;code&gt;X-SECRET&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;curl -X OPTIONS -k -v -H &#39;Origin: http://newcastle.local&#39; -H &#39;Access-Control-Request-Headers: X-SECRET&#39; &#39;Access-Control-Request-Method: TRACE&#39; https://127.0.0.1:8443/apiman-gateway/Foo/Bar/1.0&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Correctly, CORS turned the prerequest down:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;{
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Authorization&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;failureCode&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;400&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;responseCode&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;400&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;CORS: Requested header not allowed&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
        &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Access-Control-Max-Age&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;9001&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The same goes for Request-Method (verb), and of course, whether the CORS request itself is valid.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;playing-by-the-rules&quot;&gt;Playing by the rules&lt;/h4&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-tip&quot; title=&quot;Tip&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
When &lt;code&gt;Host&lt;/code&gt; and &lt;code&gt;Origin&lt;/code&gt; are equal, a request will automatically be allowed, as it is a &lt;em&gt;non-CORS&lt;/em&gt; request. Some browsers still make the superfluous CORS requests anyway.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;keep-it-simple&quot;&gt;Keep it simple&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s set up a request that finally is playing by the parameters we configured earlier:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;curl -X GET -k -v -H &#39;Origin: http://newcastle.local&#39; https://127.0.0.1:8443/apiman-gateway/Foo/Bar/1.0
&amp;gt; GET /apiman-gateway/Foo/Bar/1.0 HTTP/1.1
&amp;gt; User-Agent: curl/7.37.1
&amp;gt; Host: 127.0.0.1:8443
&amp;gt; Accept: */*
&amp;gt; Origin: http://newcastle.local
&amp;gt;
&amp;lt; HTTP/1.1 200 OK
&amp;lt; X-Powered-By: Undertow/1
&amp;lt; Server: WildFly/8
&amp;lt; Access-Control-Expose-Headers: Response-Counter
&amp;lt; Response-Counter: 1
&amp;lt; Date: Sat, 13 Jun 2015 16:06:32 GMT
&amp;lt; Connection: keep-alive
&amp;lt; Access-Control-Allow-Origin: http://newcastle.local
&amp;lt; Content-Type: application/json
&amp;lt; Content-Length: 345
&amp;lt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It works: excellent! Here&amp;#8217;s our response body:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;{
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;resource&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/apiman-echo&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;uri&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/apiman-echo&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
  &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : {
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Host&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;127.0.0.1:8080&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;User-Agent&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;curl/7.37.1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Accept&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;*/*&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;keep-alive&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Cache-Control&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;no-cache&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;Pragma&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;no-cache&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can see that the &lt;code&gt;Response-Counter&lt;/code&gt; header is in our list of headers that can be exposed. If we were building a Javascript XHR then the browser would allow you to see the &lt;code&gt;Response-Counter&lt;/code&gt; but not other non-standard fields such as &lt;code&gt;X-Powered-By&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;preflight-checks&quot;&gt;Preflight checks&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s do something a bit more complex that requires a &lt;strong&gt;preflight request&lt;/strong&gt;, which is essentially a pre-check to see whether our request is acceptable before attempting it for real. We&amp;#8217;ll set the headers &lt;code&gt;Access-Control-Request-Method&lt;/code&gt; to &lt;code&gt;PATCH&lt;/code&gt; and &lt;code&gt;Access-Control-Request-Headers&lt;/code&gt; to &lt;code&gt;X-APIMAN-EXCELLENT&lt;/code&gt;. Again, we&amp;#8217;re using a permitted origin.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To simulate it using cURL, let&amp;#8217;s do:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;curl -X OPTIONS -k -v -H &#39;Origin: http://newcastle.local&#39; -H &#39;Access-Control-Request-Method: PATCH&#39; -H &#39;Access-Control-Request-Headers: X-APIMAN-EXCELLENT&#39; https://127.0.0.1:8443/apiman-gateway/Foo/Bar/1.0
&amp;gt; OPTIONS /apiman-gateway/Foo/Bar/1.0 HTTP/1.1
&amp;gt; User-Agent: curl/7.37.1
&amp;gt; Host: 127.0.0.1:8443
&amp;gt; Accept: */*
&amp;gt; Origin: http://newcastle.local
&amp;gt; Access-Control-Request-Method: PATCH
&amp;gt; Access-Control-Request-Headers: X-APIMAN-EXCELLENT
&amp;gt;
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Access-Control-Allow-Headers: X-APIMAN-EXCELLENT
&amp;lt; Access-Control-Expose-Headers: Response-Counter
&amp;lt; Access-Control-Allow-Origin: http://newcastle.local
&amp;lt; Access-Control-Max-Age: 9001
&amp;lt; Access-Control-Allow-Methods: PATCH
&amp;lt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect4&quot;&gt;
&lt;h5 id=&quot;liftoff&quot;&gt;Liftoff&lt;/h5&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, the plugin gave us permission to continue on and make our real request with that origin, header and verb. In the real world, the browser would go ahead and do exactly that.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the preflight requests never go through to the service itself, they are CORS specific and the response is generated on the gateway by the CORS policy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;in-conclusion&quot;&gt;In conclusion&amp;#8230;&amp;#8203;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We built up a CORS configuration and tested out its functionality. Thankfully, it was pretty easy!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt; One of our official plugins, the rest of which can be viewed at &lt;a href=&quot;https://github.com/apiman/apiman-plugins/&quot; class=&quot;bare&quot;&gt;https://github.com/apiman/apiman-plugins/&lt;/a&gt;. You can build and deploy your plugins publicly or privately in a similar manner
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt; Use the version corresponding to your selected release of apiman
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_3&quot;&gt;
&lt;a href=&quot;#_footnoteref_3&quot;&gt;3&lt;/a&gt; For simplicity&amp;#8217;s sake, I suggest using the instructions in the &lt;em&gt;&#39;Or simply try this&amp;#8230;&amp;#8203;&#39;&lt;/em&gt; box
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_4&quot;&gt;
&lt;a href=&quot;#_footnoteref_4&quot;&gt;4&lt;/a&gt; If you used the quickstart, the defaults are U: admin P: admin123!
&lt;/div&gt;
&lt;/div&gt;</description>
				
					<category term="security" />
				
					<category term="plugin" />
				
					<category term="policy" />
				
					<category term="cors" />
				
				<pubDate>Thu, 02 Jul 2015 10:00:00 -0400</pubDate>
				<link>http://apiman.io/blog/security/plugin/policy/cors/2015/07/02/cors.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/security/plugin/policy/cors/2015/07/02/cors.html</guid>
			</item>
		
		
			<item>
				<title>Cover yourself up! Protecting your services with mutual auth</title>
				
				        <dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author>
				
				<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last thing you want after carefully setting up your system with apiman is for someone to be able to call around the gateway and hit your services directly. The typical solution for this is to lock down your network so that the only publicly accessible part is the apiman gateway, whilst services are hidden in the private part of the network, which apiman can access, but not someone in the outside world. However, in some situations fine-grained network controls may not be available, such as the cloud; or, you may wish to have an additional layer of security to be reassured that no funny business is going on (such as imposters).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The class of solutions to this problem generally falls under the banner of &lt;strong&gt;mutual authentication&lt;/strong&gt;. One such mutual auth offering apiman supports is Mutually Authenticated TLS&lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnote_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;what-is-mutual-transport-layer-security-mutual-tls&quot;&gt;What is mutual transport layer security (Mutual TLS)?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Most developers are familiar with SSL/TLS; it facilitates authentication via certificates followed by the establishment of an encrypted channel between the parties. It is overwhelmingly used in a one-way configuration: the client (often a browser) connects to a server, inspects the certificates it presents, and makes a determination as to whether the server is trustworthy. The connection is only made if the client is satisfied that the server is who it claims to be. In general, the server makes no determination as to who the client is.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, in a typical apiman setup the gateway is acting as the client and the services&lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnote_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/span&gt; act as the servers. Clearly, if we wish to prevent anyone other than approved clients from connecting directly to our services then unidirectional authentication is insufficient: we must ascertain the identities of &lt;em&gt;both&lt;/em&gt; client and server before establishing a connection. In essence, each party must present certificates that the other party trusts. This a great way to prevent anyone from side-stepping our gateway, and even better, it also stops any interlopers from sneaking into the system.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Luckily, apiman makes this &lt;a href=&quot;http://www.apiman.io/latest/installation-guide.html#_how_to_enable_mtls_mutual_ssl_support_for_endpoint_security&quot;&gt;extremely easy to set this up&lt;/a&gt;, so let&amp;#8217;s dive in and explore what&amp;#8217;s possible.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;architecture&quot;&gt;Architecture&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s assume &#39;node&#39; refers generically to a participant in our system, either a gateway or a service.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two main elements we need to work with: &lt;strong&gt;keystores&lt;/strong&gt;, which contain a node&amp;#8217;s private key material, and &lt;strong&gt;truststores&lt;/strong&gt;, which contain public certificates instructing the node whom it should trust.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Ideally, each node should have its own keystore, whose key material is signed by a &lt;strong&gt;trusted certificate authority&lt;/strong&gt;; a trusted party whose signature indicates that the holder of the certificate is trustworthy. In many organisations there is an internal certificate authority which will sign or issue certificates. If we add a CA&amp;#8217;s certificate to our node&amp;#8217;s keystores, then &lt;em&gt;any&lt;/em&gt; certificate issued by it will be trusted by virtue of the issuer&amp;#8217;s authority. This approach scales excellently, because we can issue an unlimited number of new certificates without needing to add them to our truststores.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It bears mentioning that any applications&lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_3&quot; class=&quot;footnote&quot; href=&quot;#_footnote_3&quot; title=&quot;View footnote.&quot;&gt;3&lt;/a&gt;]&lt;/span&gt; legitimately using our gateway will never be exposed to any mutual auth issues; they will establish a standard one-way authenticating TLS connection that is terminated at the gateway, with the gateway then establishing the two-way TLS connection to the service.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot; style=&quot;text-align: center&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.apiman.io/blog/images/generated/gateway-mtls.svg&quot; alt=&quot;Simple mutual auth setup&quot; width=&quot;787&quot; height=&quot;437&quot;&gt;
&lt;/div&gt;
&lt;div class=&quot;title&quot;&gt;Figure 1. Simple mutual auth setup&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the services trust the gateway (and vice versa), but the services &lt;em&gt;do not&lt;/em&gt; trust the application. The application tries its luck and attempts to bypass the gateway, but it doesn&amp;#8217;t hold a trusted certificate, so it fails.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;the-keys-to-success&quot;&gt;The keys to success&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;admonitionblock caution&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-caution&quot; title=&quot;Caution&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Remember, this is just a quick blog demonstration; you need to take extreme care with how you look after your key infrastructure to avoid a catastrophic security incident. If you&amp;#8217;re unsure, consult someone who knows what they&amp;#8217;re doing!
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;truststore&quot;&gt;Truststore&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s create a simple shared truststore that we&amp;#8217;ll use on all of our nodes. We&amp;#8217;re going to imagine that we have an internal root CA called &lt;code&gt;apimanCA&lt;/code&gt;, and that whomever controls it has taken &lt;a href=&quot;https://i.imgur.com/sYeorwQ.png&quot;&gt;appropriate security precautions&lt;/a&gt; to ensure no baddies get their certificates signed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;keytool -import -keystore shared_trust_store.jks -file apimanCA.cer -alias apimanCA&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;That&amp;#8217;s the easy bit done, now onto key wrangling.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;keystore&quot;&gt;Keystore&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each of our nodes needs its own keystore, which we can create using &lt;code&gt;keytool&lt;/code&gt;, followed by generating a &lt;em&gt;certificate signing request&lt;/em&gt; (CSR), which we can then send to our CA to be signed:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;keytool -keystore gateway_ks.jks -genkey -alias gateway -keyalg rsa
keytool -keystore gateway_ks.jks -certreq -alias gateway -keyalg rsa -file gateway.csr

keytool -keystore service_a_ks.jks -genkey -alias service_a -keyalg rsa
keytool -keystore service_a_ks.jks -certreq -alias service_a -keyalg rsa -file service_a.csr&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Do the same for &lt;em&gt;each of your services&lt;/em&gt;, and send off the &lt;code&gt;csr&lt;/code&gt; files to be signed by CA (internal or otherwise). They should come back as certificate replies in one of several formats, import them back into their &lt;em&gt;corresponding keystores&lt;/em&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;keytool -import -keystore gateway_ks.jks -file gateway.cer -alias gateway
keytool -import -keystore service_a_ks.jks -file service_a.cer -alias service_a&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;hooking-it-up&quot;&gt;Hooking it up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Your services may not use Java, so you&amp;#8217;ll need to find the appropriate solution for enabling mutual TLS in your language&amp;#8217;s ecosystem. It doesn&amp;#8217;t really matter, as long as you have the appropriate certificates hooked in and have set &lt;strong&gt;client authentication to required&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;gateway-to-heaven&quot;&gt;Gateway to Heaven&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s easy to set up the gateway, but you should be especially careful about what you twiddle with, as the security implications could be important. Let&amp;#8217;s edit &lt;code&gt;apiman.properties&lt;/code&gt; on our gateway(s) with a few simple settings to test things out:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;properties&quot;&gt;# ---------------------------------------------------------------------
# SSL/TLS settings for the gateway connector(s).
# ---------------------------------------------------------------------

# Trust store contains certificate(s) trusted by gateway.
apiman-gateway.connector-factory.tls.trustStore=/path/to/shared_trust_store.jks
apiman-gateway.connector-factory.tls.trustStorePassword=password

# Key store contains gateway&#39;s keys (including private components: keep it safe).
apiman-gateway.connector-factory.tls.keyStore=/path/to/gateway_ks.jks
apiman-gateway.connector-factory.tls.keyStorePassword=password
apiman-gateway.connector-factory.tls.keyPassword=password

# Whether certificate host checks should be bypassed. *Use with great care.*
apiman-gateway.connector-factory.tls.allowAnyHost=true&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The last option is to make our testing easier by removing hostname checks on the certificates, but you should disable that in production. Have a look at &lt;a href=&quot;http://www.apiman.io/latest/installation-guide.html#_make_changes_to_apiman_properties_3&quot;&gt;our setup guide&lt;/a&gt; for a full list of options.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;service-is-everything&quot;&gt;Service is Everything&lt;/h3&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
You must explicitly enable client authentication for any services you want protected by mutual TLS.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s a small Java example using Jetty to create a tiny service with mutual authentication enabled. We hook up our &lt;em&gt;keystore&lt;/em&gt; and &lt;em&gt;truststore&lt;/em&gt; with respective hard-to-guess passwords, and set &lt;code&gt;setNeedClientAuth(true)&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;java&quot;&gt;&lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;directive&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; main(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt;... args) &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;Exception&lt;/span&gt; {
      Server server = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Server();
      server.setStopAtShutdown(&lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;);

      HttpConfiguration http_config = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HttpConfiguration();
      http_config.setSecureScheme(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
      http_config.setSecurePort(&lt;span class=&quot;integer&quot;&gt;8009&lt;/span&gt;);

      SslContextFactory sslContextFactory = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SslContextFactory();
      sslContextFactory.setKeyStorePath(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/tmp/keys/service_a_ks.jks&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
      sslContextFactory.setKeyStorePassword(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
      sslContextFactory.setKeyManagerPassword(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
      sslContextFactory.setTrustStorePath(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;/tmp/keys/shared_trust_store.jks&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
      sslContextFactory.setTrustStorePassword(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
      &lt;span class=&quot;comment&quot;&gt;// Important: Require client auth&lt;/span&gt;
      sslContextFactory.setNeedClientAuth(&lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;);

      HttpConfiguration https_config = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HttpConfiguration(http_config);
      https_config.addCustomizer(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SecureRequestCustomizer());

      ServerConnector sslConnector = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ServerConnector(server, &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SslConnectionFactory(
              sslContextFactory, &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http/1.1&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;), &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HttpConnectionFactory(https_config));
      sslConnector.setPort(&lt;span class=&quot;integer&quot;&gt;8009&lt;/span&gt;);
      server.addConnector(sslConnector);
      server.setHandler(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; AbstractHandler() {

          &lt;span class=&quot;annotation&quot;&gt;@Override&lt;/span&gt;
          &lt;span class=&quot;directive&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;void&lt;/span&gt; handle(&lt;span class=&quot;predefined-type&quot;&gt;String&lt;/span&gt; target, Request baseRequest,
                  HttpServletRequest request, HttpServletResponse response) &lt;span class=&quot;directive&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;exception&quot;&gt;IOException&lt;/span&gt;,
                  ServletException {
              response.setContentType(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;text/html;charset=utf-8&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
              response.setStatus(HttpServletResponse.SC_OK);
              baseRequest.setHandled(&lt;span class=&quot;predefined-constant&quot;&gt;true&lt;/span&gt;);
              response.getWriter().println(&lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;apiman saves the day, again!&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);
          }
      });
      server.start();
  }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fire-it-up&quot;&gt;Fire it up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Restart everything, and you should be ready to test it!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When creating a service that is protected by mutual TLS you should set the &lt;strong&gt;API Security&lt;/strong&gt; dropdown in the &lt;strong&gt;Implementation&lt;/strong&gt; tab to &lt;code&gt;MTLS/Two-Way-SSL&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;http://www.apiman.io/blog/images/2015-06-16/enable-mtls.png&quot; alt=&quot;enable mtls&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If things don&amp;#8217;t seem to be working quite how you expected, you&amp;#8217;ll probably notice that the error messages emitted are fairly vague. If you need more information to figure out what&amp;#8217;s going on then you can pass the flag &lt;code&gt;-Djavax.net.debug=all&lt;/code&gt;, which will print helpful debug info from &lt;a href=&quot;https://docs.oracle.com/javase/7/docs/technotes/guides/security/jsse/ReadDebug.html&quot;&gt;Java&amp;#8217;s SSL subsystems&lt;/a&gt; onto the console.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;./bin/standalone.sh -Djavax.net.debug=all -c standalone-apiman.xml&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Mutually authenticated TLS is a good way to ensure both client and server are who they claim to be before connecting to one another. If you need to prevent unauthorized direct access to your services, this is an option worth considering.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt; Also commonly referred to as MTLS, MSSL, 2WAY, client authenticated TLS/SSL, two-way SSL, amongst other names!
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt; We refer to the set of APIs managed by apiman as services
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_3&quot;&gt;
&lt;a href=&quot;#_footnoteref_3&quot;&gt;3&lt;/a&gt; Applications are the users of our services, like browsers, mobile apps, etc
&lt;/div&gt;
&lt;/div&gt;</description>
				
					<category term="gateway" />
				
					<category term="security" />
				
					<category term="mutual-auth" />
				
					<category term="ssl" />
				
					<category term="mtls" />
				
				<pubDate>Tue, 16 Jun 2015 12:00:00 -0400</pubDate>
				<link>http://apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/2015/06/16/mtls-mutual-auth.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/gateway/security/mutual-auth/ssl/mtls/2015/06/16/mtls-mutual-auth.html</guid>
			</item>
		
		
			<item>
				<title>Microservices Architecture Day Appearance</title>
				
				        <dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author>
				
				<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I had the pleasure of presenting on apiman at the recent Microservices Architecture Developer Day, with our colleague Kurt delivering a short demo of our software running within &lt;a href=&quot;http://www.fabric8.io&quot;&gt;Fabric8&lt;/a&gt;. It was particularly enjoyable meeting developers who are interested in, or are already using, apiman - so, thank you for your insightful questions both during, and after, the presentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Given the packed schedule, there was a limited amount of time to explore apiman plus microservices, and hence this seems like a good opportunity to write a blog post expanding upon the themes I touched upon.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, if you&amp;#8217;re interested in understanding the value API management can have in a microservices architecture; please, read on!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;services-services-everywhere&quot;&gt;Services, services, everywhere!&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A &lt;a href=&quot;http://www.kubernetes.io&quot;&gt;microservices architecture&lt;/a&gt; encourages the decomposition of problems into small, isolated and reusable chunks; much in the same spirit as UNIX&amp;#8217;s &lt;em&gt;do one job and do it well&lt;/em&gt; philosophy. This brings with it a whole raft of benefits, for instance: we can scale each component independently, avoiding unnecessarily dragging along other components which just happen to reside in the same monolith; we can easily have a single team wholly responsible for a single microservice&amp;#8217;s lifecycle, simplifying debugging and allowing them to use their skills and technologies of choice; and, we can easily create new functionality via composition. However, this proliferation of heterogeneous services poses some challenges, a significant subset of which API Management is a key solution to.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;avoiding-reimplementation-of-cross-cutting-functionality&quot;&gt;Avoiding reimplementation of cross-cutting functionality&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A problem that can quickly become apparent is that key pieces of important common functionality are required that are difficult or undesirable to reimplement in every API. Good examples of this would be security concerns like authentication and authorization, or business concerns like rate-limiting, billing and auditing &lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnote_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s quite clear why we would want to avoid this situation. Imagine we have hundreds of microservices we need to expose to the outside world; the nightmare scenario is that we have to implement complex and prone-to-change authentication and authorization schemes on &lt;em&gt;each&lt;/em&gt; of them. Quite aside from bloating and complicating our microservices, it is going to be extremely difficult to guarantee that each service has implemented all of this common functionality consistently and correctly - we could quite plausibly be leaving holes in our system simply by virtue of surface area.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead, we can drastically improve the situation by using apiman to relieve individual services of that burden; simply configure and manage those tasks in a single, well-known location. We register our APIs with apiman, apply appropriate policies, and route public traffic through the gateway. We leave apiman to deal with these common problems, and let the microservice&amp;#8217;s developers focus on their core task, rather than burning time on ancillary concerns.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;fickle-business-requirements&quot;&gt;Fickle business requirements&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Access to APIs often has business requirements which are independent of the core functionality the service itself offers. For instance, whilst a mapping application might only be interested in coordinates, its business requirements could dictate that we need to capture metrics; initiate contracts with, and issue keys to, API consumers; and, audit their interactions with the system. Quite aside from the microservices &lt;em&gt;faux pas&lt;/em&gt; of contaminating a service with external business logic, we generally want to avoid this situation, as business requirements tend to change rapidly in response to events which are unrelated to the service&amp;#8217;s purpose.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For instance, marketing decide that the service is so popular that they&amp;#8217;re going to offer two levels of access a &lt;em&gt;gold plan&lt;/em&gt; and a &lt;em&gt;silver plan&lt;/em&gt;; one of which allows 1000 requests per minute, the other 500. The developers trudge off and implement this in their service. Six months later, they decide they want to change this to bandwidth limits, and the &lt;em&gt;silver plan&lt;/em&gt; should be able to do only &lt;em&gt;GET&lt;/em&gt; requests. The developers of a variety of services are taken off their existing tasks to implement these changes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Shifting business requirements are a natural part the software industry, however, the implementation burden is amplified in a microservices architecture. Thankfully, we can delegate that workload to our API Management solution, and even better, with the apiman UI it&amp;#8217;s possible for non-technical people to create and manage the entire process. This is excellent from both standpoints, as the developers can concentrate on their core tasks, and the business people can take direct ownership and responsibility for implementing their policies; the two domains are kept entirely separate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Naturally, there will be cases where the in-built policies don&amp;#8217;t meet your specific needs. Apiman was designed grounds-up with the assumption that many users would want to write custom policies, and as such, we&amp;#8217;ve &lt;a href=&quot;http://www.apiman.io/latest/developer-guide.html#_plugins&quot;&gt;written a number of guides&lt;/a&gt; &lt;a href=&quot;http://java.dzone.com/articles/customizing-jboss-apiman&quot;&gt;on the topic&lt;/a&gt;. It&amp;#8217;s extremely easy to create, install and version control your own policies, including UI components that make it trivially easy for &lt;a href=&quot;http://www.apiman.io/latest/user-guide.html#_plugins&quot;&gt;non-technical people to drive&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;clear-demarcation&quot;&gt;Clear demarcation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Of all the microservices constituting an entire system, it is likely that only a subset of those should be exposed to the outside world. The rest are there to provide internal or compositional functionality. The apiman gateway can provide a natural boundary between public and private; only those services that are explicitly being offered through the gateway are visible, and the rest can be walled off (either at the network level, or via &lt;a href=&quot;http://www.apiman.io/latest/installation-guide.html#_how_to_enable_mtls_mutual_ssl_support_for_endpoint_security&quot;&gt;mutual authentication&lt;/a&gt; mechanisms).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;watching-the-world-go-by&quot;&gt;Watching the world go by&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we want to determine the value of a service to our organisation, then we need some objective metrics to determine &lt;em&gt;how&lt;/em&gt; it is being used and whether it is performing as well as we hoped. Ideally, metrics should be collected in a manner that is consistent amongst all services to ensure that comparisons can be made fairly. The apiman gateway is in a unique position to collect lots of interesting data; siting at the transit point between the outside world and the services being offered. We collect, amongst other things, timing information; round-trip latencies; detailed error information (error codes, error output); application, service and organisation IDs. These can be analysed to produce a rich set of information which you can use to characterise the behaviour (or misbehaviour) of your services, including how external applications are interacting with them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Metrics collection, analysis and visualisation is an area we&amp;#8217;re actively working hard on: in the community we&amp;#8217;re looking to provide interesting opportunities to tie in with popular open source data-sinks and visualisers, whilst in integrated environments, we look to play well with native metrics collection infrastructure.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;papers-please&quot;&gt;Papers, please&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You may have lots of services to offer, but unless people can find them, they won&amp;#8217;t know about how useful they are. Hence, it&amp;#8217;s important to have a well-known service registry through which internal and external consumers can find and consume your APIs. Developers can easily log into the apiman UI to browse and search for registered APIs, and we also make it easy to integrate into any other registry, such as Fabric8&amp;#8217;s.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;in-conclusion&quot;&gt;In conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;API Management will be at the heart of many successful microservices setups. It unifies common functionality; provides a place to discover, register and manage services; reduces the scope for costly errors and inconsistencies; and, provides a natural barrier between internal and external where it can collect valuable metrics and audit information.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It was a pleasure to meet all of those developers who are interested in apiman - and it was particularly interesting to hear your use-cases. I would encourage you to keep giving us your feedback, as it directly impacts our features, priorities and schedule.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt; See our &lt;a href=&quot;http://www.apiman.io/latest/user-guide.html#_typical_use_cases&quot;&gt;user guide&lt;/a&gt; and be sure to look at our range of &lt;a href=&quot;https://github.com/apiman/apiman-plugins&quot;&gt;official plugin policies&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
				
					<category term="microservices" />
				
					<category term="conference" />
				
					<category term="talk" />
				
				<pubDate>Mon, 15 Jun 2015 16:30:00 -0400</pubDate>
				<link>http://apiman.io/blog/microservices/conference/talk/2015/06/15/apiman-msa-day.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/microservices/conference/talk/2015/06/15/apiman-msa-day.html</guid>
			</item>
		
		
			<item>
				<title>Adding a BASIC Authentication Policy to a Managed Service in JBoss apiman</title>
				
				        <dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author>
				
				<description>&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-06-11/1-apiman_logo.png&quot; alt=&quot;apiman logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In this, the fourth article in the series on apiman, JBoss’ new API Management framework, we’ll examine how apiman enables you to not just manage services, but implement a layer of security to the services by adding an authentication requirement when clients access a managed service.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;securing-client-access-to-your-managed-services&quot;&gt;Securing Client Access to your Managed Services&lt;/h2&gt;

&lt;p&gt;As we’ve seen in the previous articles in this series, apiman enables you to govern the usage of the services that it manages by defining policies in the Managament UI that are then applied at runtime by the API Gateway. The apiman API Gateway applies the policy rules that you define to requests that it proxies to the managed service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-06-11/apiman-2.png&quot; alt=&quot;apiman logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The OOTB policies that are packaged with apiman enable you to apply a variety of types of controls, including rate limiting (where access to a service is assigned a usage threshold) and black/whitelisting by IP address (where the client’s IP address governs their access to the service).&lt;/p&gt;

&lt;p&gt;However, managing a service with apiman does not automatically make that service secure. Happily, however, apiman provides a policy that enables you to easily set up authentication to control access to your managed service. (Note that this policy governs the clients’ authenticated access to the managed service, and not establishing a secure connection where apiman authenticates the back-end services. In other words, in this article, we’re interested in adding authentication between the blue and pink boxes in the above diagram.)&lt;/p&gt;

&lt;h2 id=&quot;adding-a-basic-authentication-policy-to-a-managed-service&quot;&gt;Adding a BASIC Authentication Policy to a Managed Service&lt;/h2&gt;

&lt;p&gt;apiman is packaged with multiple pre-configured policies:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Authorization - Access to services’ resources is controlled by user roles.&lt;/li&gt;
  &lt;li&gt;BASIC Authentication - A username/password is required to access a service.&lt;/li&gt;
  &lt;li&gt;Ignored Resources - Paths to services’ resources that will not be accessible. Requests to these service resource paths return a 404 (not found) error.&lt;/li&gt;
  &lt;li&gt;IP Blacklist - Clients with specific IP address will be blocked from accessing a service.&lt;/li&gt;
  &lt;li&gt;IP Whitelist - And, clients with specific IP address will not  be blocked from accessing a service.&lt;/li&gt;
  &lt;li&gt;Rate Limiting - Access to a service is limited by the number of requests in a defined time period. We demonstrated an example of a rate limiting policy in the first article in this series.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’re interested in the BASIC Authentication Policy. Let’s take a closer look. The dialog to add a BASIC authentication policy to a service looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-06-11/apiman-3.png&quot; alt=&quot;apiman logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In creating the BASIC policy, we define an Authentication Realm (think of this as an area to be protected, within which usernames and passwords exist) and an optional HTTP header. The optional HTTP header is used to optionally pass the user’s principal to the back-end service through an HTTP header. This is useful if the back-end system needs to know the username of the user calling it (e.g. to do user-specific operation). The “Transport security required” checkbox, if enabled, will cause the policy to fail if a client tries to connect to the service over http. The Policy will only accept credentials over https.&lt;/p&gt;

&lt;p&gt;We’ll keep the Identity Source simple and select “Static Identities” and then define a user. Note that while this static approach is fine for testing purposes, you will want use one of the other Identity Source options (JBDS or LDAP) for a production environment as they can better handle a large number of users.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-06-11/apiman-4.png&quot; alt=&quot;apiman logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s important to remember that, in BASIC authentication, one of the factors that makes this, well, basic in nature, is that the username/password that you define are encoded (this is unencrypted base64 encoded text) when they are sent to the server. Since the text is not encrypted, it’s at risk of being copied and then used in an attack. For this reason, it’s safer to select the transport security option to configure SSL encryption.&lt;/p&gt;

&lt;p&gt;To illustrate, here’s Java code that can encode and then decode the username:password string:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Base64.Encoder &lt;span class=&quot;nv&quot;&gt;encoder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Base64.getEncoder&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 String &lt;span class=&quot;nv&quot;&gt;normalString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;user1&amp;quot;&lt;/span&gt; + &lt;span class=&quot;s2&quot;&gt;&amp;quot;:&amp;quot;&lt;/span&gt; + &lt;span class=&quot;s2&quot;&gt;&amp;quot;password1&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 String &lt;span class=&quot;nv&quot;&gt;encodedString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; encoder.encodeToString&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;normalString.getBytes&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;StandardCharsets.UTF_8&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 System.out.println &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The encoded string is: &amp;quot;&lt;/span&gt; + encodedString&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
             
 Decoder &lt;span class=&quot;nv&quot;&gt;decoder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; Base64.getDecoder&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 byte&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;unencodedStringArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; decoder.decode&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;encodedString&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 String &lt;span class=&quot;nv&quot;&gt;unencodedString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; new String &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;unencodedStringArray&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
 System.out.println &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The unencoded string is: &amp;quot;&lt;/span&gt; + unencodedString&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
   
 The encoded string is: dXNlcjE6cGFzc3dvcmQx  
 The unencoded string is: user1:password1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So - unlike encrypted strings, your encoded username and password strings are not secure!&lt;/p&gt;

&lt;p&gt;## When a Request is made to the Service&lt;/p&gt;

&lt;p&gt;It’s interesting to see step-by-step what happens when a request is made to the service and the BASIC authentication policy is applied. Let’s take a look at the request and the responses. I used the “HttpFox” http analyzer (https://addons.mozilla.org/en-us/firefox/addon/httpfox/) to “listen in” on the requests sent to the server and the responses sent back.&lt;/p&gt;

&lt;p&gt;Here’s the first request made to the service, notice that a username/password is not included.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Request-Line&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; GET /apiman-gateway/serviceProducerOrg/echossl/1.0?apikey&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;6f8784cd-5754-47b0-9b8b-b2eb8c5b190f HTTP/1.1  
 Host     localhost:8443  
 User-Agent     Mozilla/5.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;X11&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; Linux x86_64&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; rv:24.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Gecko/20100101 Firefox/24.0  
 Accept     text/html,application/xhtml+xml,application/xml&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.9,*/*&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.8  
 Accept-Language     en-US,en&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.5  
 Accept-Encoding     gzip, deflate  
 Cookie     &lt;span class=&quot;nv&quot;&gt;__utma&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;111872281.1348865079.1409020839.1411395889.1419258109.7&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;__utmz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;111872281.1409020839.1.1.utmcsr&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;direct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;utmccn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;direct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;utmcmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;none&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s_fid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;72CCAD206D09146C-233B60F47DBEA290  
 Connection     keep-alive&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The response, as we expected, shows that the request has triggered an authentication failure. This is due to the authentication requirement that we defined and is being applied by the API Gateway. Note the 401 error code and the reference to BASIC authentication:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Status-Line&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     HTTP/1.1 &lt;span class=&quot;m&quot;&gt;401&lt;/span&gt; Unauthorized  
 X-Powered-By     Undertow/1  
 Server     WildFly/8  
 X-Policy-Failure-Type     Authentication  
 Date     Wed, &lt;span class=&quot;m&quot;&gt;03&lt;/span&gt; Jun &lt;span class=&quot;m&quot;&gt;2015&lt;/span&gt; 13:43:26 GMT  
 Connection     keep-alive  
 WWW-Authenticate     BASIC &lt;span class=&quot;nv&quot;&gt;realm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;myRealm&amp;quot;&lt;/span&gt;  
 X-Policy-Failure-Code     &lt;span class=&quot;m&quot;&gt;10004&lt;/span&gt;  
 Content-Type     application/json  
 Content-Length     &lt;span class=&quot;m&quot;&gt;165&lt;/span&gt;  
 X-Policy-Failure-Message     BASIC authentication failed.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The browser then automatically pops up a dialog for us to enter the username and password:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-06-11/apiman-5.png&quot; alt=&quot;apiman logo&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A request is then sent that includes the username and password encoded into a string. In this request, the encoded (but not encrypted) username and password are included:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Request-Line&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     GET /apiman-gateway/serviceProducerOrg/echossl/1.0?apikey&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;6f8784cd-5754-47b0-9b8b-b2eb8c5b190f HTTP/1.1  
 Host     localhost:8443  
 User-Agent     Mozilla/5.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;X11&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; Linux x86_64&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; rv:24.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Gecko/20100101 Firefox/24.0  
 Accept     text/html,application/xhtml+xml,application/xml&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.9,*/*&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.8  
 Accept-Language     en-US,en&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.5  
 Accept-Encoding     gzip, deflate  
 Cookie     &lt;span class=&quot;nv&quot;&gt;__utma&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;111872281.1348865079.1409020839.1411395889.1419258109.7&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;__utmz&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;111872281.1409020839.1.1.utmcsr&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;direct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;utmccn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;direct&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;utmcmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;none&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;s_fid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;72CCAD206D09146C-233B60F47DBEA290  
 Connection     keep-alive  
 Authorization     Basic dXNlcjE6cGFzc3dvcmQx&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And, then we get the successful return code of 200 in a response:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Status-Line&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     HTTP/1.1 &lt;span class=&quot;m&quot;&gt;200&lt;/span&gt; OK  
 Connection     keep-alive  
 X-Powered-By     Undertow/1  
 Server     WildFly/8  
 Content-Length     &lt;span class=&quot;m&quot;&gt;755&lt;/span&gt;  
 Content-Type     application/json  
 Date     Wed, &lt;span class=&quot;m&quot;&gt;03&lt;/span&gt; Jun &lt;span class=&quot;m&quot;&gt;2015&lt;/span&gt; 13:43:34 GMT&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h2&gt;

&lt;p&gt;Just because a service is managed doesn’t automatically make it secure. JBoss apiman provides you with multiple options to add an authentication requirement when clients access your managed service.&lt;/p&gt;

&lt;h2 id=&quot;authors-acknowledgements&quot;&gt;Author’s Acknowledgements&lt;/h2&gt;

&lt;p&gt;As always, the author would like to acknowledge Eric Wittmann and the apiman team for their  review comments and suggestions on writing this post, and for adding new features to apiman!&lt;/p&gt;

&lt;h2 id=&quot;links&quot;&gt;Links&lt;/h2&gt;

&lt;p&gt;apiman&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://www.apiman.io&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Previous articles in this series:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://java.dzone.com/articles/impatient-new-users&lt;/li&gt;
  &lt;li&gt;http://java.dzone.com/articles/customizing-jboss-apiman&lt;/li&gt;
  &lt;li&gt;http://java.dzone.com/articles/jboss-apiman-api-manager-rest&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HTTP Authentication: Basic and Digest Access Authentication&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;http://tools.ietf.org/html/rfc2617&lt;/li&gt;
&lt;/ul&gt;

</description>
				
					<category term="authentication" />
				
					<category term="policy" />
				
				<pubDate>Thu, 11 Jun 2015 07:00:00 -0400</pubDate>
				<link>http://apiman.io/blog/authentication/policy/2015/06/11/basic-auth.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/authentication/policy/2015/06/11/basic-auth.html</guid>
			</item>
		
		
			<item>
				<title>Keycloak and dagger: Securing your services with OAuth2</title>
				
				        <dc:creator>Marc Savy</dc:creator>
				        <author>marc@rhymewithgravy.com</author>
				
				<description>&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One great advantage of API Management is centralising auth concerns, thereby avoiding burdensome reimplementation issues and streamlining your security processes. The good news is that you can easily configure apiman to handle many common auth use-cases, such as OAuth2 with our popular Keycloak OAuth2 policy which I&amp;#8217;ll outline in this blogpost.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;preparation&quot;&gt;Preparation&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this example, let&amp;#8217;s assume we&amp;#8217;re using apiman&amp;#8217;s &lt;a href=&quot;http://www.apiman.io/latest/download.html&quot;&gt;quickstart&lt;/a&gt; setup and have it running. I suggest using the &lt;em&gt;&#39;Or simply try this&amp;#8230;&amp;#8203;&#39;&lt;/em&gt; box.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;After you have your apiman quickstart running (replace &lt;strong&gt;apiman-1.1.3.Final&lt;/strong&gt; in the path below with whatever version you downloaded), we can live deploy a handy &lt;strong&gt;echo service&lt;/strong&gt; into our environment so we have something to test against:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;cd ~/apiman-1.1.3.Final/wildfly-8.2.0.Final/apiman/quickstarts/echo-service/
mvn clean install
mvn wildfly:deploy&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;installing-the-plugin&quot;&gt;Installing the Plugin&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Those amongst you with some experience of apiman may have noticed that the OAuth2 policy doesn&amp;#8217;t appear in the standard list of policies in the manager UI; that&amp;#8217;s because the OAuth2 policy is an example of an &lt;strong&gt;apiman plugin&lt;/strong&gt;, all of which are shipped separately from apiman, but are trivially easy to install. All you need to know is the GAV of the plugin, which in this case is:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;col style=&quot;width: 50%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;GAV&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Group&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;io.apiman.plugins&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Artifact&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;apiman-plugins-keycloak-oauth-policy&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Version&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;1.1.3.Final&lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_1&quot; class=&quot;footnote&quot; href=&quot;#_footnote_1&quot; title=&quot;View footnote.&quot;&gt;1&lt;/a&gt;]&lt;/span&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When logged into &lt;a href=&quot;http://localhost:8080/apimanui/&quot;&gt;the apiman manager UI&lt;/a&gt; as an administrator (for the quickstart that&amp;#8217;s u:`admin`, p:`admin123!`), navigate to the &lt;strong&gt;manage plugins&lt;/strong&gt; page:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;a class=&quot;image&quot; href=&quot;http://www.apiman.io/latest/user-guide.html#_plugins&quot;&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-06-03/sysadmin-manage-plugins.png&quot; alt=&quot;System Administration&quot;&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Select &lt;strong&gt;add plugin&lt;/strong&gt;, fill in the details as above, and &lt;strong&gt;add plugin&lt;/strong&gt;. That&amp;#8217;s it!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;setting-up&quot;&gt;Setting Up&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two essential components to our system. First, is the &lt;a href=&quot;http://keycloak.jboss.org&quot;&gt;Keycloak server&lt;/a&gt;, an all-in-one &lt;a href=&quot;https://en.wikipedia.org/wiki/Single_sign-on&quot;&gt;SSO&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Identity_management&quot;&gt;IdM&lt;/a&gt;; we&amp;#8217;ll configure it to be our identity source and handle the issuance of OAuth2 bearer tokens. Second, is the apiman OAuth2 policy; we&amp;#8217;ll set it up to validate the tokens precisely to our requirements.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s assume we&amp;#8217;re going to protect a very simple &lt;strong&gt;echo service&lt;/strong&gt;, which echoes back to the requestor the details of any request made to it. It is located at &lt;code&gt;&lt;a href=&quot;http://localhost:8080/apiman-echo&quot; class=&quot;bare&quot;&gt;http://localhost:8080/apiman-echo&lt;/a&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;keycloak-server&quot;&gt;Keycloak Server&lt;/h3&gt;
&lt;div class=&quot;admonitionblock important&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-important&quot; title=&quot;Important&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
There are a huge number of configuration permutations with Keycloak, and the most suitable approach will vary according to your requirements. It is highly recommended to consult the &lt;a href=&quot;http://keycloak.jboss.org/docs.html&quot;&gt;Keycloak guides&lt;/a&gt; to determine your optimal setup, as for the sake of brevity we&amp;#8217;re only going to cover a couple of trivial preconfigured scenarios.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, log into the &lt;a href=&quot;http://localhost:8080/auth/admin&quot;&gt;Keycloak server&lt;/a&gt;. If you&amp;#8217;re following our walkthrough, the log-in details are identical to those mentioned earlier (&lt;code&gt;admin&lt;/code&gt;, &lt;code&gt;admin123!&lt;/code&gt;). You can see that there is already an &lt;strong&gt;apiman&lt;/strong&gt; realm defined, but we&amp;#8217;re going to create a new one, so navigate to &lt;strong&gt;Add Realm&lt;/strong&gt; (top right), and import and upload &lt;a href=&quot;http://www.apiman.io/blog/resources/2015-06-04/stottie.json&quot;&gt;this demonstration realm definition&lt;/a&gt;; it provides an extremely simple setup where we have:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A realm: &lt;code&gt;stottie&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A single user: &lt;code&gt;rincewind&lt;/code&gt;, with password: &lt;code&gt;apiman&lt;/code&gt; and a realm role: &lt;code&gt;echomeister&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;And, a client: &lt;code&gt;apiman&lt;/code&gt;, which is allowed direct grants via Keycloak&amp;#8217;s &lt;a href=&quot;https://keycloak.github.io/docs/userguide/html/direct-access-grants.html&quot;&gt;RESTful Direct Access Grants API&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s quickly test requesting ourselves an OpenID Connect OAuth2 token:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;curl -X POST http://127.0.0.1:8080/auth/realms/stottie/protocol/openid-connect/token  -H &amp;quot;Content-Type: application/x-www-form-urlencoded&amp;quot; -d &amp;quot;username=rincewind&amp;quot; -d &#39;password=apiman&#39; -d &#39;grant_type=password&#39; -d &#39;client_id=apiman&#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This should return some JSON similar to the following:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;{
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;access_token&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;eyJhbGciOiJSUzI1NiJ9...&amp;lt;SNIP&amp;gt;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;expires_in&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;300&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;refresh_expires_in&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1800&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;refresh_token&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;eyJhbGcg...&amp;lt;SNIP&amp;gt;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;not-before-policy&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;session-state&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;69974623-be8b-49d7-840a-0330c6bdde21&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that the OAuth2 token we&amp;#8217;re interested in is contained within the &lt;code&gt;access_token&lt;/code&gt; field, with useful ancillary information about token validity and refreshing. If we base64 decode the token, we can see a lot interesting information, including the &lt;code&gt;echomiester&lt;/code&gt; realm role defined on &lt;code&gt;rincewind&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;json&quot;&gt;{
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;jti&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;c89b8cf7-84ef-4f02-9954-f8d3d4321473&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1433414538&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;nbf&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;0&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;iat&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;integer&quot;&gt;1433414238&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;iss&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;http://127.0.0.1:8080/auth/realms/stottie&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;aud&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;apiman&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;de4af322-85b2-4dbe-8d53-6a2ee29e4080&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;azp&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;apiman&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;session_state&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;69974623-be8b-49d7-840a-0330c6bdde21&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;client_session&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;b5bd36a0-d576-4593-be7b-4648612c25b8&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;allowed-origins&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [],
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;realm_access&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
        &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [
            &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;echomeister&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
        ]
    },
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;resource_access&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
        &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;account&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
            &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;roles&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [
                &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;view-profile&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
                &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;manage-account&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
            ]
        }
    },
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
    &lt;span class=&quot;key&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;preferred_username&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;content&quot;&gt;rincewind&lt;/span&gt;&lt;span class=&quot;delimiter&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This demonstrates one OAuth2&amp;#8217;s most useful attributes: all the information required to validate a request is contained within the token itself.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;apiman-oauth2-policy&quot;&gt;Apiman OAuth2 Policy&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, log into apiman, and &lt;strong&gt;Create a New Organization&lt;/strong&gt;; let&amp;#8217;s call it &lt;strong&gt;&lt;em&gt;Newcastle&lt;/em&gt;&lt;/strong&gt;. Select the &lt;strong&gt;Services&lt;/strong&gt; tab, and add a &lt;strong&gt;New Service&lt;/strong&gt;; we&amp;#8217;ll name this one &lt;strong&gt;&lt;em&gt;EchoService&lt;/em&gt;&lt;/strong&gt; and then &lt;strong&gt;Create Service&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Select the &lt;strong&gt;Implementation&lt;/strong&gt; tab, and set the endpoint to our echo service, &lt;code&gt;&lt;a href=&quot;http://localhost:8080/apiman-echo&quot; class=&quot;bare&quot;&gt;http://localhost:8080/apiman-echo&lt;/a&gt;&lt;/code&gt;. Save and move onto the &lt;strong&gt;Plans&lt;/strong&gt; tab, where you should opt to &lt;strong&gt;Make this service public&lt;/strong&gt;. After saving, we can move onto the &lt;strong&gt;Policies&lt;/strong&gt; tab, where the interesting stuff starts.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Navigate to &lt;strong&gt;Add Policy&lt;/strong&gt;, and select &lt;strong&gt;Keycloak OAuth Policy&lt;/strong&gt; from the drop-down list. A substantial set of options are available for your perusal, but for the purposes of this blog demo we&amp;#8217;ll set the following:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33%;&quot;&gt;
&lt;col style=&quot;width: 33%;&quot;&gt;
&lt;col style=&quot;width: 33%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Option&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Value&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Details&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Realm&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://127.0.0.1:8080/auth/realms/stottie&quot; class=&quot;bare&quot;&gt;http://127.0.0.1:8080/auth/realms/stottie&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;The path to our realm &lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_2&quot; class=&quot;footnote&quot; href=&quot;#_footnote_2&quot; title=&quot;View footnote.&quot;&gt;2&lt;/a&gt;]&lt;/span&gt;. Note that in older versions of Keycloak (pre &lt;code&gt;1.2.0&lt;/code&gt;), the realm will just be the &lt;strong&gt;stottie&lt;/strong&gt; (no path).&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Keycloak Realm Certificate&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Base64 encoded cert&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Paste your &lt;a href=&quot;http://localhost:8080/auth/admin/master/console/#/realms/stottie/keys-settings&quot;&gt;Keycloak realm certificate&lt;/a&gt;.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Forward Authorization Roles&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Forward Realm Roles, and set &lt;em&gt;Forward Realm Roles?&lt;/em&gt; to &lt;strong&gt;true&lt;/strong&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;If we decide to use the authorization policy later, we&amp;#8217;ll forward the realm roles contained within the token (i.e. &lt;code&gt;echomeister&lt;/code&gt;). If we don&amp;#8217;t need the granularity of roles, you can still just validate the token.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Select &lt;strong&gt;Add Policy&lt;/strong&gt;, and then &lt;strong&gt;Publish&lt;/strong&gt; the service. You can see its endpoint information in the &lt;strong&gt;Endpoint&lt;/strong&gt; tab, it should be similar to:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://localhost:8443/apiman-gateway/Newcastle/EchoService/1.0&quot; class=&quot;bare&quot;&gt;https://localhost:8443/apiman-gateway/Newcastle/EchoService/1.0&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;testing-authentication&quot;&gt;Testing Authentication&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s test our setup with cURL to see whether our request is &lt;em&gt;denied&lt;/em&gt; if we don&amp;#8217;t use a token:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;[msavy@mmbp tmp]$ curl -k  https://127.0.0.1:8443/apiman-gateway/Newcastle/EchoService/1.0
{
    &amp;quot;type&amp;quot;: &amp;quot;Authentication&amp;quot;,
    &amp;quot;failureCode&amp;quot;: 11005,
    &amp;quot;responseCode&amp;quot;: 401,
    &amp;quot;message&amp;quot;: &amp;quot;OAuth2 &#39;Authorization&#39; header or &#39;access_token&#39; query parameter must be provided.&amp;quot;,
    &amp;quot;headers&amp;quot;: {}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Excellent, it all seems to be working! Notice that we&amp;#8217;re using self-signed certificates for this demo, so the &lt;code&gt;-k&lt;/code&gt; flag will skip certificate validation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Next, let&amp;#8217;s do a request with a token. There are two ways to attach your bearer token to a request. Either:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Authorization&lt;/code&gt; header, as &lt;code&gt;Authorization: Bearer &amp;lt;token&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;access_token&lt;/code&gt; query parameter, as &lt;code&gt;&lt;a href=&quot;http://example.org/the/path/?access_token=&amp;lt;token&amp;gt&quot; class=&quot;bare&quot;&gt;http://example.org/the/path/?access_token=&amp;lt;token&amp;gt&lt;/a&gt;;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;First, let&amp;#8217;s retrieve a fresh token from Keycloak, and extract the &lt;code&gt;access_token&lt;/code&gt; field from the json using &lt;code&gt;jq&lt;/code&gt; &lt;span class=&quot;footnote&quot;&gt;[&lt;a id=&quot;_footnoteref_3&quot; class=&quot;footnote&quot; href=&quot;#_footnote_3&quot; title=&quot;View footnote.&quot;&gt;3&lt;/a&gt;]&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;curl -X POST http://127.0.0.1:8080/auth/realms/stottie/protocol/openid-connect/token  -H &quot;Content-Type: application/x-www-form-urlencoded&quot; -d &#39;username=rincewind&#39; -d &#39;password=apiman&#39; -d &#39;grant_type=password&#39; -d &#39;client_id=apiman&#39; | jq -r &#39;.access_token&#39;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Second, we&amp;#8217;ll take the token and attach it to our request to the service&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code&gt;[msavy@mmbp tmp]$ curl -k -H &quot;Authorization: Bearer eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiJiNDY1YW...&quot; https://127.0.0.1:8443/apiman-gateway/Newcastle/EchoService/1.0
{
  &quot;method&quot; : &quot;GET&quot;,
  &quot;resource&quot; : &quot;/apiman-echo&quot;,
  &quot;uri&quot; : &quot;/apiman-echo&quot;,
  &quot;headers&quot; : {
    &quot;Authorization&quot; : &quot;Bearer eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiJiNDY1YWMzNi1hMTczLTRjOWMtYWJjZS00MzE2MJ...&quot;,
    &quot;Host&quot; : &quot;127.0.0.1:8080&quot;,
    &quot;User-Agent&quot; : &quot;curl/7.37.1&quot;,
    &quot;Accept&quot; : &quot;*/*&quot;,
    &quot;Connection&quot; : &quot;keep-alive&quot;,
    &quot;Cache-Control&quot; : &quot;no-cache&quot;,
    &quot;Pragma&quot; : &quot;no-cache&quot;
  },
  &quot;bodyLength&quot; : null,
  &quot;bodySha1&quot; : null,
  &quot;counter&quot; : 1
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Great, it worked! We can see EchoService has now been reached, meaning our OAuth2 token was validated successfully, and it sent us back a response which includes the bearer token we used (you can strip this out in the options).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you&amp;#8217;re feeling lazy, here&amp;#8217;s &lt;a href=&quot;https://gist.github.com/msavy/9390bfcd497f3c683a1c&quot;&gt;an all-in-one script&lt;/a&gt; to do it for you.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;adding-authorization&quot;&gt;Adding Authorization&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re going to develop our example a little bit further. At present, we simply have a binary approach where we either allow or disallow based upon which realm the token was issued from. If we want a more granular approach where we can discriminate upon roles, then we need to add another element: &lt;strong&gt;Authorization&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The more observant readers will note that we have already added two of the required elements when we imported the realm into Keycloak; namely, a user &lt;code&gt;rincewind&lt;/code&gt; and a realm role &lt;code&gt;echomeister&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If we navigate back to the &lt;strong&gt;EchoService&lt;/strong&gt; service in the apiman UI, we can create a &lt;strong&gt;New Version&lt;/strong&gt;. We&amp;#8217;ll call it &lt;strong&gt;&lt;em&gt;2.0&lt;/em&gt;&lt;/strong&gt; and clone the previous configuration. Moving over to the &lt;strong&gt;Policies&lt;/strong&gt; tab again, we &lt;strong&gt;Add Policy&lt;/strong&gt; and select &lt;strong&gt;Authorization Policy&lt;/strong&gt; from the drop-down.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re going to add two rules:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 33%;&quot;&gt;
&lt;col style=&quot;width: 33%;&quot;&gt;
&lt;col style=&quot;width: 33%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;To access resource&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;using verb/action&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;the user must have role&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;/rincewind/.*&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;echomeister&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;/secret/.*&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;div&gt;&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;overlord&lt;/p&gt;
&lt;/div&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our example user has the first role, but not the second. &lt;strong&gt;Add&lt;/strong&gt; the policy and &lt;strong&gt;Publish&lt;/strong&gt; the service again. Our endpoint will now reflect the changed version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You will probably need to issue a new bearer token, which you can achieve by repeating the previous shell command.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;[msavy@mmbp tmp]$ curl -k -H &amp;quot;Authorization: Bearer eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiJmODAyZjFmMy1kN2JmLTQ0YjQtODA2N...&amp;quot; \
 https://127.0.0.1:8443/apiman-gateway/Newcastle/EchoService/2.0/rincewind/wizard
{
  &amp;quot;method&amp;quot; : &amp;quot;GET&amp;quot;,
  &amp;quot;resource&amp;quot; : &amp;quot;/apiman-echo/rincewind/wizard&amp;quot;,
  &amp;quot;uri&amp;quot; : &amp;quot;/apiman-echo/rincewind/wizard&amp;quot;,
  &amp;quot;headers&amp;quot; : {
    &amp;quot;Authorization&amp;quot; : &amp;quot;Bearer eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiJmODAyZjFmMy1kN2JmLTQ0YjQtODA2N...&amp;quot;,
    &amp;quot;Host&amp;quot; : &amp;quot;127.0.0.1:8080&amp;quot;,
    &amp;quot;User-Agent&amp;quot; : &amp;quot;curl/7.37.1&amp;quot;,
    &amp;quot;Accept&amp;quot; : &amp;quot;*/*&amp;quot;,
    &amp;quot;Connection&amp;quot; : &amp;quot;keep-alive&amp;quot;,
    &amp;quot;Cache-Control&amp;quot; : &amp;quot;no-cache&amp;quot;,
    &amp;quot;Pragma&amp;quot; : &amp;quot;no-cache&amp;quot;
  },
  &amp;quot;bodyLength&amp;quot; : null,
  &amp;quot;bodySha1&amp;quot; : null,
  &amp;quot;counter&amp;quot; : 19
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As our user &lt;code&gt;rincewind&lt;/code&gt; has the role &lt;code&gt;echomeister&lt;/code&gt;, his request went through successfully.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, if we try to access a resource for which he doesn&amp;#8217;t hold the appropriate role, we see an error message:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;CodeRay highlight&quot;&gt;&lt;code data-lang=&quot;ShellSession&quot;&gt;[msavy@mmbp tmp]$ curl -k -H &amp;quot;Authorization: Bearer eyJhbGciOiJSUzI1NiJ9.eyJqdGkiOiJmODAyZjFmMy1kN2JmLTQ0YjQtODA2N...&amp;quot; \
 https://127.0.0.1:8443/apiman-gateway/Newcastle/EchoService/2.0/secret/not/allowed

{
    &amp;quot;type&amp;quot;: &amp;quot;Authorization&amp;quot;,
    &amp;quot;failureCode&amp;quot;: 10009,
    &amp;quot;responseCode&amp;quot;: 0,
    &amp;quot;message&amp;quot;: &amp;quot;The user is not authorized to make this request (a required role is missing).&amp;quot;,
    &amp;quot;headers&amp;quot;: {}
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&amp;#8230;&amp;#8203;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We protected an apiman service using OAuth2; with examples of both simple authentication and role-based authorization. It should be easy to design your own role-based auth setups in combination with Keycloak.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&quot;footnotes&quot;&gt;
&lt;hr&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_1&quot;&gt;
&lt;a href=&quot;#_footnoteref_1&quot;&gt;1&lt;/a&gt; Use the version corresponding to your selected release of apiman
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_2&quot;&gt;
&lt;a href=&quot;#_footnoteref_2&quot;&gt;2&lt;/a&gt; Ensure you use whatever the valid ISS value is for your Keycloak realm. One quick way to find this is by decoding an access_token looking at what Keycloak has set for the &lt;code&gt;iss&lt;/code&gt; field
&lt;/div&gt;
&lt;div class=&quot;footnote&quot; id=&quot;_footnote_3&quot;&gt;
&lt;a href=&quot;#_footnoteref_3&quot;&gt;3&lt;/a&gt; We&amp;#8217;re going to use &lt;code&gt;jq&lt;/code&gt; to select the &lt;code&gt;access_token&lt;/code&gt; field in our JSON, so if you don&amp;#8217;t have &lt;code&gt;jq&lt;/code&gt; installed you can use your package manager to get it: OS X Brew &lt;code&gt;brew install jq&lt;/code&gt;; On Fedora &lt;code&gt;sudo yum install jq&lt;/code&gt;; On Debian &lt;code&gt;sudo apt-get install jq&lt;/code&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
				
					<category term="gateway" />
				
					<category term="security" />
				
					<category term="oauth2" />
				
					<category term="keycloak" />
				
					<category term="authentication" />
				
					<category term="authorization" />
				
				<pubDate>Tue, 09 Jun 2015 08:25:28 -0400</pubDate>
				<link>http://apiman.io/blog/gateway/security/oauth2/keycloak/authentication/authorization/2015/06/09/keycloak-oauth2.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/gateway/security/oauth2/keycloak/authentication/authorization/2015/06/09/keycloak-oauth2.html</guid>
			</item>
		
		
			<item>
				<title>Setting up your apiman development environment</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				
				<description>&lt;p&gt;For those of you who might be interested in hacking away at some core apiman code,
I thought it might be nice to create a reasonably comprehensive step-by-step
guide.  For the most part everything is straightforward, but there are a copule
of tricks you can use to get up and running fast and to be able to easily
iterate on any changes you make.&lt;/p&gt;

&lt;p&gt;Read on if this sounds like something you want to do!&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;what-will-this-post-cover&quot;&gt;What will this post cover?&lt;/h2&gt;
&lt;p&gt;Here is a high level overview of the steps we’ll take to getting a working
apiman development environment.  First, here are my basic assumptions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You are a java developer and have JDK7 or higher installed&lt;/li&gt;
  &lt;li&gt;You are familiar with maven and have it installed&lt;/li&gt;
  &lt;li&gt;You know git and have it installed&lt;/li&gt;
  &lt;li&gt;You want to use the Eclipse IDE&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Assuming you meet all of the above requirements, you should have no trouble
with this guide!  Here is what this post will cover:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Getting the apiman source code&lt;/li&gt;
  &lt;li&gt;Downloading and running Eclipse&lt;/li&gt;
  &lt;li&gt;Configuring Eclipse for apiman development&lt;/li&gt;
  &lt;li&gt;Importing the apiman source code into Eclipse&lt;/li&gt;
  &lt;li&gt;Running Development versions of the apiman components&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;getting-the-apiman-source-code&quot;&gt;Getting the apiman source code&lt;/h2&gt;
&lt;p&gt;The first thing you (obviously) need to do is download the apiman project
source code.  All of the code is in github, of course.  You can find the
code here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apiman/apiman&quot;&gt;https://github.com/apiman/apiman&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The ‘apiman’ github organization has a couple of additional repositories as
well.  For example the quickstarts and plugins each have their own repos.
But let’s stick with the core code for this post.&lt;/p&gt;

&lt;p&gt;If you want to follow best practice, you should “fork” the apiman repository
on github, then clone your forked copy.  Once you have used the github UI
to fork the repository, you would do something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git clone git@github.com:&amp;lt;YOUR-GITHUB-ID&amp;gt;/apiman.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I also recommend adding the upstream github repository as another remote
so that you can easily pull in upstream changes:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;git remote add upstream git@github.com:apiman/apiman.git&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;downloading-and-running-eclipse&quot;&gt;Downloading and running Eclipse&lt;/h2&gt;
&lt;p&gt;Alright - you’ve got the apiman code cloned on your local hard drive
somewhere.  The next step is to download Eclipse (if you don’t already
have it installed).  This can be done here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.eclipse.org/downloads/&quot;&gt;http://www.eclipse.org/downloads/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I like to download the “Eclipse IDE for Java EE Developers” version
because it comes with a lot of extra stuff I like to use.  But you should
be fine with the basic version as well.  I’m going to use the EE version
as I write this guide!&lt;/p&gt;

&lt;p&gt;Once you’ve completed the download, just unpack it and run Eclipse.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-06-04/eclipse-fresh.png&quot; alt=&quot;Fresh Eclipse&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;configuring-eclipse-for-apiman-development&quot;&gt;Configuring Eclipse for apiman development&lt;/h2&gt;
&lt;p&gt;Great!  You’ve got Eclipse running.  Now let’s make a minor change
to it specific to apiman development.  Go ahead and import the apiman code
formatter specification.  You can find this file in the apiman code
repository here:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;apiman/tools/src/eclipse/apiman-eclipse-formatter.xml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Import that file in the Eclipse Preferences dialog here:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-06-04/eclipse-formatter.png&quot; alt=&quot;Eclipse Preferences&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;importing-the-apiman-source-code-into-eclipse&quot;&gt;Importing the apiman source code into Eclipse&lt;/h2&gt;
&lt;p&gt;OK now we’re ready to import the apiman source code into Eclipse.  Because
apiman uses maven as its build system, and because Eclipse has maven support
built-in via m2e, this should be a snap.  Simply go to &lt;em&gt;File-&amp;gt;Import&lt;/em&gt; and
choose &lt;em&gt;Maven/Existing Maven Projects&lt;/em&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-06-04/import-apiman.png&quot; alt=&quot;Import apiman&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-06-04/import-apiman-2.png&quot; alt=&quot;Import apiman Confirm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Importing the projects into Eclipse may take some time, and Eclipse may
yell at you about unresolved m2e plugins and whatnot.  Make sensible choices
(e.g. resolve later) and go about your life.  Go get a cup of coffee, the
build will probably take a few minutes.&lt;/p&gt;

&lt;p&gt;It is possible you will run into a problem where the &lt;em&gt;apiman-manager-ui-hawtio&lt;/em&gt;
project gets into a build loop.  This can be corrected by disabling the
maven builder for that one project only.  Do this by right-click on that
project and choosing properties:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-06-04/project-properties.png&quot; alt=&quot;Project Properties&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Typically this will leave you with a bunch of annoying warnings in Eclipse,
most of which will be HTML Problems.  I will leave it as an exercise to the
reader about how to disable those.&lt;/p&gt;

&lt;p&gt;IMPORTANT:  you should have 0 java errors at this point!&lt;/p&gt;

&lt;h2 id=&quot;running-development-versions-of-the-apiman-components&quot;&gt;Running Development versions of the apiman components&lt;/h2&gt;
&lt;p&gt;Everything should now be loaded into Eclipse.  Now all you need is a quick
way to run everything.  Of course you can &lt;em&gt;always&lt;/em&gt; do a full rebuild via
maven and use the “install-all-wildfly8” profile:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cd ~/git/apiman
mvn clean install -Pinstall-all-wildfly8&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That will result in a full apiman environment installed in WildFly 8.  If you
use this approach you can run apiman here:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;cd ~/git/apiman/tools/server-all/target/wildfly-8.2.0.Final
./bin/standalone.sh --debug&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then you can connect a remote debugger to WildFly and debug apiman from Eclipse.&lt;/p&gt;

&lt;p&gt;But a quicker way to run the various apiman components exists.&lt;/p&gt;

&lt;p&gt;As you may or may not know, apiman consists of two components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The API Manager (RESTful services + UI)&lt;/li&gt;
  &lt;li&gt;The API Gateway&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can run/test these pieces together or separately.  Let’s first explore
the API Manager.&lt;/p&gt;

&lt;h3 id=&quot;launching-a-dev-version-of-the-api-manager-rest-services&quot;&gt;Launching a Dev version of the API Manager REST services&lt;/h3&gt;
&lt;p&gt;This is actually really easy:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Open up the java class &lt;em&gt;ManagerApiDevServer&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;Debug As-&amp;gt;Java Application&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Easy as that!  It should fire up an instance of Jetty with the apiman API
Manager backend (RESTful web services) deployed.  You can test this by going
here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:7070/apiman/system/status&quot;&gt;http://localhost:7070/apiman/system/status&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Log in using username &lt;em&gt;admin&lt;/em&gt; and password &lt;em&gt;admin&lt;/em&gt;.  Oh by the way, did I mention
that it runs on port 7070?  That’s important!&lt;/p&gt;

&lt;h3 id=&quot;using-gulp-to-make-ui-changes&quot;&gt;Using gulp to make UI changes&lt;/h3&gt;
&lt;p&gt;We use angularjs and typescript as the basis for the UI.  In order to develop
UI code you’ll need to use gulp.  We have documented how to do this here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/apiman/apiman/blob/master/manager/ui/hawtio/README.md&quot;&gt;https://github.com/apiman/apiman/blob/master/manager/ui/hawtio/README.md&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Give that a quick read!  When it asks you to configure your new copy of the
config.js file, it should look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;err&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;APIMAN_CONFIG_DATA&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;apiman&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;version&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1.1.0-SNAPSHOT&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;builtOn&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;2015-01-01&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;logoutUrl&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;logout&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;user&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;username&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;ui&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;header&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;api&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;endpoint&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;http://localhost:7070/apiman&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;auth&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;basic&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;quot;basic&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;quot;username&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;admin&amp;quot;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you get it all set up properly you should be able to point your browser here:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:2772/api-manager/dash&quot;&gt;http://localhost:2772/api-manager/dash&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now whenever you make changes to any of the apiman angularjs code, the browser
will automatically refresh and show you the changes!&lt;/p&gt;

&lt;h3 id=&quot;launching-a-dev-version-of-the-api-gateway&quot;&gt;Launching a dev version of the API Gateway&lt;/h3&gt;
&lt;p&gt;This one is easy as well.  Just open up the &lt;em&gt;GatewayDevServer&lt;/em&gt; java class
and debug it as an application (just like the API Manager above!)…&lt;/p&gt;

&lt;h2 id=&quot;wrapup&quot;&gt;Wrapup&lt;/h2&gt;
&lt;p&gt;Whew!  That took longer than I thought.  Please let me know if you run into
any snags.  There are probably lots of improvements you could explore, such as
using JRebel to never have to restart the API Manager or API Gateway java
processes again.&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description>
				
					<category term="eclipse" />
				
					<category term="development" />
				
					<category term="maven" />
				
				<pubDate>Thu, 04 Jun 2015 05:04:45 -0400</pubDate>
				<link>http://apiman.io/blog/eclipse/development/maven/2015/06/04/dev-environment.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/eclipse/development/maven/2015/06/04/dev-environment.html</guid>
			</item>
		
		
			<item>
				<title>We got the moves like swagger!</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				
				<description>&lt;p&gt;One of the weaknesses we’ve had in apiman until now is that service providers didn’t have
any way to document how to consume their services.  Well that has all changed with version
1.1.3.Final.  Now you can upload a Swagger spec document for your service.  If you do,
consumers will be able to browse your service documentation directly in the apiman UI.&lt;/p&gt;

&lt;p&gt;I think we can all agree that this is a welcome change and really improves the usability
of the system, particularly from the perspective of the application developer (aka the
service consumer).&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;adding-a-service-definition&quot;&gt;Adding a Service Definition&lt;/h2&gt;
&lt;p&gt;As a service provider, the only thing you need to do is add a service definition to your
service.  This is simple - just navigate to the new “Definition” tab in your service.
There you will be able to copy/paste or drag/drop a Swagger spec.  Make sure you set the
definition type to Swagger (JSON), and don’t forget to click Save!&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-swagger-spec&quot;&gt;What is a Swagger spec?&lt;/h2&gt;
&lt;p&gt;So maybe not everyone knows what Swagger is.  Swagger is a way to formally describe a
RESTful web service.  A Swagger spec is a JSON document that describes everything
about your RESTful API, including (but not limited to):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;API meta-data such as Name and Description&lt;/li&gt;
  &lt;li&gt;Resource Paths and the Operations/Methods they support&lt;/li&gt;
  &lt;li&gt;Input/Output types&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For more information I recommend navigating to the &lt;a href=&quot;http://swagger.io/&quot;&gt;Swagger Project&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;how-does-this-help-my-consumers&quot;&gt;How does this help my consumers?&lt;/h2&gt;
&lt;p&gt;Once you’ve got a Swagger spec created and added to your service, your service
consumers will be able to browse live documentation right from the apiman UI.  This
information will be available via a new “View Service Definition” link available on
the consumer’s “Service Details” page (the same page that consumers are shown when
they have searched for a service).  Here’s an example:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-06-02/service-details.png&quot; alt=&quot;Service Details&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A service consumer can see that there is a service definition they can click on, which
will give them a ton of information about how to use the service.  In the future, we
plan to allow consumers to do all sorts of interesting things with the Swagger spec.
For example, we can help consumers generate a client SDK in a variety of languages.
We can also allow them to simulate API calls right from the apiman UI - so they can
see what to expect.  But for right now, we simply show live documentation about the
service as described by the Swagger spec definition:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-06-02/service-definition.png&quot; alt=&quot;Service Definition&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As always, thanks for making it to the end of my ramblings!&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description>
				
					<category term="api-manager" />
				
					<category term="swagger" />
				
					<category term="service" />
				
					<category term="ui" />
				
				<pubDate>Tue, 02 Jun 2015 05:04:45 -0400</pubDate>
				<link>http://apiman.io/blog/api-manager/swagger/service/ui/2015/06/02/swagger.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/api-manager/swagger/service/ui/2015/06/02/swagger.html</guid>
			</item>
		
		
			<item>
				<title>The JBoss apiman API Manager REST services API</title>
				
				        <dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author>
				
				<description>&lt;p&gt;In this, the third article in our series on apiman, JBoss’ new open source API Management framework, we’ll examine apiman’s API Manager REST services API. apiman’s Management UI utilizes this API in the implementation for all of its user-visible features, and you can also use the same API to automate tasks with apiman.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;It’s inevitable that, after you work with a product’s UI for a while that you encounter tasks that are better suited to a scripting or batch interface. For example, if you have to perform a similar task for a large of related data items, the time that it can require to perform these tasks through an interactive UI can be prohibitive. Also, it’s easy for repetitive tasks to become error prone as you can lose focus, even if you are working in a well designed and easy to use interface such as apiman.&lt;/p&gt;

&lt;p&gt;One solution to this problem is to augment the UI with a command line or scripting interface. This can lead to a whole separate set of issues if the new interface is built on a different set of underlying routines than the UI. A better approach to allow access to the same routines in which the UI is constructed. This approach removes any duplication, and also enables you to replicate manual UI based tasks with automated or scripted tools.&lt;/p&gt;

&lt;p&gt;JBoss apiman follows this second approach with its REST interface.  All the services provided by apiman in its Management UI are directly supported in the API Manager REST services API. You can also directly access these same services through the REST API.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;Like a lot of things with JBoss open source software, installing the REST API is easy. In fact, if you have apiman installed, then you already have the REST API installed. (You can’t get much easier than that!)&lt;/p&gt;

&lt;p&gt;We covered installing apiman in the first article in this series (see: http://java.dzone.com/articles/impatient-new-users), so we won’t repeat that information here. A minimal set of install instructions are always available on the apiman site (http://www.apiman.io/latest/). The current set of instructions as of this writing are:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir ~/apiman-1.1.2.Final  
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/apiman-1.1.2.Final  
wget http://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip  
wget http://downloads.jboss.org/apiman/1.1.2.Final/apiman-distro-wildfly8-1.1.2.Final-overlay.zip  
unzip wildfly-8.2.0.Final.zip  
unzip -o apiman-distro-wildfly8-1.1.2.Final-overlay.zip -d wildfly-8.2.0.Final  
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;wildfly-8.2.0.Final  
./bin/standalone.sh -c standalone-apiman.xml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now that our apiman server is up and running, we can start to access the API Manager REST services API. However, before we start placing calls to services through the REST API, let’s take a look at how the API is organized.&lt;/p&gt;

&lt;h2 id=&quot;the-organization-of-the-api&quot;&gt;The Organization of the API&lt;/h2&gt;

&lt;p&gt;The documentation for the apiman REST API is available (for free, of course), here: http://www.apiman.io/latest/api-manager-restdocs.html&lt;/p&gt;

&lt;p&gt;The services and their endpoints represented in the API are divided into these groups:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;actions - The actions endpoint (http://localhost:8080/apiman/actions/) enables you to execute actions for apiman entities (such as plans, services, applications, etc.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;system/status - The system/status endpoint (http://localhost:8080/apiman/system/status) enables you to query the current state of the apiman system.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;currentuser - The currentuser endpoint (http://localhost:8080/apiman/currentuser/info) enables you to obtain or update information about the current user. This information is related to the user’s applications, services, organizations, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;gateways - The gateways endpoint (http://localhost:8080/apiman/gateways/) enables you to obtain information about an API Gateway, and to delete or create new gateways.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;organizations - The organizations endpoint (http://localhost:8080/apiman/organizations/) enables you to obtain information about existing organizations and to create new organizations.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;permissions - The permissions endpoint (http://localhost:8080/apiman/permissions/) enables you to obtain information about user’s permissions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;plugins - The plugins endpoint (http://localhost:8080/apiman/plugins/) enables you to obtain information about installed plugins, and to install new plugins.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;policyDefs - The policyDefs endpoint (http://localhost:8080/apiman/policyDefs/) enables you to obtain information about existing policy definitions, and to define new policy definitions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;roles - The roles endpoint (http://localhost:8080/apiman/roles/) enables you to obtain information about existing roles, update roles, and delete roles.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;search - The search endpoint (http://localhost:8080/apiman/search/) enables you to search for applications, organizations, or services.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;users - The users endpoint (http://localhost:8080/apiman/users/) enables you to search for information about users, including their applications and services.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Within each group, GET operations are defined to return information, and GET and POST operations are defined to make changes to apiman elements. Data passed to and returned from services through the API is in the form of JSON along with a return code.&lt;/p&gt;

&lt;h2 id=&quot;accessing-services-in-the-api-manager-rest-services-api&quot;&gt;Accessing Services in the API Manager REST services API&lt;/h2&gt;

&lt;p&gt;The best way to learn about the API Manager REST services API is to see it in action. Since these are REST services, it’s easy to access them. For example, we should be able to access the system status service with a simple GET operation at this endpoint:&lt;/p&gt;

&lt;p&gt;http://localhost:8080/apiman/system/status&lt;/p&gt;

&lt;p&gt;Let’s try this with curl. If we execute the following command, we should see the current system status:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -X GET http://localhost:8080/apiman/system/status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, that error is not exactly what we expected. There was no output.&lt;/p&gt;

&lt;p&gt;What went wrong? What’s missing? The answer is that our call to the service was missing authorization. In the same way that a user must login and be authorized to use the apiman Management UI, calls to the REST API must be authorized.&lt;/p&gt;

&lt;p&gt;For our example, we’ll keep things simple and stick to using basic authorization. (We’ll take a more extensive look at apiman and security in a later article in this series.)&lt;/p&gt;

&lt;p&gt;In order to resolve this failure, we have to send a properly encoded basic authorization header with every request you make. In Java8, we can generate a key by base64 encoding this string for the OOTB admin username and password: admin:admin123! with this statememt:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;base64encode(concat(&#39;admin&#39;, &#39;:&#39;, &#39;admin123!&#39;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This yields a key with a value of: YWRtaW46YWRtaW4xMjMh&lt;/p&gt;

&lt;p&gt;Now, let’s try that curl command again, but this time, we’ll include the key in the authorization header:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -H &quot;Authorization: Basic YWRtaW46YWRtaW4xMjMh&quot;
http://localhost:8080/apiman/system/status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And the result is:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{&quot;up&quot;:true,&quot;version&quot;:&quot;1.1.2-SNAPSHOT&quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As we mentioned earlier in this article, the responses returned by calls to the REST API are in in the form of JSON. In the case of our call to the http://localhost:8080/apiman/system/status endpoint, the expected format of the response is:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;string&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;up&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;boolean&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let’s carry on by looking at a more extensive example, where we use the REST API to automate a task that would be tedious if performed in the apiman Management UI.&lt;/p&gt;

&lt;h2 id=&quot;a-larger-example&quot;&gt;A Larger Example&lt;/h2&gt;

&lt;p&gt;Let’s say that you want to create multiple new organizations. You could of course manually enter these into the apiman Management UI. But, if you have a large number of organizations, for example, one for each of the countries in the EU, or each of the states in the USA, this would be a tedious and error prone task. This is an ideal candidate task for automation with the REST API.&lt;/p&gt;

&lt;p&gt;The coding for this example is simple. All you have to do is account for the encoding of the authorization to access the API Manager REST services API, and pass the information related to each organization that you create to this endpoint: http://localhost:8080/apiman/organizations&lt;/p&gt;

&lt;p&gt;Here’s an example program with an ice hockey flavor - the highlights are noted below:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;apimanExample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.OutputStreamWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.net.HttpURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.net.URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.nio.charset.StandardCharsets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SimplePutOrg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalSix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Boston&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Chicago&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Detroit&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Montreal&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;New York&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Toronto&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Bruins&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;BlackHawks&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Red Wings&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Canadiens&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Rangers&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Maple Leafs&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Creating new apiman org for: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalSix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;:&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalSix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt;             &lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Return code = &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createNewOrg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;originalSix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalSix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]));&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt;         &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;     &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createNewOrg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newOrgName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newOrgDescription&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;http://localhost:8080/apiman/organizations&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;HttpURLConnection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HttpURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;26&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;27&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;Base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Encoder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Base64&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;28&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;normalString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;admin:admin123!&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;29&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encodedString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;encodeToString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normalString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBytes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;StandardCharsets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;UTF_8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;30&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;31&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRequestProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Authorization&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Basic &amp;quot;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encodedString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;32&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRequestMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;POST&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;33&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDoOutput&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;34&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRequestProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;35&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setRequestProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Accept&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;36&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;37&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;OutputStreamWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;osw&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OutputStreamWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;38&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;osw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{\&amp;quot;name\&amp;quot;:\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newOrgName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; a new org\&amp;quot;,\&amp;quot;description\&amp;quot;:\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newOrgDescription&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;\&amp;quot;}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;39&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;osw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;40&lt;/span&gt;         &lt;span class=&quot;n&quot;&gt;osw&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;41&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;42&lt;/span&gt;         &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResponseCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;43&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;lineno&quot;&gt;44&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Code highlights:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Lines 13-16: Here’s where we define the test data. For this example, we’ll use the National Hockey League’s “original 6” teams.&lt;/li&gt;
  &lt;li&gt;Line 24: Here’s the URL for the service to which we’ll connect to create the new organizations.&lt;/li&gt;
  &lt;li&gt;Lines 27-29 - Here’s where we set up the encoding for the BASIC authorization.&lt;/li&gt;
  &lt;li&gt;Lines 31-35 - And here’s where we create the HttpURLConnection that we will use to connect to the service.&lt;/li&gt;
  &lt;li&gt;Line 32: Note that we will be performing a POST operation.&lt;/li&gt;
  &lt;li&gt;Lines 37-40 - And finally, here’s where we connect to the service and send our POST requests to create the new organizations.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we run this example, the following output indicates that the calls to the service through the REST API were successful, based on the return code of 200:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Creating new apiman org for: Boston:Bruins  
Return code = 200  
Creating new apiman org for: Chicago:BlackHawks  
Return code = 200  
Creating new apiman org for: Detroit:Red Wings  
Return code = 200  
Creating new apiman org for: Montreal:Canadiens  
Return code = 200  
Creating new apiman org for: New York:Rangers  
Return code = 200  
Creating new apiman org for: Toronto:Maple Leafs  
Return code = 200  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And - here’s the server output that tracks the creation of the new organizations:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;21:17:53,205 INFO [stdout] (default task-19) Created organization Boston a new org: OrganizationBean [id=Bostonaneworg, name=Boston a new org, description=Bruins, createdBy=admin, createdOn=Sun May 17 21:17:53 GMT-05:00 2015, modifiedBy=admin, modifiedOn=Sun May 17 21:17:53 GMT-05:00 2015]  
21:17:53,233 INFO [stdout] (default task-21) Created organization Chicago a new org: OrganizationBean [id=Chicagoaneworg, name=Chicago a new org, description=BlackHawks, createdBy=admin, createdOn=Sun May 17 21:17:53 GMT-05:00 2015, modifiedBy=admin, modifiedOn=Sun May 17 21:17:53 GMT-05:00 2015]  
21:17:53,253 INFO [stdout] (default task-23) Created organization Detroit a new org: OrganizationBean [id=Detroitaneworg, name=Detroit a new org, description=Red Wings, createdBy=admin, createdOn=Sun May 17 21:17:53 GMT-05:00 2015, modifiedBy=admin, modifiedOn=Sun May 17 21:17:53 GMT-05:00 2015]  
21:17:53,275 INFO [stdout] (default task-25) Created organization Montreal a new org: OrganizationBean [id=Montrealaneworg, name=Montreal a new org, description=Canadiens, createdBy=admin, createdOn=Sun May 17 21:17:53 GMT-05:00 2015, modifiedBy=admin, modifiedOn=Sun May 17 21:17:53 GMT-05:00 2015]  
21:17:53,295 INFO [stdout] (default task-27) Created organization New York a new org: OrganizationBean [id=NewYorkaneworg, name=New York a new org, description=Rangers, createdBy=admin, createdOn=Sun May 17 21:17:53 GMT-05:00 2015, modifiedBy=admin, modifiedOn=Sun May 17 21:17:53 GMT-05:00 2015]  
21:17:53,316 INFO [stdout] (default task-29) Created organization Toronto a new org: OrganizationBean [id=Torontoaneworg, name=Toronto a new org, description=Maple Leafs, createdBy=admin, createdOn=Sun May 17 21:17:53 GMT-05:00 2015, modifiedBy=admin, modifiedOn=Sun May 17 21:17:53 GMT-05:00 2015]  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally, here are the organizations as displayed in the apiman Management UI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-05-19/new-organizations.png&quot; alt=&quot;new organizations&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(It’s been a tough year for Boston Bruins’ fans. It’s nice to see the team listed first, even if it’s just an alphabetic list.  ;-)&lt;/p&gt;

&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h2&gt;

&lt;p&gt;The architecture of the apiman Management UI is that the UI is built on top of a REST API. This architecture makes it possible for you to directly access the services exposed by the API, and enables you to automate the tasks that you perform in the UI.&lt;/p&gt;
</description>
				
					<category term="rest" />
				
					<category term="api" />
				
					<category term="automation" />
				
				<pubDate>Tue, 19 May 2015 07:00:00 -0400</pubDate>
				<link>http://apiman.io/blog/rest/api/automation/2015/05/19/rest-api.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/rest/api/automation/2015/05/19/rest-api.html</guid>
			</item>
		
		
			<item>
				<title>A great way to test your custom apiman policy!</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				
				<description>&lt;p&gt;If you have tried creating your own custom apiman policy, you may have had a little bit of
difficulty creating useful junit tests for it.  Many policies require various apiman
runtime components to be available.  It can be super annoying trying to use something like
mockito to create mock versions of everything your policy needs.  Even for simple policies
you really just want a quick and effective way to test the implementation within a
reasonably “real world” harness.&lt;/p&gt;

&lt;p&gt;Well you’ve probably guessed by now that I’m about to show you how it’s done!  (OK fine,
how it &lt;em&gt;will&lt;/em&gt; be done in the next release of apiman - 1.1.3.Final)&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;In this post I’ll explain (and show!) you how to write a unit test for your apiman
policy, using the new Policy Tester junit framework we’ve created.&lt;/p&gt;

&lt;h2 id=&quot;first-you-need-a-custom-policy&quot;&gt;First you need a custom policy!&lt;/h2&gt;

&lt;p&gt;If you haven’t created a custom apiman policy yet, have a look at the
&lt;a href=&quot;http://www.apiman.io/latest/developer-guide.html#_plugins&quot;&gt;Developer Guide&lt;/a&gt; to
learn how.&lt;/p&gt;

&lt;p&gt;So for example, let’s say you’ve created your own simple custom policy class and it
looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MySimplePolicy&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPolicy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parseConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ConfigurationParseException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPolicyContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;IPolicyChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-MTP-Header&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-Fail-Test&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;IPolicyFailureFactoryComponent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;failureFactory&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IPolicyFailureFactoryComponent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doFailure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;failureFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createFailure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PolicyFailureType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Other&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Failure&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doApply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;apply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPolicyContext&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;IPolicyChain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-MTP-Response-Header&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Goodbye World&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doApply&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;ok-ive-got-a-policy-how-do-i-test-it&quot;&gt;OK I’ve got a policy, how do I test it?&lt;/h2&gt;

&lt;p&gt;Now that you’ve got your policy, you need a quick and effective way to test it.  I also
think it’s important for your test to run quickly and for you to be able to easily set
breakpoints to debug the code.  We explored using &lt;a href=&quot;http://arquillian.org/&quot;&gt;Arquillian&lt;/a&gt;
to configure and publish a service with the custom policy to a running WildFly server.
It actually works remarkably well, but the overhead of firing up a WildFly server just
to test a single policy seemed excessive.  That work will likely lead into a separate
testing effort focused on testing larger integration scenarios.&lt;/p&gt;

&lt;p&gt;OK enough - let’s get to the test!  The first thing you need is to pull the Policy
Tester dependency into your project’s pom.xml:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;io.apiman&lt;span class=&quot;nt&quot;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;apiman-test-policies&lt;span class=&quot;nt&quot;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;1.1.2-SNAPSHOT&lt;span class=&quot;nt&quot;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;scope&amp;gt;&lt;/span&gt;test&lt;span class=&quot;nt&quot;&gt;&amp;lt;/scope&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Great - now just create a new junit test and make sure it extends the &lt;code&gt;ApimanPolicyTest&lt;/code&gt;
base test class.  In that junit test you’ll need to sprinkle in a few annotations
provided by the apiman Policy Testing framework.  At a minimum you will need to
include the &lt;code&gt;@TestingPolicy&lt;/code&gt; and &lt;code&gt;@Configuration&lt;/code&gt; annotations.  Both of these annotations
can be specified at either the &lt;em&gt;Class&lt;/em&gt; or &lt;em&gt;Method&lt;/em&gt; level. The former tells the testing
framework which policy is being tested.  The latter describes the policy configuration
that should be used for the test.&lt;/p&gt;

&lt;p&gt;Just look at the example, already:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@TestingPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MySimplePolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyTestPolicyTest1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApimanPolicyTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Send a test HTTP request to the service (resulting in executing the policy).&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PolicyTestResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PolicyTestRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PolicyTestRequestType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/some/resource&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-Test-Name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;testGet&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Now do some assertions on the result!&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;EchoResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EchoResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;GET&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/some/resource&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;testGet&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-Test-Name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Assert the request header that was added by the policy&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-MTP-Header&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Assert the response header was added by the policy&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;assertEquals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Goodbye World&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-MTP-Response-Header&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&quot;so-whats-going-on-here&quot;&gt;So what’s going on here?&lt;/h2&gt;

&lt;p&gt;Let me tell you!  For each test method in your junit test, we’ll actually spin up a fully
functional apiman API Gateway.  We’ll also publish a test service that’s configured with
your custom policy (and using the policy configuration you specified in the &lt;code&gt;@Configuration&lt;/code&gt;
annotation).  After that, it’s a simple matter of sending one or more simulated HTTP
requests to the gateway.  You do that by sending a &lt;code&gt;PolicyTestRequest&lt;/code&gt; to the &lt;code&gt;send&lt;/code&gt; method.
Easy peasy!&lt;/p&gt;

&lt;p&gt;Note that it’s pretty easy to create a &lt;code&gt;PolicyTestRequest&lt;/code&gt; - there’s a nice little fluent
builder you can use to create it.  The builder allows you to set the HTTP verb, the resource
path, and any HTTP headers.&lt;/p&gt;

&lt;h2 id=&quot;what-about-the-back-end-apiservice&quot;&gt;What about the back-end API/service?&lt;/h2&gt;

&lt;p&gt;Yeah that’s a good point.  Assuming your policy doesn’t produce a failure, the API Gateway
we’re using for the test needs to “invoke” a back-end service and return the result.  We
simulate this rather than actually going out and making a REST request.  By default, we
create a simple Echo back-end service which bundles up all the information in the REST
request (including anything your policy may have added to the request) and builds a JSON
response that includes all that information.  This is handy because it allows you to
verify that, for example, any HTTP headers your policy added to the request actually
made it through to the back-end service.&lt;/p&gt;

&lt;p&gt;Now are you ready for an advanced topic?  If not I understand, you can just hit the Back
button on your browser!&lt;/p&gt;

&lt;p&gt;Still here?  Great!  Another thing you can do is actually provide your own simulated
back-end service.  This is necessary sometimes when your policy does something
specific with, for example, the service response payload.  You may actually need your
test to respond in a certain way.  To accomplish this all you need to do is use the
&lt;code&gt;@BackEndService&lt;/code&gt; annotation, providing a &lt;em&gt;Class&lt;/em&gt; that implements the
&lt;code&gt;IPolicyTestBackEndService&lt;/code&gt; interface.  You do that, and we’ll use your simulated
back end service for the test instead of the echo service!  :)&lt;/p&gt;

&lt;p&gt;What would that look like?  Something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;nd&quot;&gt;@TestingPolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MySimplePolicy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyTestPolicyTest1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ApimanPolicyTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@BackEndService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyCustomBackEndServiceImpl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testGet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Send a test HTTP request to the service (resulting in executing the policy).&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PolicyTestResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PolicyTestRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PolicyTestRequestType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GET&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;/some/resource&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;header&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;X-Test-Name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;testGet&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Now do some assertions on the result!&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;MyCustomBackEndServiceResponseBean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;entity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MyCustomBackEndServiceResponseBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Do some more assertions here using the entity from above!&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then perhaps your custom back end implementation class might look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyCustomBackEndServiceImpl&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IPolicyTestBackEndService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PolicyTestBackEndServiceResponse&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;requestBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Create a valid service response for this request, and then configure it.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;ServiceResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceResponse&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ServiceResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;serviceResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;serviceResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;OK&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;serviceResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Date&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;serviceResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Server&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;apiman.policy-test&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;serviceResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getHeaders&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;text/plain&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Let&amp;#39;s respond with a classic &amp;quot;Hello World&amp;quot; for the response body&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;PolicyTestBackEndServiceResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PolicyTestBackEndServiceResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serviceResponse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Alright - if you made it this far thanks for reading!!&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description>
				
					<category term="policy" />
				
					<category term="junit" />
				
					<category term="testing" />
				
				<pubDate>Sat, 09 May 2015 05:07:45 -0400</pubDate>
				<link>http://apiman.io/blog/policy/junit/testing/2015/05/09/policy-testing.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/policy/junit/testing/2015/05/09/policy-testing.html</guid>
			</item>
		
		
			<item>
				<title>Authorization: good god, what is it good for?</title>
				
				        <dc:creator>Eric Wittmann</dc:creator>
				        <author>eric.wittmann@redhat.com</author>
				
				<description>&lt;p&gt;Quite a bit, actually.  :)&lt;/p&gt;

&lt;p&gt;I want to talk about how Authorization currently works in apiman, because it’s
a little bit more loosely coupled than you might expect.  Note that at some
point in the future we’re going to be renovating how policies are defined and
configured in the API Manager UI.  But until then, you can refer to this blog
post for an overview of how to configure Authorization!&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;I won’t bury the lead - the key to getting Authorization to work is understanding
that it &lt;em&gt;only&lt;/em&gt; works together with Authentication.  First you must add and
configure a compatible &lt;em&gt;Authentication&lt;/em&gt; policy, which will be responsible for
extracting the user’s roles and passing them along to the Authorization policy.&lt;/p&gt;

&lt;h2 id=&quot;define-your-terms-sir&quot;&gt;Define your terms, sir!&lt;/h2&gt;
&lt;p&gt;Let’s make sure we’re on the same page with respect to terminology, shall we?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Authentication&lt;/strong&gt;: the act of validating that a user is who she claims to be, by checking provided credentials against some source of identity.  Examples include BASIC Authentication and OAuth2.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Authorization&lt;/strong&gt;: the act of ensuring that the authenticated user has &lt;em&gt;permission&lt;/em&gt; to perform the requested action or view the requested data.  Typically involves checking that the user possesses one or more required roles.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;how-does-this-work-in-apiman&quot;&gt;How does this work in apiman?&lt;/h2&gt;

&lt;p&gt;I’m glad you asked.  In apiman we have split these two functions out into separate policies.  This allows us to use the same Authorization policy regardless of what type of Authentication is being used.&lt;/p&gt;

&lt;p&gt;Basically you need to do the following two things:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Add and configure an Authentication policy such as the BASIC Authentication Policy or the Keycloak OAuth2 Authentication Policy&lt;/li&gt;
  &lt;li&gt;Add and configure an Authorization Policy.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it in a nutshell!&lt;/p&gt;

&lt;h2 id=&quot;give-me-more-details&quot;&gt;Give me more details!&lt;/h2&gt;

&lt;p&gt;OK, OK.  If you’re reading this you probably know the apiman basics - how to create Organizations and Services and whatnot.  If not, I would recommend you check out the &lt;a href=&quot;http://www.apiman.io/latest/user-guide.html&quot;&gt;User Guide&lt;/a&gt; or the &lt;a href=&quot;http://www.apiman.io/latest/tutorials.html&quot;&gt;Tutorials&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Once you have a service that you want to configure, go ahead and add a new policy.  Choose, for example, the &lt;em&gt;BASIC Authentication Policy&lt;/em&gt; and configure it as seen in the following screenshot:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-05-08/basic-auth-config.png&quot; alt=&quot;Example BASIC Authentication configuration&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you’ve added that policy, you can add the Authorization Policy - make sure they are in the proper order, since the Authentication policy must execute first.  Configure the Authorization Policy however you like, using roles appropriate for your users.  For example, it might look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-05-08/authorization-config.png&quot; alt=&quot;Example Authorization configuration&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once all is said and done, you should have two (at least) policies configured for your service.  It might look something like this in the UI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-05-08/auth-policies.png&quot; alt=&quot;Example policy list&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you follow those steps, everything should work out alright for you!  The Authorization Policy is capable of being quite fine-grained.  You can configure role based access via custom resource location regular expressions and HTTP verb(s).  If all you want is a global required role to access your API, that’s easy too:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Resource Path&lt;/strong&gt;: /.*&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Verb/action&lt;/strong&gt;: *&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Required Role&lt;/strong&gt;: &lt;your-role&gt;&lt;/your-role&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Good luck and come find us on the mailing list or IRC if you have any trouble!&lt;/p&gt;

&lt;p&gt;/post&lt;/p&gt;
</description>
				
					<category term="authorization" />
				
					<category term="authentication" />
				
					<category term="policy" />
				
				<pubDate>Fri, 08 May 2015 09:15:15 -0400</pubDate>
				<link>http://apiman.io/blog/authorization/authentication/policy/2015/05/08/authorization.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/authorization/authentication/policy/2015/05/08/authorization.html</guid>
			</item>
		
		
			<item>
				<title>Customizing JBoss apiman Through Policy Plugins</title>
				
				        <dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author>
				
				<description>&lt;p&gt;This is the second in a series of articles exploring API management with JBoss apiman. The first article
was a general introduction to apiman for impatient users where in only 10 minutes we installed apiman,
created users and organizations, and services, policies, contracts, and applications. In this article,
we’ll take the first step toward customizing apiman by creating new plugins to implement service policies.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;The major new feature added to release 1.0.2 of apiman &lt;a href=&quot;http://www.apiman.io/&quot;&gt;http://www.apiman.io/&lt;/a&gt; is the ability to extend its features through a custom plugin framework. Since policies perform the most important apiman runtime operations, plugins that enable you to create new policies are the first type of plugins to be supported.&lt;/p&gt;

&lt;p&gt;In this article, we’ll examine all the steps that you must perform to create a new policy plugin, and then import it into apiman and configure a service to put it into use.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;For this article, we’ll assume that you have completed all the steps in the first article in this series. The first article guides even the most impatient user through installing and using apiman.&lt;/p&gt;

&lt;h2 id=&quot;accessing-the-example-plugins&quot;&gt;Accessing the Example Plugins&lt;/h2&gt;

&lt;p&gt;Like all JBoss software, apiman provides functioning example code that you can use as a starting point for your own plugins. The easiest way to create and package an apiman is as a standard maven project packaged as a .war file.&lt;/p&gt;

&lt;p&gt;To download a copy of the example plugins, execute this git command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/apiman/apiman-plugins
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the git clone operation completes, you’ll have the source code for multiple example plugins. The exact set of plugins that you have downloaded may change, depending on when you download them, as more examples are always being added. For the purposes of this article, we’ll focus on the “config-policy” example plugin. This plugin demonstrates how a plugin can be used to set the value of properties in a message being processed by a service. Specifically, this plugin defines properties in the request and response headers and enables you to set their values to “true.”&lt;/p&gt;

&lt;h2 id=&quot;requirements-for-a-plugin-implementation&quot;&gt;Requirements for a Plugin Implementation&lt;/h2&gt;

&lt;p&gt;The easiest way that an apiman policy plugin can be build and packaged is as a standard maven project packaged as a .war file. There are just a few modifications that are required to convert a .war into a plugin.&lt;/p&gt;

&lt;p&gt;Let’s take a closer look at the files and directories that comprise the apiman config-policy plugin, and the changes that are needed to implement a plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;├---pom.xml
└---src
└---main
├---apiman
│  ├---plugin.json
│  └---policyDefs
│    ├---config-policyDef.json
│    └---schemas
│  └---config-policyDef.schema
└---java
└---io
└---apiman
└---plugins
└---config_policy
├---ConfigBean.java
└---ConfigPolicy.java
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The most obvious difference is the addition of the “apiman” directory. This directory is used to contain the configuration files for the plugin. (In other words, the files that make the project a plugin.) The only project-wide configuration change that you have to make is to modify the plugin’s maven pom.xml file to include the apiman directory when the project is built. The following lines are added to the plugin’s pom.xml file:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;resource&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;directory&amp;gt;&lt;/span&gt;src/main/apiman&lt;span class=&quot;nt&quot;&gt;&amp;lt;/directory&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;targetPath&amp;gt;&lt;/span&gt;META-INF/apiman&lt;span class=&quot;nt&quot;&gt;&amp;lt;/targetPath&amp;gt;&lt;/span&gt;  
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;filtering&amp;gt;&lt;/span&gt;true&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filtering&amp;gt;&lt;/span&gt;  
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/resource&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The result of these statements in the pom.xml file is that the contents of the apiman directory are included in the project build’s META-INF directory. (We’ll take a look at this later when we build the plugin project.) Setting filtering to true enables maven property expansion during the creation of the plugin war file.
Configuration files for the plugin are contained in the apiman directory. The primary configuration file is the “plugin.json” file. This file is required for all apiman plugins, regardless of the plugin type. The meta-data contained in this file describes the plugin and is displayed in the API Manager UI.&lt;/p&gt;

&lt;p&gt;Since our example is contributing a policy, it must contain a JSON file that defines the policy. This JSON file is contained in the apiman/policyDefs directory and is named “config-policyDef.json.” This file defines the following fields for the policy:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;id&lt;/em&gt; - A unique identifier for the policy&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;name&lt;/em&gt; - A user friendly (in other words, a human readable) name for the policy. This policy name is displayed in the API Manager UI&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;description&lt;/em&gt; - A description of the policy&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;policyImpl&lt;/em&gt; - This is the fully qualified classname name of the Java class that actually implements the policy. This value must be properly formatted to include information about the plugin, including placeholders for maven properties, for example, project version.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;icon&lt;/em&gt; - This is the name of a Font Awesome icon &lt;a href=&quot;http://fontawesome.github.io/Font-Awesome/&quot;&gt;http://fortawesome.github.io/Font-Awesome/&lt;/a&gt; that is displayed for the Policy in the API Manager UI.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;formType&lt;/em&gt; - The type of policy configuration UI form. Our example uses JsonSchema.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;form&lt;/em&gt; - This is a relative path to the policy configuration UI form contained in the plugin. Our examples uses the JSON Schema that defines the configuration data format. (More on this file in a minute.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In our example, the config-policyDef.json looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;id&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;config-policy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Config Policy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;A policy used to showcase policy configuration.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;policyImpl&amp;quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;plugin:${project.groupId}:${project.artifactId}:${project.version}:${project.packaging}/io.apiman.plugins.config_policy.ConfigPolicy&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;icon&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sliders&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;formType&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;JsonSchema&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;form&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;schemas/config-policyDef.schema&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We mentioned that since our example uses the JSON schema &lt;a href=&quot;http://json-schema.org/documentation.html&quot;&gt;http://json-schema.org/documentation.html&lt;/a&gt;, we have to also define the configuration data format. This is done in the policyDefs/schemas/config-policyDef.schema file. This file defines the format used in the policy configuration file data and is used by the API Manager UI to generate a form that is used to fill in the values to be used to configure the policy. In our example, the policy’s JSON schema defines two properties: requestHeader and responseHeader.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Configure HTTP Headers&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Set the HTTP request header to populate with the value &amp;#39;true&amp;#39; when the request is made. Also set the HTTP response header to populate with the value &amp;#39;true&amp;#39; after the response is received from the back-end service.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;object&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;quot;requestHeader&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Request Header&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;minLength&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;maxLength&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;quot;responseHeader&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;title&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Response Header&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;minLength&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;maxLength&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;
   &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That finishes the description of the policy’s configuration files. To complete the policy plugin, the example also requires the Java implementation for the policy itself. The policy implementation is contained in the src/main/java/io/apiman/plugins/config_policy/ConfigPolicy.java file. The policy is very simple as it merely appends a header to the http request and response.&lt;/p&gt;

&lt;p&gt;Java policy classes must implement the apiman IPolicy interface. This example takes that a step further by actually extending the io.apiman.gateway.engine.policies.AbstractMappedPolicy class. By doing so, the policy Java code can take advantage of the AbstractMappedPolicy’s class use of the Jackson (https://github.com/FasterXML/jackson) JSON parser to parse the policy configuration data into a Java bean. (In this example, the bean is implemented in  src/main/java/io/apiman/plugins/config_policy/ConfigBean.java.) If the policy implemented the IPolicy interface, instead of extending AbstractMappedPolicy, then the policy Java class would have to implement its own parser.&lt;/p&gt;

&lt;h2 id=&quot;building-the-plugin-and-installing-it-into-the-maven-repo&quot;&gt;Building the Plugin and Installing it into the Maven Repo&lt;/h2&gt;

&lt;p&gt;Building the plugin with maven is easy. Just execute this command from the directory that contains the plugin’s pom.xml file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mvn install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In case you’re wondering why, we’re installing the plugin into the maven repo. The answer is simply that in the current release of apiman, the only supported install path is from the maven repo. Future releases of apiman will likely support additional installation paths.&lt;/p&gt;

&lt;h2 id=&quot;installing-a-plugin-into-apiman&quot;&gt;Installing a Plugin into apiman&lt;/h2&gt;

&lt;p&gt;In apiman, a policy plugin, once installed, is available on a system-wide basis. Accordingly, plugins can only be installed by an admin user. After you login as admin, you’ll see this in the admin UI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-03-06/apiman-1.png&quot; alt=&quot;System Administration&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After selecting “Manage Plugins,” you’ll see a screen that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-03-06/apiman-2.png&quot; alt=&quot;Plugins&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, if you then select “Add Plugin,” you’ll see this screen:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-03-06/apiman-3.png&quot; alt=&quot;Add Plugin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The GroupId, ArtifactId, and Version information is all available in the example plugin’s pom.xml file:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;GroupId&lt;/em&gt;: io.apiman.plugins&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;ArtifactId&lt;/em&gt;: apiman-plugins-config-policy&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Version&lt;/em&gt;: 1.0.3-SNAPSHOT&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;After you enter this information for the plugin and click on “Add Plugin,” you’ll see this displayed in the UI:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-03-06/apiman-4.png&quot; alt=&quot;Plugins&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! The plugin is installed and is ready to be used! Let’s add it to a service and see it in action.&lt;/p&gt;

&lt;h2 id=&quot;using-the-installed-plugin&quot;&gt;Using the Installed Plugin&lt;/h2&gt;

&lt;p&gt;First, we have to log out of the admin account in the Admin UI and then log back in as the “serprov” service provider. Then, select our “echo” service, and create a new version of the service, based on the original version of the service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-03-06/apiman-6.png&quot; alt=&quot;New Service Version&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, when you add a new policy to the service, you’ll see the example config service that we just installed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-03-06/apiman-5.png&quot; alt=&quot;Add Policy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When you select the Config Policy, you’ll be presented with a dialog where you can specify the values for the two properties defined in the policy:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-03-06/apiman-7.png&quot; alt=&quot;Add Policy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s fill in some easy to remember values:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-03-06/apiman-8.png&quot; alt=&quot;Add Policy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After adding the policy, you’ll see it displayed in the policies defined for the service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-03-06/apiman-9.png&quot; alt=&quot;Add Policy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then publish the service. In order to consume the service, login to the API Manager UI as the application developer “appdev”, and create a new application that uses the new service. (We covered the creation of new applications in detail in the first article in this series)&lt;/p&gt;

&lt;p&gt;And when the service is invoked, you’ll see something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-03-06/apiman99.png&quot; alt=&quot;REST Client&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-03-06/apiman100.png&quot; alt=&quot;REST Client&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;in-conclusion&quot;&gt;In Conclusion&lt;/h2&gt;

&lt;p&gt;OK, let’s recap. apiman is a rapidly growing and developing project. Each new release brings new features. In release 1.0.2, it became possible for users to contribute custom policies into their apiman installation through the API Manager UI.&lt;/p&gt;
</description>
				
					<category term="plugins" />
				
					<category term="policies" />
				
					<category term="development" />
				
					<category term="maven" />
				
				<pubDate>Fri, 06 Mar 2015 05:22:00 -0500</pubDate>
				<link>http://apiman.io/blog/plugins/policies/development/maven/2015/03/06/custom-policies.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/plugins/policies/development/maven/2015/03/06/custom-policies.html</guid>
			</item>
		
		
			<item>
				<title>An Impatient New User&#39;s Introduction to API Management with JBoss apiman 1.0</title>
				
				        <dc:creator>Len DiMaggio</dc:creator>
				        <author>ldimaggi@redhat.com</author>
				
				<description>&lt;p&gt;Software application development models are evolutionary things. New technologies are always being created
and require new approaches. It’s frequently the case today, that a service oriented architecture (SOA) model
is used and that the end product is a software service that can be used by applications. The explosion in
growth of mobile devices has only accelerated this trend. Every new mobile phone sold is another platform
onto which applications are deployed. These applications are often built from services provided from multiple
sources. The applications often consume these services through their APIs.&lt;/p&gt;

&lt;p&gt;OK, that’s all interesting, but why does this matter?&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;Here’s why:&lt;/p&gt;

&lt;p&gt;If you are providing a service, you’d probably like to receive payment when it’s used by an application. For
example, let’s say that you’ve spent months creating a new service that provides incredibly accurate and
timely driving directions. You can imagine every mobile phone GPS app making use of your service someday.
That is, however, assuming that you can find a way to enforce a contract on consumers of the API and provide
them with a service level agreement (SLA). Also, you have to find a way to actually track consumers’ use of
the API so that you can actually enforce that SLA. Finally, you have to have the means to update a service
and publish new versions of services.&lt;/p&gt;

&lt;p&gt;Likewise, if you are consuming a service, for example, if you want to build the killer app that will use that
cool new mapping service, you have to have the means to find the API, identify the API’s endpoint, and
register your usage of the API with its provider.&lt;/p&gt;

&lt;p&gt;The approach that is followed to fulfill both service providers’ and consumers’ needs is…API Management.&lt;/p&gt;

&lt;h2 id=&quot;jboss-apiman-10&quot;&gt;JBoss apiman 1.0&lt;/h2&gt;

&lt;p&gt;apiman is JBoss’ open source API Management system. apiman fulfills service API providers’ and consumers’
needs by implementing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;API Manager&lt;/em&gt; - The API Manager provides an easy way for API/service providers to use a web UI to define service contracts for their APIs, apply these contracts across multiple APIs, and control role-based user access and API versioning. These contracts can govern access to services and limits on the rate at which consumers can access services. The same UI enables API consumers to easily locate and access APIs.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;em&gt;API Gateway&lt;/em&gt; - The gateway applies the service contract policies of API Management by enforcing at runtime the rules defined in the contracts and tracking the service API consumers’ use of the APIs for every request made to the services. The way that the API Gateway works is that the consumer of the service accesses the service through a URL that designates the API Gateway as a proxy for the service. If the policies defined to govern access to the service (see a later section in this post for a discussion of apiman polices), the API Gateway then proxies requests to the service’s backend API implementation.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The best way to understand API Management with apiman is to see it in action. In this post, we’ll install
apiman 1.0, configure an API with contracts through the API Manager, and watch the API Gateway control access
to the API and track its use.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;

&lt;p&gt;We don’t need very much to run apiman out of the box. Before we install apiman, you’ll have to have Java (version 1.7 or newer) installed on your system. You’ll also need to git and maven installed to be able to build the example service that we’ll use.&lt;/p&gt;

&lt;p&gt;A note on software versions: In this post we’ll use the latest available version of apiman as of December 2014. As if this writing, version 1.0 of apiman was just released (December 2014). Depending on the versions of software that you use, some screen displays may look a bit different.&lt;/p&gt;

&lt;h2 id=&quot;getting-apiman&quot;&gt;Getting apiman&lt;/h2&gt;

&lt;p&gt;Like all JBoss software, installation of apiman is simple. First, you will need an application server on which to install and run apiman. We’ll use the open source JBoss WildFly server release 8.2 &lt;a href=&quot;http://www.wildfly.org/&quot;&gt;http://www.wildfly.org/&lt;/a&gt;.  To make things easier, apiman includes a pointer to JBoss WildFly on its download page here: &lt;a href=&quot;http://www.apiman.io/latest/download.html&quot;&gt;http://www.apiman.io/latest/download.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;To install WildFly, simply download &lt;a href=&quot;http://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip&quot;&gt;http://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip&lt;/a&gt; and unzip the file into the directory in which you want to run the sever.&lt;/p&gt;

&lt;p&gt;Then, download the apiman 1.0 WildFly overlay zip file inside the directory that was created when you un-zipped the WildFly download. The apiman 1.0 WildFly overlay zip file is available here: &lt;a href=&quot;http://downloads.jboss.org/apiman/1.0.0.Final/apiman-distro-wildfly8-1.0.0.Final-overlay.zip&quot;&gt;http://downloads.jboss.org/apiman/1.0.0.Final/apiman-distro-wildfly8-1.0.0.Final-overlay.zip&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The commands that you will execute will look something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mkdir apiman
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;apiman
unzip wildfly-8.2.0.Final.zip
unzip -o apiman-distro-wildfly8-1.0.0.Final-overlay.zip -d wildfly-8.2.0.Final&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, to start the server, execute these commands:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;wildfly-8.2.0.Final
./bin/standalone.sh -c standalone-apiman.xml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The server will write logging messages to the screen. When you see some messages that look like this, you’ll know that the server is up and running with apiman installed:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;13:57:03,229 INFO  [org.jboss.as.server] (ServerService Thread Pool -- 29) JBAS018559: Deployed &amp;quot;apiman-ds.xml&amp;quot; (runtime-name : &amp;quot;apiman-ds.xml&amp;quot;)
13:57:03,261 INFO  [org.jboss.as] (Controller Boot Thread) JBAS015961: Http management interface listening on &amp;lt;a href=&amp;quot;http://127.0.0.1:9990/management&amp;quot;&amp;gt;http://127.0.0.1:9990/management&amp;lt;/a&amp;gt;
13:57:03,262 INFO  [org.jboss.as] (Controller Boot Thread) JBAS015951: Admin console listening on &amp;lt;a href=&amp;quot;http://127.0.0.1:9990&amp;quot;&amp;gt;http://127.0.0.1:9990&amp;lt;/a&amp;gt;
13:57:03,262 INFO  [org.jboss.as] (Controller Boot Thread) JBAS015874: WildFly 8.2.0.Final &amp;quot;Tweek&amp;quot; started in 5518ms - Started 754 of 858 services (171 services are lazy, passive or on-demand)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If this were a production server, the first thing that we’d do is to change the OOTB default admin username and/or password. apiman is configured by default to use JBoss KeyCloak &lt;a href=&quot;http://keycloak.jboss.org/&quot;&gt;http://keycloak.jboss.org/&lt;/a&gt; for password security. Also, the default database used by apiman to store contract and service information is the H2 database. For a production server, you’d want to reconfigure this to use a production database. Note: apiman includes DDLs for both MySQL and PostgreSQL.&lt;/p&gt;

&lt;p&gt;For the purposes of our demo, we’ll keep things simple and use the default configuration.&lt;/p&gt;

&lt;p&gt;To access apiman’s API Manager UI, go to: &lt;a href=&quot;http://localhost:8080/apiman-manager&quot;&gt;http://localhost:8080/apiman-manager&lt;/a&gt;, and log in. The admin user account that we’ll use has a username of “admin” and a password of “admin123!”&lt;/p&gt;

&lt;p&gt;You should see a screen that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/apiman_1.png&quot; alt=&quot;Dashboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Before we start using apiman, let’s take a look at how apiman defines how services and the meta data on which they depend are organized.&lt;/p&gt;

&lt;h2 id=&quot;policies-plans-and-organizations&quot;&gt;Policies, Plans, and Organizations&lt;/h2&gt;

&lt;p&gt;apiman uses a hierarchical data model that consists of these elements: Polices, Plans, and Organizations:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/apiman_2.jpg&quot; alt=&quot;Diagram_1&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;policies&quot;&gt;Policies&lt;/h2&gt;

&lt;p&gt;Policies are at the lowest level of the data model, and they are the basis on which the higher level elements of the data model are built. A policy defines an action that is performed by the API Gateway at runtime. Everything defined in the API Manager UI is there to enable apiman to apply policies to requests made to services.&lt;/p&gt;

&lt;p&gt;When a request to a service is made, apiman creates a chain of policies to be applied to that request. apiman policy chains define a specific sequence order in which the policies defined in the API Manager UI are applied to service requests.&lt;/p&gt;

&lt;p&gt;The sequence in which incoming service requests have policies applied is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First, at the application level. In apiman, an application is contracted to use one or more services.&lt;/li&gt;
  &lt;li&gt;Second, at the plan level. In apiman, policies are organized into groups called plans. (We’ll discuss plans in the next section of this post.)&lt;/li&gt;
  &lt;li&gt;Third, at the individual service level.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What happens is that when a service request is received by the API Gateway at runtime, the policy chain is applied in the order of application, plan, and service. If no failures, such as a rate counter being exceeded, occur, the API Gateway sends the request to the service’s backend API implementation. As we mentioned earlier in this post, the API Gateway acts as a proxy for the service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/apiman_3.jpg&quot; alt=&quot;Diagram_2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, when the API Gateway receives a response from the service’s backend implementation, the policy chain is applied again, but this time in the reverse order. The service policies are applied first, then the plan policies, and finally the application policies. If no failures occur, then the service response is sent back to the consumer of the service.&lt;/p&gt;

&lt;p&gt;By applying the policy chain twice, both for the originating incoming request and the resulting response, apiman allows policy implementations two opportunities to provide management functionality during the lifecycle. The following diagram illustrates this two-way approach to applying policies:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/apiman_4.jpg&quot; alt=&quot;Diagram_3&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;plans&quot;&gt;Plans&lt;/h2&gt;

&lt;p&gt;In apiman, a “plan” is a set policies that together define the level of service that apiman provides for service. Plans enable apiman users to define multiple different levels of service for their APIs, based on policies. It’s common to define different plans for the same service, where the differences depend on configuration options. For example, a group or company may offer both a “gold” and “silver” plan for the same service. The gold plan may be more expensive than the silver plan, but it may offer a higher level of service requests in a given (and configurable) time period.&lt;/p&gt;

&lt;h2 id=&quot;organizations&quot;&gt;Organizations&lt;/h2&gt;

&lt;p&gt;The “organization” is at top level of the apiman data model.&lt;/p&gt;

&lt;p&gt;An organization contains and manages all elements used by a company, university, group inside a company, etc. for API management with apiman. All plans, services, applications, and users for a group are defined in an apiman organization. In this way, an organization acts as a container of other elements. Users must be associated with an organization before they can use apiman to create or consume services. apiman implements role-based access controls for users. The role assigned to a user defines the actions that a user can perform and the elements that a user can manage.&lt;/p&gt;

&lt;p&gt;Before we can define a service, the policies that govern how it is accessed, the users who will be able to access, and the organizations that will create and consume it, we need a service and a client to access that service. Luckily, creating the service and deploying it to our WildFly server, and accessing it through a client are easy.&lt;/p&gt;

&lt;h2 id=&quot;getting-and-building-and-deploying-the-example-service&quot;&gt;Getting and Building and Deploying the Example Service&lt;/h2&gt;

&lt;p&gt;The source code for the example service is contained in a git repo (http://git-scm.com) hosted at github (https://github.com/apiman). To download a copy of the example service, navigate to the directory in which you want to build the service and execute this git command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git@github.com:apiman/apiman-quickstarts.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the source code is downloading, you’ll see output that looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone git@github.com:apiman/apiman-quickstarts.git
Initialized empty Git repository in /tmp/tmp/apiman-quickstarts/.git/
remote: Counting objects: 104, done.
remote: Total 104 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (104/104), 18.16 KiB, done.
Resolving deltas: 100% (40/40), done.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, after the download is complete, you’ll see a populated directory tree that looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;└── apiman-quickstarts
  ├── echo-service
  │  ├── pom.xml
  │  ├── README.md
  │  └── src
  │    └── main
  │    ├── java
  │    │  └── io
  │    │    └── apiman
  │    │    └── quickstarts
  │    │    └── echo
  │    │    ├── EchoResponse.java
  │    │    └── EchoServlet.java
  │    └── webapp
  │    └── WEB-INF
  │    ├── jboss-web.xml
  │    └── web.xml
  ├── LICENSE
  ├── pom.xml
  ├── README.md
  ├── release.sh
  └── src
   └── main
   └── assembly
   └── dist.xml&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As we mentioned earlier in the post, the example service is very simple. The only action that the service performs is to echo back in responses the meta data in the REST (http://en.wikipedia.org/wiki/Representational_state_transfer) requests that it receives.&lt;/p&gt;

&lt;p&gt;Maven is used to build the service. To build the service into a deployable .war file, navigate to the directory into which you downloaded the service example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd apiman-quickstarts/echo-service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then execute this maven command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mvn package
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As the service is being built into a .war file, you’ll see output that looks like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[INFO] Scanning for projects...
[INFO]
[INFO] Using the builder org.apache.maven.lifecycle.internal.builder.singlethreaded.SingleThreadedBuilder with a thread count of 1
[INFO]
[INFO] ------------------------------------------------------------------------
[INFO] Building apiman-quickstarts-echo-service 1.0.1-SNAPSHOT
[INFO] ------------------------------------------------------------------------
[INFO]
[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ apiman-quickstarts-echo-service ---
[INFO] Using &amp;#39;UTF-8&amp;#39; encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /jboss/local/redhat_git/apiman-quickstarts/echo-service/src/main/resources
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:compile (default-compile) @ apiman-quickstarts-echo-service ---
[INFO] Compiling 2 source files to /jboss/local/redhat_git/apiman-quickstarts/echo-service/target/classes
[INFO]
[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ apiman-quickstarts-echo-service ---
[INFO] Using &amp;#39;UTF-8&amp;#39; encoding to copy filtered resources.
[INFO] skip non existing resourceDirectory /jboss/local/redhat_git/apiman-quickstarts/echo-service/src/test/resources
[INFO]
[INFO] --- maven-compiler-plugin:2.5.1:testCompile (default-testCompile) @ apiman-quickstarts-echo-service ---
[INFO] No sources to compile
[INFO]
[INFO] --- maven-surefire-plugin:2.12.4:test (default-test) @ apiman-quickstarts-echo-service ---
[INFO] No tests to run.
[INFO]
[INFO] --- maven-war-plugin:2.2:war (default-war) @ apiman-quickstarts-echo-service ---
[INFO] Packaging webapp
[INFO] Assembling webapp in [/jboss/local/redhat_git/apiman-quickstarts/echo-service/target/apiman-quickstarts-echo-service-1.0.1-SNAPSHOT]
[INFO] Processing war project
[INFO] Copying webapp resources [/jboss/local/redhat_git/apiman-quickstarts/echo-service/src/main/webapp]
[INFO] Webapp assembled in [23 msecs]
[INFO] Building war: /jboss/local/redhat_git/apiman-quickstarts/echo-service/target/apiman-quickstarts-echo-service-1.0.1-SNAPSHOT.war
[INFO] WEB-INF/web.xml already added, skipping
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 1.184 s
[INFO] Finished at: 2014-12-26T16:11:19-05:00
[INFO] Final Memory: 14M/295M
[INFO] ------------------------------------------------------------------------&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you look closely, near the end of the output, you’ll see the location of the .war file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/jboss/local/redhat_git/apiman-quickstarts/echo-service/target/apiman-quickstarts-echo-service-1.0.1-SNAPSHOT.war
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To deploy the service, we can copy the .war file to our WildFly server’s “deployments” directory. After you copy the service’s .war file to the deployments directory, you’ll see output like this generated by the WildFly server:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;16:54:44,313 INFO  [org.jboss.as.server.deployment] (MSC service thread 1-7) JBAS015876: Starting deployment of &amp;quot;apiman-quickstarts-echo-service-1.0.1-SNAPSHOT.war&amp;quot; (runtime-name: &amp;quot;apiman-quickstarts-echo-service-1.0.1-SNAPSHOT.war&amp;quot;)
16:54:44,397 INFO  [org.wildfly.extension.undertow] (MSC service thread 1-16) JBAS017534: Registered web context: /apiman-echo
16:54:44,455 INFO  [org.jboss.as.server] (DeploymentScanner-threads - 1) JBAS018559: Deployed &amp;quot;apiman-quickstarts-echo-service-1.0.1-SNAPSHOT.war&amp;quot; (runtime-name : &amp;quot;apiman-quickstarts-echo-service-1.0.1-SNAPSHOT.war&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Make special note of this line of output:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;16:54:44,397 INFO  [org.wildfly.extension.undertow] (MSC service thread 1-16) JBAS017534: Registered web context: /apiman-echo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This output indicates that the URL of the deployed example service is:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;[a href=&amp;quot;http://localhost:8080/apiman-echo&amp;quot; style=&amp;quot;text-decoration: none;&amp;quot;]http://localhost:8080/apiman-echo&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Remember, however, that this is the URL of the deployed example service if we access it directly. We’ll refer to this as the “unmanaged service” as we are able to connect to the service directly, without going through the API Gateway.  The URL to access the service through the API Gateway (“the managed service”) at runtime will be different.&lt;/p&gt;

&lt;p&gt;Now that our example service is installed, it’s time to install and configure our client to access the server.&lt;/p&gt;

&lt;h2 id=&quot;accessing-the-example-service-through-a-client&quot;&gt;Accessing the Example Service Through a Client&lt;/h2&gt;

&lt;p&gt;There are a lot of options available when it comes to what we can use for a client to access our service. We’ll keep the client simple so that we can keep our focus on apiman and simply install a REST client into the FireFox browser. The REST Client FireFox add-on (http://restclient.net/) is available here: https://addons.mozilla.org/en-US/firefox/addon/restclient/versions/2.0.3&lt;/p&gt;

&lt;p&gt;After you install the client into FireFox, you can access the deployed service using the URL that we just defined. If you execute a GET command, you’ll see output that looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-4.png&quot; alt=&quot;Screenshot 4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that our example service is built, deployed and running, it’s time to create the organizations for the service provider and the service consumer. The differences between the requirements of the two organizations will be evident in their apiman configuration properties.&lt;/p&gt;

&lt;h2 id=&quot;creating-users-for-the-service-provider-and-consumer&quot;&gt;Creating Users for the Service Provider and Consumer&lt;/h2&gt;

&lt;p&gt;Before we create the organizations, we have to create a user for each organization. We’ll start by creating the service provider user. To do this, logout from the admin account in the API Manager UI. The login dialog will then be displayed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-5.png&quot; alt=&quot;Screenshot 5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select the “New user” Option and register the service provider user:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-6.png&quot; alt=&quot;Screenshot 6&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, logout and repeat the process to register a new application developer user too:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-7.png&quot; alt=&quot;Screenshot 7&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that the new users are registered we can create the organizations.&lt;/p&gt;

&lt;h2 id=&quot;creating-the-service-producer-organization&quot;&gt;Creating the Service Producer Organization&lt;/h2&gt;

&lt;p&gt;To create the service producer organization, log back into the API Manager UI as the servprov user and select “Create a new Organization”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/apiman_2.png&quot; alt=&quot;dash-2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select a name and description for the organization, and press “Create Organization”:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-15.png&quot; alt=&quot;Screenshot 15&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, here’s our organization:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-16.png&quot; alt=&quot;Screenshot 16&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Note that in a production environment, users would request membership in an organization. The approval process for accepting new members into an organization would follow the organization’s workflow, but this would be handled outside of the API Manager. For the purposes of our demonstration, we’ll keep things simple.&lt;/p&gt;

&lt;h2 id=&quot;configuring-the-service-its-policies-and-plans&quot;&gt;Configuring the Service, its Policies, and Plans&lt;/h2&gt;

&lt;p&gt;To configure the service, we’ll first create a plan to contain the policies that we want applied by the API Gateway at runtime when requests to the service are made. To create a new plan, select the “Plans” tab. We’ll create a “gold” plan:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-17.png&quot; alt=&quot;Screenshot 17&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once the plan is created, we will add policies to it:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-18.png&quot; alt=&quot;Screenshot 18&quot; /&gt;&lt;/p&gt;

&lt;p&gt;apiman provides several OOTB policies. Since we want to be able to demonstrate a policy being applied, we’ll select a Rate Limiting Policy, and set its limit to a very low level. If our service receives more than 10 requests in a day, the policy should block all subsequent requests. So much for a “gold” level of service!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-19.png&quot; alt=&quot;Screenshot 19&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After we create the policy and add it to the plan, we have to lock the plan:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-21.png&quot; alt=&quot;Screenshot 21&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, here is the finished, and locked plan:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-22.png&quot; alt=&quot;Screenshot 22&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At this point, additional plans can be defined for the service. We’ll also create a “silver” plan, that will offer a lower level of service (i.e., a request rate limit lower than 10 per day) than the gold plan. Since the process to create this silver plan is identical to that of the gold plan, we’ll skip the screenshots.&lt;/p&gt;

&lt;p&gt;Now that the two plans are complete and locked, it’s time to define the service.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-23.png&quot; alt=&quot;Screenshot 23&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We’ll give the service an appropriate name, so that providers and consumers alike will be able to run a query in the API Manager to find it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-24.png&quot; alt=&quot;Screenshot 24&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the service is defined, we have to define its implementation. In the context of the API Manager, the API Endpoint is the service’s direct URL. Remember that the API Gateway will act as a proxy for the service, so it must know the service’s actual URL. In the case of our example service, the URL is:  &lt;a href=&quot;http://localhost:8080/apiman-echo&quot;&gt;http://localhost:8080/apiman-echo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-25.png&quot; alt=&quot;Screenshot 25&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The plans tab shows which plans are available to be applied to the service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-26.png&quot; alt=&quot;Screenshot 26&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s make our service more secure by adding an authentication policy that will require users to login before they can access the service. Select the Policies tab, and then define a simple authentication policy. Remember the user name and password that you define here as we’ll need them later on when send requests to the service.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-27.png&quot; alt=&quot;Screenshot 27&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the authentication policy is added, we can publish the service to the API Gateway:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-28.png&quot; alt=&quot;Screenshot 28&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And, here it is, the published service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-29.png&quot; alt=&quot;Screenshot 29&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OK, that finishes the definition of the service provider organization and the publication of the service.&lt;/p&gt;

&lt;p&gt;Next, we’ll switch over to the service consumer side and create the service consumer organization and register an application to connect to the managed service through the proxy of the API Gateway.&lt;/p&gt;

&lt;h2 id=&quot;the-service-consumer-organization&quot;&gt;The Service Consumer Organization&lt;/h2&gt;

&lt;p&gt;We’ll repeat the process that we used to create the application development organization. Log in to the API Manager UI as the “appdev” user and create the organization:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-30.png&quot; alt=&quot;Screenshot 30&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unlike the process we used when we created the elements used by the service provider, the first step that we’ll take is to create a new application and then search for the service to be used by the application:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-31.png&quot; alt=&quot;Screenshot 31&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Searching for the service is easy, as we were careful to set the service name to something memorable:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-32.png&quot; alt=&quot;Screenshot 32&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Select the service name, and then specify the plan to be used. We’ll splurge and use the gold plan:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-33.png&quot; alt=&quot;Screenshot 33&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Next, select “create contract” for the plan:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-34.png&quot; alt=&quot;Screenshot 34&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then, agree to the contract terms (which seem to be written in a strange form of Latin in the apiman 1.0 release):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-35.png&quot; alt=&quot;Screenshot 35&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The last step is to register the application with the API Gateway so that the gateway can act as a proxy for the service:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-36.png&quot; alt=&quot;Screenshot 36&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Congratulations! All the steps necessary to provide and consume the service are complete!&lt;/p&gt;

&lt;p&gt;There’s just one more step that we have to take in order for clients to be able access the service through the API Gateway.&lt;/p&gt;

&lt;p&gt;Remember the URL that we used to access the unmanaged service directly? Well, forget it. In order to access the managed service through the API Gateway acting as a proxy for other service we have to obtain the managed service’s URL. In the API Manager UI, head on over to the “APIs” tab for the application, click on the the ‘&amp;gt;’ character to the left of the service name. This will expose the API Key and the service’s HTTP endpoint in the API Gateway:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-37.png&quot; alt=&quot;Screenshot 37&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In order to be able access the service through the API Gateway, we have to provide the API Key with each request. The API Key can be provided either through an HTTP Header (X-API-Key) or a URL query parameter. Luckily, the API Manager UI does the latter for us. Select the icon to the right of the HTTP Endpoint and this dialog is displayed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-38.png&quot; alt=&quot;Screenshot 38&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Copy the URL into the clipboard. We’ll need to enter this into the client in a bit. The combined API Key and HTTP endpoint should look something like this:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://localhost:8080/apiman-gateway/ACMEServices/echo/1.0?apikey=c374c202-d4b3-4442-b9e4-c6654f406e3d&quot;&gt;http://localhost:8080/apiman-gateway/ACMEServices/echo/1.0?apikey=c374c202-d4b3-4442-b9e4-c6654f406e3d&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;accessing-the-managed-service-through-the-apiman-api-gateway-watching-the-policies-at-runtime&quot;&gt;Accessing the Managed Service Through the apiman API Gateway, Watching the Policies at Runtime&lt;/h2&gt;

&lt;p&gt;Thanks for hanging in there! The set up is done. Now, we can fire up the client and watch the policies in action as they are applied at runtime by the API Gateway, for example:&lt;/p&gt;

&lt;p&gt;Open the client, and enter the URL for the managed service &lt;a href=&quot;http://localhost:8080/apiman-gateway/ACMEServices/echo/1.0?apikey=c374c202-d4b3-4442-b9e4-c6654f406e3d&quot;&gt;http://localhost:8080/apiman-gateway/ACMEServices/echo/1.0?apikey=c374c202-d4b3-4442-b9e4-c6654f406e3d&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;What happens first is that the authentication policy is applied and a login dialog is then displayed:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-41.png&quot; alt=&quot;Screenshot 41&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Enter the username and password (user1/password) that we defined when we created the authentication policy to access the service. The fact that you are seeing this dialog confirms that you are accessing the managed service and are not accessing the service directly.&lt;/p&gt;

&lt;p&gt;When you send a GET request to the service, you should see a successful response:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-40.png&quot; alt=&quot;Screenshot 40&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So far so good. Now, send 10 more requests and you will see a response that looks like this as the gold plan rate limit is exceeded:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.apiman.io/blog/images/2015-01-09/Screenshot-39.png&quot; alt=&quot;Screenshot 39&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And there it is. Your gold plan has been exceeded. Maybe next time you’ll spend a little more and get the platinum plan!  ;-)&lt;/p&gt;

&lt;h2 id=&quot;wrap-up&quot;&gt;Wrap-up&lt;/h2&gt;

&lt;p&gt;Let’s recap what we just accomplished in this demo:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We installed apiman 1.0 onto a WildFly server instance.&lt;/li&gt;
  &lt;li&gt;We used git to download and maven to build a sample REST client.&lt;/li&gt;
  &lt;li&gt;As a service provider, we created an organization, defined policies based on service use limit rates and user authentication, and a plan, and assigned them to a service.&lt;/li&gt;
  &lt;li&gt;As a service consumer, we searched for and found that service, and assigned it to an application.&lt;/li&gt;
  &lt;li&gt;As a client, we accessed the service and observed how the API Gateway managed the service.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And, if you note, in the process of doing all this, the only code that we had to write or build was for the client. We were able to fully configure the service, policies, plans, and the application in the API Manager UI.&lt;/p&gt;

&lt;h2 id=&quot;whats-next&quot;&gt;What’s Next?&lt;/h2&gt;

&lt;p&gt;In this post, we’ve only scratched the surface of API Management with apiman. To learn more about apiman, you can explore its website here: http://www.apiman.io/&lt;/p&gt;

&lt;p&gt;Join the project mailing list here: &lt;a href=&quot;https://lists.jboss.org/mailman/listinfo/apiman-user&quot;&gt;https://lists.jboss.org/mailman/listinfo/apiman-user&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And, better still, get involved! Contribute bug reports or feature requests. Write about your own experiences with apiman. Download the apiman source code, take a look around, and contribute your own additions. apiman 1.0 was just released, there’s no better time to join in and contribute!&lt;/p&gt;

&lt;h2 id=&quot;downloads-used-in-this-article&quot;&gt;Downloads Used in this Article&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;REST Client &lt;a href=&quot;http://restclient.net/&quot;&gt;http://restclient.net/&lt;/a&gt; FireFox Add-On - &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/restclient/versions/2.0.3&quot;&gt;https://addons.mozilla.org/en-US/firefox/addon/restclient/versions/2.0.3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Echo service source code - &lt;a href=&quot;https://github.com/apiman/apiman-quickstarts&quot;&gt;https://github.com/apiman/apiman-quickstarts&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;apiman 1.0 - &lt;a href=&quot;http://downloads.jboss.org/apiman/1.0.0.Final/apiman-distro-wildfly8-1.0.0.Final-overlay.zip&quot;&gt;http://downloads.jboss.org/apiman/1.0.0.Final/apiman-distro-wildfly8-1.0.0.Final-overlay.zip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;WildFly 8.2.0 - &lt;a href=&quot;http://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip&quot;&gt;http://download.jboss.org/wildfly/8.2.0.Final/wildfly-8.2.0.Final.zip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Git - &lt;a href=&quot;http://git-scm.com&quot;&gt;http://git-scm.com&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Maven - &lt;a href=&quot;http://maven.apache.org&quot;&gt;http://maven.apache.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.apiman.io/&quot;&gt;http://www.apiman.io/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;apiman tutorial videos - &lt;a href=&quot;http://vimeo.com/user34396826&quot;&gt;http://vimeo.com/user34396826&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.softwareag.com/blog/reality_check/index.php/soa-what/what-is-api-management/&quot;&gt;http://www.softwareag.com/blog/reality_check/index.php/soa-what/what-is-api-management/&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://keycloak.jboss.org/&quot;&gt;http://keycloak.jboss.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				
					<category term="introduction" />
				
					<category term="overview" />
				
				<pubDate>Fri, 09 Jan 2015 04:15:00 -0500</pubDate>
				<link>http://apiman.io/blog/introduction/overview/2015/01/09/impatient-new-user.html</link>
				<guid isPermaLink="true">http://apiman.io/blog/introduction/overview/2015/01/09/impatient-new-user.html</guid>
			</item>
		
		<lastBuildDate>Tue, 24 Nov 2015 08:34:22 -0500</lastBuildDate>
	</channel>
</rss>
