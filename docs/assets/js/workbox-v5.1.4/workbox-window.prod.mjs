try{self["workbox:window:5.1.4"]&&_()}catch{}function t(e,t){return new Promise(n=>{const s=new MessageChannel;s.port1.onmessage=e=>{n(e.data)},e.postMessage(t,[s.port2])})}try{self["workbox:core:5.1.4"]&&_()}catch{}class s{constructor(){this.promise=new Promise((e,t)=>{this.resolve=e,this.reject=t})}}function i(e,t){const{href:n}=location;return new URL(e,n).href===new URL(t,n).href}class e{constructor(e,t){this.type=e,Object.assign(this,t)}}class h extends class{constructor(){this.t=new Map}addEventListener(e,t){this.s(e).add(t)}removeEventListener(e,t){this.s(e).delete(t)}dispatchEvent(e){e.target=this;const t=this.s(e.type);for(const n of t)n(e)}s(e){return this.t.has(e)||this.t.set(e,new Set),this.t.get(e)}}{constructor(t,n={}){super(),this.i={},this.h=0,this.o=new s,this.g=new s,this.l=new s,this.u=0,this.v=new Set,this.m=()=>{const t=this.p,e=t.installing;this.h>0||!i(e.scriptURL,this.S)||performance.now()>this.u+6e4?(this.L=e,t.removeEventListener("updatefound",this.m)):(this._=e,this.v.add(e),this.o.resolve(e)),++this.h,e.addEventListener("statechange",this.P)},this.P=t=>{const r=this.p,n=t.target,{state:s}=n,o=n===this.L,a=o?"external":"",i={sw:n,originalEvent:t};!o&&this.W&&(i.isUpdate=!0),this.dispatchEvent(new e(a+s,i)),"installed"===s?this.B=self.setTimeout(()=>{"installed"===s&&r.waiting===n&&this.dispatchEvent(new e(a+"waiting",i))},200):"activating"===s&&(clearTimeout(this.B),o||this.g.resolve(n))},this.C=t=>{const n=this._;n===navigator.serviceWorker.controller&&(this.dispatchEvent(new e("controlling",{sw:n,originalEvent:t,isUpdate:this.W})),this.l.resolve(n))},this.R=async t=>{const{data:s,source:n}=t;await this.getSW(),this.v.has(n)&&this.dispatchEvent(new e("message",{data:s,sw:n,originalEvent:t}))},this.S=t,this.i=n,navigator.serviceWorker.addEventListener("message",this.R)}async register({immediate:t=!1}={}){t||"complete"===document.readyState||await new Promise(e=>window.addEventListener("load",e)),this.W=Boolean(navigator.serviceWorker.controller),this.U=this.M(),this.p=await this.T(),this.U&&(this._=this.U,this.g.resolve(this.U),this.l.resolve(this.U),this.U.addEventListener("statechange",this.P,{once:!0}));const n=this.p.waiting;return n&&i(n.scriptURL,this.S)&&(this._=n,Promise.resolve().then(()=>{this.dispatchEvent(new e("waiting",{sw:n,wasWaitingBeforeRegister:!0}))}).then(()=>{})),this._&&(this.o.resolve(this._),this.v.add(this._)),this.p.addEventListener("updatefound",this.m),navigator.serviceWorker.addEventListener("controllerchange",this.C,{once:!0}),this.p}async update(){this.p&&await this.p.update()}get active(){return this.g.promise}get controlling(){return this.l.promise}async getSW(){return 0[0]!==this._?this._:this.o.promise}async messageSW(e){return t(await this.getSW(),e)}M(){const e=navigator.serviceWorker.controller;return e&&i(e.scriptURL,this.S)?e:0[0]}async T(){try{const e=await navigator.serviceWorker.register(this.S,this.i);return this.u=performance.now(),e}catch(e){throw e}}}export{h as Workbox,t as messageSW}