this.workbox=this.workbox||{},this.workbox.backgroundSync=function(e,t,n,s,o){"use strict";try{self["workbox:background-sync:5.1.4"]&&_()}catch{}class l{constructor(e){this.t=e,this.s=new o.DBWrapper("workbox-background-sync",3,{onupgradeneeded:this.i})}async pushEntry(e){delete e.id,e.queueName=this.t,await this.s.add("requests",e)}async unshiftEntry(e){const[t]=await this.s.getAllMatching("requests",{count:1});t?e.id=t.id-1:delete e.id,e.queueName=this.t,await this.s.add("requests",e)}async popEntry(){return this.h({direction:"prev"})}async shiftEntry(){return this.h({direction:"next"})}async getAll(){return await this.s.getAllMatching("requests",{index:"queueName",query:IDBKeyRange.only(this.t)})}async deleteEntry(e){await this.s.delete("requests",e)}async h({direction:e}){const[t]=await this.s.getAllMatching("requests",{direction:e,index:"queueName",query:IDBKeyRange.only(this.t),count:1});if(t)return await this.deleteEntry(t.id),t}i(e){const t=e.target.result;e.oldVersion>0&&e.oldVersion<3&&t.objectStoreNames.contains("requests")&&t.deleteObjectStore("requests"),t.createObjectStore("requests",{autoIncrement:!0,keyPath:"id"}).createIndex("queueName","queueName",{unique:!1})}}const d=["method","referrer","referrerPolicy","mode","credentials","cache","redirect","integrity","keepalive"];class i{constructor(e){"navigate"===e.mode&&(e.mode="same-origin"),this.u=e}static async fromRequest(e){const t={url:e.url,headers:{}};"GET"!==e.method&&(t.body=await e.clone().arrayBuffer());for(const[n,s]of e.headers.entries())t.headers[n]=s;for(const n of d)0[0]!==e[n]&&(t[n]=e[n]);return new i(t)}toObject(){const e=Object.assign({},this.u);return e.headers=Object.assign({},this.u.headers),e.body&&(e.body=e.body.slice(0)),e}toRequest(){return new Request(this.u.url,this.u)}clone(){return new i(this.toObject())}}const a=new Set,r=e=>{const t={request:new i(e.requestData).toRequest(),timestamp:e.timestamp};return e.metadata&&(t.metadata=e.metadata),t};class c{constructor(e,{onSync:n,maxRetentionTime:s}={}){if(this.o=!1,this.q=!1,a.has(e))throw new t.WorkboxError("duplicate-queue-name",{name:e});a.add(e),this.l=e,this.m=n||this.replayRequests,this.p=s||10080,this.g=new l(this.l),this.R()}get name(){return this.l}async pushRequest(e){await this.k(e,"push")}async unshiftRequest(e){await this.k(e,"unshift")}async popRequest(){return this.D("pop")}async shiftRequest(){return this.D("shift")}async getAll(){const t=await this.g.getAll(),n=Date.now(),e=[];for(const s of t){const o=60*this.p*1e3;n-s.timestamp>o?await this.g.deleteEntry(s.id):e.push(r(s))}return e}async k({request:e,metadata:t,timestamp:n=Date.now()},s){const o={requestData:(await i.fromRequest(e.clone())).toObject(),timestamp:n};t&&(o.metadata=t),await this.g[s+"Entry"](o),this.o?this.q=!0:await this.registerSync()}async D(e){const n=Date.now(),t=await this.g[e+"Entry"]();if(t){const s=60*this.p*1e3;return n-t.timestamp>s?this.D(e):r(t)}}async replayRequests(){let e;for(;e=await this.shiftRequest();)try{await fetch(e.request.clone())}catch{throw await this.unshiftRequest(e),new t.WorkboxError("queue-replay-failed",{name:this.l})}}async registerSync(){if("sync"in self.registration)try{await self.registration.sync.register("workbox-background-sync:"+this.l)}catch{}}R(){"sync"in self.registration?self.addEventListener("sync",e=>{if(e.tag==="workbox-background-sync:"+this.l){const t=async()=>{let t;this.o=!0;try{await this.m({queue:this})}catch(e){throw t=e,t}finally{!this.q||t&&!e.lastChance||await this.registerSync(),this.o=!1,this.q=!1}};e.waitUntil(t())}}):this.m({queue:this})}static get _(){return a}}return e.BackgroundSyncPlugin=class{constructor(e,t){this.fetchDidFail=async({request:e})=>{await this.v.pushRequest({request:e})},this.v=new c(e,t)}},e.Queue=c,e}({},workbox.core._private,workbox.core._private,workbox.core._private,workbox.core._private)