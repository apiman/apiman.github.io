- title: API Manager
  id: general-features
  features:
    - title: Standalone API Manager
      icon: full
      description: |
        Apiman has a fully-featured API Manager that is decoupled from Apiman's API Gateways. 
        If the Apiman Manager goes down, your gateways can continue running as usual (you can configure your gateways to use a separate data store, too).

    - title: Policies
      icon: full
      description: |
        <p>Apiman has a rich set of default policies, allowing you to govern and alter traffic transiting the Apiman Gateways in myriad ways.
        You can also create your own Apiman policy plugins, allowing you to create your own functionality.</p>
        
        <p>See the <a href="#standard-policies">policies</a> and <a href="#extensibility">extensibility</a> sections.</p>

    - title: Policy Chain
      icon: full
      description: |
        Multiple policies are applied in an ordered chain defined by the user.
        This means you can combine functionality in the way that makes sense for you.
        It is also possible for policies to collaborate by passing messages to each other.

    - title: Plans
      icon: full
      description: |
        Apiman supports multiple versioned plans, allowing you to offer the same APIs with multiple different levels of service.
        For example, different rate limits for <code>gold</code> vs <code>silver</code> plan.

    - title: Clients
      icon: full
      description: |
        API consumers (Clients) can subscribe to multiple APIs and get their API keys, plus managing their client's lifecycle (e.g. breaking contracts).

    - title: API Documentation
      icon: full
      description: |
        You can attach OpenAPI v2 or v3 schemas (or Swagger), amongst others.
        Rendered into HTML for API consumers in both the main Apiman Manager UI and the Developer Portal.

    - title: Multitenancy
      icon: full
      description: |
        Apiman is based around 'organizations', which are similar conceptually to a GitHub org.
        Users can create and join organizations, and be assigned fine-grained permissions within that org.

    - title: Roles & Permissions
      icon: full
      description: |
        <p>Apiman has a hybrid RBAC-ABAC system.</p>
      
        <p>Roles are globally defined personas that are assigned permissions (e.g. 'API Plan Administrator' has a range of 
        plan-related permissions such as <code>planAdmin</code>).</p> 
    
        <p>Within an organization, Apiman users are assigned roles that grant them the permissions from that role.</p>

    - title: Exposing APIs Publicly
      icon: full
      description: |
        APIs and plans can be exposed read-only to consumers who are not members of an organization. 
        Conceptually, this is similar to a GitHub public repo; people can read and clone, but not modify.

    - title: Public APIs (Keyless APIs)
      icon: full
      description: |
        Publish an API without an API key and plan. You can still apply policies directly to the API itself.
        This feature name is confusingly similar to the previous entry, but is functionally completely different.

    - title: Monetization
      icon: roadmap
      ticket: https://github.com/apiman/apiman/issues/2352
      description: |
        <p>Apiman only supports post-hoc billing/monetization via metrics (e.g. Elasticsearch), but has no explicit 
        support currently for up-front billing or payment capture.</p>

    - title: Notifications
      icon: full
      description: |
        <p>In-browser/API notifications for a range of Apiman events, such as when an API signup needs approval, when someone signs up to an API, etc.
        Many are interactive, allowing the user to click through into the relevant resource.</p>
        <p>We're continuing to add more as we identify useful events to notify users about.
        Can be disabled.</p>

    - title: Email Notifications
      icon: full
      description: |
        A fully templated and i18n-compatible email notification system to send a range of important Apiman notifications (subset of those that appear in-browser).
        Apiman selects the language to use based on the user's locale.
        Can be disabled.

    - title: Apiman Events
      icon: full
      description: |
        <p>A new feature in 3.x, Apiman now publishes a range of events into an 
        <a href="https://debezium.io/blog/2019/02/19/reliable-microservices-data-exchange-with-the-outbox-pattern/" target="_blank">outbox table</a>.
        By using CDC software such as Debezium, you can publish these events into event distribution platforms such as Kafka.</p>
        <p>These events cover a range of topics, such as important entity state changes (e.g. API publication), and when actionable events occur (e.g. approval required).</p>
        <p>You can use Apiman events integrate with external systems, such as business rules engines.</p>

    - title: API Search/Discovery
      icon: partial
      description: |
        List and search for APIs published in Apiman, including by wildcard patterns (globally and per-organization).

    - title: API Registry
      icon: full
      ticket: https://github.com/apiman/apiman/issues/2336
      description: |
        <p>Apiman has a simple JSON-based API Registry capability out of the box to list external APIs that users can import.</p>
        
        <p>By implementing a simple interface, <a href="#apiman-registry">you can interrogate your own registry</a> instead.</p>

- title: API Lifecycle
  id: api-lifecycle
  features:
    - title: Creation
      icon: full
      description: |
        Draft your APIs without publishing them until you are ready.

    - title: Versioning
      icon: full
      description: |
        Create multiple versions of APIs, Plan, and Clients.
        By default, versions are immutable (i.e. can't change policy configuration).

    - title: Multiple Envs
      icon: full
      description: |
        Create and publish APIs to multiple environments, for example testing vs production.

    - title: Publication
      icon: full
      description: |
        APIs can be published to one or more gateways/envs.
        This allows API consumers to find and subscribe to your API via a plan, receiving their
        API key.

    - title: Retirement
      icon: full
      description: |
        APIs can be retired by the API provider. Retirement revokes access for existing users, and no new subscriptions can be made.

    - title: Monitoring
      icon: full
      description: |
        Apiman has simple in-built metrics and visualisations. 
        There are also a range of metrics emitters for the Apiman Gateway, including Elasticsearch, Prometheus, InfluxDB, JDBC, etc.
        These are commonly combined with visualisation tools such as Kibana and Grafana to provide rich data insights.

    - title: Force Update Published Entities
      icon: roadmap
      ticket: https://github.com/apiman/apiman/issues/2353
      description: |
        <p>Apiman imposes immutability on configurations of published APIs and Plans.
        This is to ensure that API publishers cannot silently alter the contract established between the API publisher and
        API consumer (e.g. change rate limits without telling consumer). A new version is usually required.</p>
        <p>However, there are some situations where forcing a configuration update may be more appropriate, 
        such as updating endpoints or fixing config mistakes.</p>

    - title: API Signup Approval
      icon: full
      description: |
        <p>You can set APIs to require manual approval before a subscriber is allowed to use it.
        This is typically used for APIs that require a due diligence process.</p>
        <p>Apiman sends notifications to approvers, and the subscriber receives notifications on acceptance or rejection.
        <p><a href="#apiman-events">Events are also emitted</a>, if you want to handle this automatically.</p>

    - title: API Mocking
      icon: roadmap
      ticket: https://github.com/apiman/apiman/issues/2337
      description: |
        Apiman does not have any direct support for mocking at present.
        However, we are considering integration with <a href="https://www.microcks.io" target="_blank">Microcks</a>, 
        a comprehensive REST mocking platform.

- title: API Gateway
  id: api-gateway
  features:
    - title: Scalable
      icon: full
      description: |
        Apiman gateways scale independently of the Apiman manager. 
        You can have as many gateways as you need in a group to handle your load.

    - title: Gateway Independence
      icon: full
      description: |
        Apiman's gateways will continue functioning even if the Apiman Manager goes down.
        They can be configured to have different backing datastores, as well.

    - title: Multiple Gateway Clusters/Envs
      icon: full
      description: |
        You can set up multiple logical groupings of gateways, which you can publish
        your APIs to independently. This is commonly used to provide development vs 
        production environments or regional segregation.

    - title: Asynchronous
      icon: full
      description: |
        The Apiman Gateway uses asynchronous patterns throughout its codebase, including policy and component implementations.
        When you use the Vert.x gateway, then you will get a fully asynchronous experience. 

    - title: Multiple Platforms
      icon: full
      description: |
        Apiman currently supports Vert.x, WildFly, and Tomcat. Best performance is achieved using Vert.x.

    - title: Embeddable
      icon: full
      description: |
        Apiman Gateway can be directly embedded into a Java application by implementing a series of interfaces and components.
        This requires considerable effort and understanding of the platform, but has been done a number of times.

- title: Developer Portal
  id: devportal
  features:
    - title: Standalone Devportal
      icon: full
      description: |
        Standalone Angular application that can be deployed separately from the rest of Apiman.
        It just needs to be able to speak to the Apiman Manager API.

    - title: Skinning
      icon: full
      description: |
        A range of easy CSS customisations are available to make the devportal match 
        your organisation's look and feel, including colour palate and images.

    - title: Simple Content Customisation
      icon: full
      description: |
        Simple JSON file-based customisations to change company names, custom links, custom footer,
        various standard text blocks such as legal prose, etc.

    - title: Explicit Publication
      icon: full
      description: |
        API providers can explicitly choose which APIs and plans to publish to the devportal, and hence
        can be seen by anonymous users. When a developer is logged in they can see everything their account is entitled to. 

    - title: User Segregation
      icon: full
      description: |
        Devportal users can be segregated from other Apiman users to limit what they are allowed to do in Apiman.
        Simply assign the user the <code>devportal</code> role in Keycloak.

    - title: API Marketplace
      icon: full
      description: |
        APIs can be discovered via searching and lists.
        You can 'feature' an API to display it more prominently on the front page.

    - title: Markdown API Docs
      icon: full
      description: |
        API publishers can provide markdown documentation, which will be rendered in the developer portal alongside rendered any API schema.
        This commonly used for code samples, example payloads, etc.

    - title: Custom Legal Prose / Terms & Conditions
      icon: partial
      ticket: https://github.com/apiman/apiman/issues/1705
      description: |
        <p>You can set a global legal prose that all devportal users have to accept before signing up to an API.</p>
        
        <p>If there is interest, we are considering adding a more fine-grained approach for managing legal prose that is attached to plans or APIs.</p>  

- title: Extensibility
  id: extensibility
  features:
    - title: Custom Policy Plugins
      icon: full
      description: |
        <p>Policies govern traffic transiting the Apiman gateway. For example, rate limiting, security, or header and payload manipulation.</p>
        <p>Using simple Java plugins, you can develop your own Apiman policies, enabling almost any kind functionality you can dream of, including schema-based UIs.</p>

    - title: Schema-based Policy UI
      icon: full
      description: |
        Developers can provide a JSON schema with their custom Apiman policies.
        This allows users to configure your policy in the Apiman Manager UI.
        Apiman will render the schema into a form, and validate the policy inputs as per your rules.

    - title: Policy Plugin Testing
      icon: full
      description: |
        Apiman has a JUnit-based testing framework to allow robust testing of your custom logic.

    - title: Override Default Components
      icon: full
      description: |
        All Apiman's components can be replaced dynamically by user-provided plugin implementations simply by referencing your implementation in 
        <code>apiman.properties</code>/<code>conf.json</code>. 
        For example, you could provide a custom rate-limiting component implementation.

    - title: Custom Components
      icon: full
      description: |
        Using Apiman's standard plugin format, you can create new components and use them from your Apiman policies.

    - title: Dynamic Plugin Loading
      icon: full
      description: |
        All Apiman Plugins can be loaded dynamically at runtime, no restart is required.
        Policy plugins can be managed via the plugins administration page in the Apiman Manager.
        Component plugins are simply referenced directly in config by their URN.

    - title: Plugin Upgrades
      icon: full
      description: |
        Apiman plugin policy versions can be upgraded via the API or Apiman Manager administration console.

    - title: Plugin Repository
      icon: full
      description: |
        Apiman plugins can be loaded from (either automatically or via configuration):
        <ul>
          <li>Maven Central</li>
          <li>Any Maven-compatible remote repository, such as Sonatype, JFrog, or Archiva.</li>
          <li>Local <code>~/.m2</code>.</li>
          <li>User-defined alternative directory.</li>
        </ul>    
        Local resolution can be useful for 'baking' plugins into containers in immutable architectures.

    - title: Custom API Registry Plugin
      icon: full
      description: |
        <p>By implementing a simple interface, you can allow Apiman to search for and import APIs from external API registries.</p>
        <p>For example, if you have an API registry inside your organization, your custom Apiman registry could interrogate it, 
        allowing users to quickly import those APIs into Apiman with its implementation details pre-filled.</p>

    - title: Custom Metrics Plugin
      icon: full
      description: |
        Apiman captures a rich set of metrics on traffic transiting the Apiman Gateways. 
        A range of metrics implementations are provided out of the box, but you can also implement your own via a plugin.

- title: Protocols
  id: protocols
  features:
    - title: HTTP
      icon: full
      description: |
        <p>Apiman is currently primarily an HTTP API gateway. For example, your RESTful Web API will work just fine.</p>    
        <p>Various protocols can run on top of HTTP, these should also work. Please let us know your results.</p>

    - title: SOAP over HTTP
      icon: full
      description: |
        Set SOAP type in the implementation tab when defining your API in Apiman.

    - title: Websockets
      icon: partial
      description: |
        Apiman does not currently have explicit testing or support for Websockets, but we have been informed
        that certain setups will work (initial negotiation and handoff by HTTP, rest of connection out-of-band).

    - title: Raw TCP
      icon: unsupported

    - title: Raw UDP
      icon: unsupported

    - title: Messaging protocols
      icon: unsupported

- title: Standard Policies
  id: standard-policies
  intro: |
    <p>
      Policies are the bread and butter of Apiman, governing traffic passing through the
      Apiman gateway at runtime. They perform a wide variety of actions, including permitting
      or denying requests, modifying metadata (e.g. headers), and mutating the payload.
    </p>
    
    <p>In this section, we briefly list the standard policies and plugins that ship with Apiman.
    Refer to the Apiman documentation for full information on functionality and configuration.</p> 
    
    <p>A key feature of Apiman is that you can create your own Apiman policies, and we welcome
    contributions. <a href="https://www.apiman.io/apiman-docs/core/stable/development/Guide.html#_plugins" target="_blank">Refer to our developer's guide for more.</a></p>

  features:
    - title: Authorization
      icon: full
      description: |
        This policy enables fine grained authorization to API resources based on authenticated user roles. 
        This policy can be used to control precisely who (authenticated users) are allowed to access the API, at an arbitrarily fine-grained level.

    - title: BASIC Auth
      icon: full
      description: |
        This policy enables HTTP BASIC Authentication on an API.
        In other words, you can use this policy to require clients to provide HTTP BASIC authentication credentials when making requests to the managed API.


    - title: Caching Resources
      icon: partial
      description: |
        Allows caching of API responses in the Gateway to reduce overall traffic to the back-end API.
        The Resource Caching Policy can cache requests based on their URL path, http method and specific status code.

    - title: Ignored Resources
      icon: full
      description: |
        The ignored resources policy type enables you to shield some of an API’s resources from being accessed, without blocking access to all the API’s resources.

    - title: IP Allowlist
      icon: full
      description: Allows access to an API’s resources based on the IP address of the client application.

    - title: IP Blocklist
      icon: full
      description: Blocks access to an API’s resources based on the IP address of the client application.

    - title: Quotas
      icon: full
      description: |
        The Quota Policy type performs the same basic functionality as the Rate Limiting policy type, however, the intended use of this policy
        type is for less fine grained processing (e.g., 10,000 requests per month).

    - title: Transfer Quota
      icon: full
      description: |
        Transfer Quota tracks the number of bytes transferred (either uploaded or downloaded) rather than the total number of requests made.

    - title: Rate Limiting
      icon: full
      description: |
        The Rate Limiting Policy type governs the number of times requests are made to an API within a specified time period.

    - title: Time Restricted Access
      icon: full
      description: |
        This policy is used to only allow access to an API during certain times.

    - title: URL Rewriting
      icon: full
      description: |
        Re-write URLs in responses from the back-end API according to patterns provided.

    - title: API Key Plugin
      icon: full
      description: This plugin provides a policy that can help pass the API Key through to the back-end service.

    - title: Circuit Breaker Plugin
      icon: full
      description: This plugin has policies for performing circuit breaker functionality.

    - title: CORS Policy Plugin
      icon: full
      description: 'This plugin implements CORS (Cross-origin resource sharing): A method of controlling access to resources outside of an originating domain.'

    - title: Header Allow/Deny Policy Plugin
      icon: full
      description: Provides a policy that permits or denies requests matching certain HTTP headers.

    - title: HTTP Security Policy Plugin
      icon: full
      description: Provides a policy which allows security-related HTTP headers to be set, which can help mitigate a range of common security vulnerabilities.

    - title: JSONP Policy Plugin
      icon: full
      description: A plugin that contributes a policy that turns a standard RESTful endpoint into a JSONP compatible endpoint.

    - title: Keycloak OAuth Policy Plugin
      icon: full
      description: |
        <p>This plugin offers an OAuth2/JWT authentication policy that leverages the Keycloak SSO platform as the identity and access provider.</p>
        <p>Much of its functionality can actually be used by a wider range of SSO providers than just Keycloak.</p>
        <p>Roles can be extracted and used with authorization policies, or injected into headers to pass to backend services</a>

    - title: JWT Policy Plugin
      icon: full
      description: |
        A simple generic JWT auth policy (try this is the full-fat Keycloak plugin does not work for you).

    - title: Log Headers Policy Plugin
      icon: full
      description: | 
        A policy that logs the headers to std out. Useful to analyse inbound HTTP traffic  
        to the gateway when added as the first policy in the chain or to analyse   
        outbound HTTP traffic from the gateway when added as the last policy in the chain.

    - title: Simple Header Policy Plugin
      icon: full
      description: |
        Offers a simple policy that allows request headers to be added or stripped from the
        HTTP request (outgoing) or HTTP response (incoming).

    - title: 'XML<->JSON Transformation Policy Plugin'
      icon: partial
      description: 'This plugin provides a very simple policy which can transform the request and/or response payload between XML and JSON.'

    - title: Your Custom Policy Plugin
      icon: full
      description: |
        <p>You can implement your own custom policy plugin using Java.</p> 
        
        <p>You can make Apiman do almost anything!</p>
        
        <p>See the <a href="#extensibility">extensibility</a> section.</p>

- title: Identity & Access Management
  id: iam
  intro: |
    For logging into Apiman Manager, Apiman Devportal, and managing access to the Apiman platform.
    You can also use your IDM/IAM solution with some Apiman policies (e.g. OAuth2 policy), but this is not mandatory.

  features:
    - title: Keycloak
      icon: full
      description: | 
        Apiman is supports <a href="https://www.keycloak.org" target="_blank">Keycloak IDM</a> out of the box. 
        This allows a multitude of security, federation, SSO, and user management duties to be delegated to a specialist platform.

    - title: Tomcat
      icon: partial
      description: |
        Tomcat's simple auth mechanism is supported, but likely quite basic for real deployments.
        You can substitute it with Keycloak.

    - title: Your Favourite IDM
      icon: roadmap
      ticket: https://github.com/apiman/apiman/issues/2270

#  id: apiman-metrics
#  features:
#    - title: Elasticsearch
#      id:
#      icon: full
#      description: |
#


#    - API Manager User Interface
#    - API Gateway
#    - API Lifecycle
#    - API Key
#    - Notifications
#    - Events
#    - Create custom policies
#    - Plugins
#    - Developer Portal
#    - Plans
#    - API signup approvals
#    - Metrics (pluggable)
#    - Private APIs
#    - Public APIs
#    - API Discovery
#    - SSO (via Keycloak)

#- title: Administrative Features
#  features:
#    - Roles
#    - Permissions
#    - Multi-tenancy

